
TesisV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f660  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000148b4  0800f800  0800f800  0001f800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080240b4  080240b4  00042bcc  2**0
                  CONTENTS
  4 .ARM          00000008  080240b4  080240b4  000340b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080240bc  080240bc  00042bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080240bc  080240bc  000340bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080240c0  080240c0  000340c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002bcc  20000000  080240c4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20002bcc  08026c90  00042bcc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003284  08026c90  00043284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00042bcc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dab8  00000000  00000000  00042bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037aa  00000000  00000000  000606b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  00063e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00065620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b731  00000000  00000000  00066c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5a1  00000000  00000000  000823c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5e31  00000000  00000000  0009e962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144793  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b18  00000000  00000000  001447e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20002bcc 	.word	0x20002bcc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f7e8 	.word	0x0800f7e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20002bd0 	.word	0x20002bd0
 80001dc:	0800f7e8 	.word	0x0800f7e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	460b      	mov	r3, r1
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	88b9      	ldrh	r1, [r7, #4]
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	4618      	mov	r0, r3
 8001016:	f001 fecb 	bl	8002db0 <ST7735_DrawPixel>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b085      	sub	sp, #20
 8001026:	af02      	add	r7, sp, #8
 8001028:	4604      	mov	r4, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4611      	mov	r1, r2
 800102e:	461a      	mov	r2, r3
 8001030:	4623      	mov	r3, r4
 8001032:	80fb      	strh	r3, [r7, #6]
 8001034:	4603      	mov	r3, r0
 8001036:	80bb      	strh	r3, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8001040:	88f8      	ldrh	r0, [r7, #6]
 8001042:	88b9      	ldrh	r1, [r7, #4]
 8001044:	887a      	ldrh	r2, [r7, #2]
 8001046:	883c      	ldrh	r4, [r7, #0]
 8001048:	8b3b      	ldrh	r3, [r7, #24]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4623      	mov	r3, r4
 800104e:	f001 ffb9 	bl	8002fc4 <ST7735_FillRectangle>
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}

0800105a <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	80fb      	strh	r3, [r7, #6]
 8001064:	460b      	mov	r3, r1
 8001066:	80bb      	strh	r3, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800106c:	887a      	ldrh	r2, [r7, #2]
 800106e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ffc0 	bl	8000ffc <drawPixel>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	4604      	mov	r4, r0
 800108c:	4608      	mov	r0, r1
 800108e:	4611      	mov	r1, r2
 8001090:	461a      	mov	r2, r3
 8001092:	4623      	mov	r3, r4
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	4603      	mov	r3, r0
 8001098:	80bb      	strh	r3, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	807b      	strh	r3, [r7, #2]
 800109e:	4613      	mov	r3, r2
 80010a0:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80010a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010b4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80010b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010bc:	1acb      	subs	r3, r1, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bfb8      	it	lt
 80010c2:	425b      	neglt	r3, r3
 80010c4:	429a      	cmp	r2, r3
 80010c6:	bfcc      	ite	gt
 80010c8:	2301      	movgt	r3, #1
 80010ca:	2300      	movle	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80010d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00b      	beq.n	80010f0 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	833b      	strh	r3, [r7, #24]
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	80fb      	strh	r3, [r7, #6]
 80010e0:	8b3b      	ldrh	r3, [r7, #24]
 80010e2:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	82fb      	strh	r3, [r7, #22]
 80010e8:	883b      	ldrh	r3, [r7, #0]
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	8afb      	ldrh	r3, [r7, #22]
 80010ee:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80010f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dd0b      	ble.n	8001114 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	82bb      	strh	r3, [r7, #20]
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	8abb      	ldrh	r3, [r7, #20]
 8001106:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8001108:	88bb      	ldrh	r3, [r7, #4]
 800110a:	827b      	strh	r3, [r7, #18]
 800110c:	883b      	ldrh	r3, [r7, #0]
 800110e:	80bb      	strh	r3, [r7, #4]
 8001110:	8a7b      	ldrh	r3, [r7, #18]
 8001112:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800111e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001122:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	bfb8      	it	lt
 800112c:	425b      	neglt	r3, r3
 800112e:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8001130:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001134:	0fda      	lsrs	r2, r3, #31
 8001136:	4413      	add	r3, r2
 8001138:	105b      	asrs	r3, r3, #1
 800113a:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800113c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001140:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001144:	429a      	cmp	r2, r3
 8001146:	da02      	bge.n	800114e <writeLine+0xca>
        ystep = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	83bb      	strh	r3, [r7, #28]
 800114c:	e031      	b.n	80011b2 <writeLine+0x12e>
    } else {
        ystep = -1;
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8001154:	e02d      	b.n	80011b2 <writeLine+0x12e>
        if (steep) {
 8001156:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d008      	beq.n	8001170 <writeLine+0xec>
            writePixel(y0, x0, color);
 800115e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001160:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001164:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff76 	bl	800105a <writePixel>
 800116e:	e007      	b.n	8001180 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8001170:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001172:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff6d 	bl	800105a <writePixel>
        }
        err -= dy;
 8001180:	8bfa      	ldrh	r2, [r7, #30]
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800118a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800118e:	2b00      	cmp	r3, #0
 8001190:	da09      	bge.n	80011a6 <writeLine+0x122>
            y0 += ystep;
 8001192:	88ba      	ldrh	r2, [r7, #4]
 8001194:	8bbb      	ldrh	r3, [r7, #28]
 8001196:	4413      	add	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800119c:	8bfa      	ldrh	r2, [r7, #30]
 800119e:	8a3b      	ldrh	r3, [r7, #16]
 80011a0:	4413      	add	r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 80011a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3301      	adds	r3, #1
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	ddcb      	ble.n	8001156 <writeLine+0xd2>
        }
    }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3724      	adds	r7, #36	; 0x24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}

080011c8 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4604      	mov	r4, r0
 80011d0:	4608      	mov	r0, r1
 80011d2:	4611      	mov	r1, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	4623      	mov	r3, r4
 80011d8:	80fb      	strh	r3, [r7, #6]
 80011da:	4603      	mov	r3, r0
 80011dc:	80bb      	strh	r3, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	807b      	strh	r3, [r7, #2]
 80011e2:	4613      	mov	r3, r2
 80011e4:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 80011e6:	88ba      	ldrh	r2, [r7, #4]
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	4413      	add	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b21c      	sxth	r4, r3
 80011f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011f8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011fc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001200:	883b      	ldrh	r3, [r7, #0]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	4623      	mov	r3, r4
 8001206:	f7ff ff3d 	bl	8001084 <writeLine>
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}

08001212 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001212:	b590      	push	{r4, r7, lr}
 8001214:	b085      	sub	sp, #20
 8001216:	af02      	add	r7, sp, #8
 8001218:	4604      	mov	r4, r0
 800121a:	4608      	mov	r0, r1
 800121c:	4611      	mov	r1, r2
 800121e:	461a      	mov	r2, r3
 8001220:	4623      	mov	r3, r4
 8001222:	80fb      	strh	r3, [r7, #6]
 8001224:	4603      	mov	r3, r0
 8001226:	80bb      	strh	r3, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8001230:	88fa      	ldrh	r2, [r7, #6]
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	4413      	add	r3, r2
 8001236:	b29b      	uxth	r3, r3
 8001238:	3b01      	subs	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	b21a      	sxth	r2, r3
 800123e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001242:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001246:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800124a:	883b      	ldrh	r3, [r7, #0]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4623      	mov	r3, r4
 8001250:	f7ff ff18 	bl	8001084 <writeLine>
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}

0800125c <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b087      	sub	sp, #28
 8001260:	af02      	add	r7, sp, #8
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	4611      	mov	r1, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4623      	mov	r3, r4
 800126c:	80fb      	strh	r3, [r7, #6]
 800126e:	4603      	mov	r3, r0
 8001270:	80bb      	strh	r3, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]
 8001276:	4613      	mov	r3, r2
 8001278:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800127a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800127e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001282:	429a      	cmp	r2, r3
 8001284:	d11a      	bne.n	80012bc <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8001286:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800128e:	429a      	cmp	r2, r3
 8001290:	dd05      	ble.n	800129e <drawLine+0x42>
 8001292:	88bb      	ldrh	r3, [r7, #4]
 8001294:	81bb      	strh	r3, [r7, #12]
 8001296:	883b      	ldrh	r3, [r7, #0]
 8001298:	80bb      	strh	r3, [r7, #4]
 800129a:	89bb      	ldrh	r3, [r7, #12]
 800129c:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800129e:	883a      	ldrh	r2, [r7, #0]
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	8c3b      	ldrh	r3, [r7, #32]
 80012ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012b6:	f7ff ff87 	bl	80011c8 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 80012ba:	e02d      	b.n	8001318 <drawLine+0xbc>
    } else if(y0 == y1){
 80012bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d11a      	bne.n	80012fe <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80012c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dd05      	ble.n	80012e0 <drawLine+0x84>
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	81fb      	strh	r3, [r7, #14]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	80fb      	strh	r3, [r7, #6]
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80012e0:	887a      	ldrh	r2, [r7, #2]
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3301      	adds	r3, #1
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	8c3b      	ldrh	r3, [r7, #32]
 80012f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012f8:	f7ff ff8b 	bl	8001212 <drawFastHLine>
}
 80012fc:	e00c      	b.n	8001318 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80012fe:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001302:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001306:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800130a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800130e:	8c3b      	ldrh	r3, [r7, #32]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4623      	mov	r3, r4
 8001314:	f7ff feb6 	bl	8001084 <writeLine>
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}

08001320 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	4604      	mov	r4, r0
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	461a      	mov	r2, r3
 800132e:	4623      	mov	r3, r4
 8001330:	80fb      	strh	r3, [r7, #6]
 8001332:	4603      	mov	r3, r0
 8001334:	80bb      	strh	r3, [r7, #4]
 8001336:	460b      	mov	r3, r1
 8001338:	807b      	strh	r3, [r7, #2]
 800133a:	4613      	mov	r3, r2
 800133c:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	f1c3 0301 	rsb	r3, r3, #1
 8001344:	b29b      	uxth	r3, r3
 8001346:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	461a      	mov	r2, r3
 8001350:	03d2      	lsls	r2, r2, #15
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8001362:	e0a5      	b.n	80014b0 <drawCircleHelper+0x190>
        if (f >= 0) {
 8001364:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0e      	blt.n	800138a <drawCircleHelper+0x6a>
            y--;
 800136c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001370:	b29b      	uxth	r3, r3
 8001372:	3b01      	subs	r3, #1
 8001374:	b29b      	uxth	r3, r3
 8001376:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001378:	8a7b      	ldrh	r3, [r7, #18]
 800137a:	3302      	adds	r3, #2
 800137c:	b29b      	uxth	r3, r3
 800137e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8001380:	8afa      	ldrh	r2, [r7, #22]
 8001382:	8a7b      	ldrh	r3, [r7, #18]
 8001384:	4413      	add	r3, r2
 8001386:	b29b      	uxth	r3, r3
 8001388:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800138a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800138e:	b29b      	uxth	r3, r3
 8001390:	3301      	adds	r3, #1
 8001392:	b29b      	uxth	r3, r3
 8001394:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001396:	8abb      	ldrh	r3, [r7, #20]
 8001398:	3302      	adds	r3, #2
 800139a:	b29b      	uxth	r3, r3
 800139c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800139e:	8afa      	ldrh	r2, [r7, #22]
 80013a0:	8abb      	ldrh	r3, [r7, #20]
 80013a2:	4413      	add	r3, r2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01b      	beq.n	80013ea <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 80013b2:	88fa      	ldrh	r2, [r7, #6]
 80013b4:	8a3b      	ldrh	r3, [r7, #16]
 80013b6:	4413      	add	r3, r2
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b218      	sxth	r0, r3
 80013bc:	88ba      	ldrh	r2, [r7, #4]
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	4413      	add	r3, r2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fe46 	bl	800105a <writePixel>
            writePixel(x0 + y, y0 + x, color);
 80013ce:	88fa      	ldrh	r2, [r7, #6]
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	4413      	add	r3, r2
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b218      	sxth	r0, r3
 80013d8:	88ba      	ldrh	r2, [r7, #4]
 80013da:	8a3b      	ldrh	r3, [r7, #16]
 80013dc:	4413      	add	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fe38 	bl	800105a <writePixel>
        }
        if (cornername & 0x2) {
 80013ea:	787b      	ldrb	r3, [r7, #1]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01b      	beq.n	800142c <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 80013f4:	88fa      	ldrh	r2, [r7, #6]
 80013f6:	8a3b      	ldrh	r3, [r7, #16]
 80013f8:	4413      	add	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b218      	sxth	r0, r3
 80013fe:	88ba      	ldrh	r2, [r7, #4]
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b29b      	uxth	r3, r3
 8001406:	b21b      	sxth	r3, r3
 8001408:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fe25 	bl	800105a <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8001410:	88fa      	ldrh	r2, [r7, #6]
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	4413      	add	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	b218      	sxth	r0, r3
 800141a:	88ba      	ldrh	r2, [r7, #4]
 800141c:	8a3b      	ldrh	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	b29b      	uxth	r3, r3
 8001422:	b21b      	sxth	r3, r3
 8001424:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fe17 	bl	800105a <writePixel>
        }
        if (cornername & 0x8) {
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01b      	beq.n	800146e <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	89fb      	ldrh	r3, [r7, #14]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	b29b      	uxth	r3, r3
 800143e:	b218      	sxth	r0, r3
 8001440:	88ba      	ldrh	r2, [r7, #4]
 8001442:	8a3b      	ldrh	r3, [r7, #16]
 8001444:	4413      	add	r3, r2
 8001446:	b29b      	uxth	r3, r3
 8001448:	b21b      	sxth	r3, r3
 800144a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fe04 	bl	800105a <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8001452:	88fa      	ldrh	r2, [r7, #6]
 8001454:	8a3b      	ldrh	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	b29b      	uxth	r3, r3
 800145a:	b218      	sxth	r0, r3
 800145c:	88ba      	ldrh	r2, [r7, #4]
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	4413      	add	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21b      	sxth	r3, r3
 8001466:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fdf6 	bl	800105a <writePixel>
        }
        if (cornername & 0x1) {
 800146e:	787b      	ldrb	r3, [r7, #1]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01b      	beq.n	80014b0 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8001478:	88fa      	ldrh	r2, [r7, #6]
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	b218      	sxth	r0, r3
 8001482:	88ba      	ldrh	r2, [r7, #4]
 8001484:	8a3b      	ldrh	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	b29b      	uxth	r3, r3
 800148a:	b21b      	sxth	r3, r3
 800148c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fde3 	bl	800105a <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8001494:	88fa      	ldrh	r2, [r7, #6]
 8001496:	8a3b      	ldrh	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b29b      	uxth	r3, r3
 800149c:	b218      	sxth	r0, r3
 800149e:	88ba      	ldrh	r2, [r7, #4]
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fdd5 	bl	800105a <writePixel>
    while (x<y) {
 80014b0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80014b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	f6ff af53 	blt.w	8001364 <drawCircleHelper+0x44>
        }
    }
}
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
 80014c2:	371c      	adds	r7, #28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}

080014c8 <drawRect>:
}



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4623      	mov	r3, r4
 80014d8:	80fb      	strh	r3, [r7, #6]
 80014da:	4603      	mov	r3, r0
 80014dc:	80bb      	strh	r3, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	807b      	strh	r3, [r7, #2]
 80014e2:	4613      	mov	r3, r2
 80014e4:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 80014e6:	8b3b      	ldrh	r3, [r7, #24]
 80014e8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014f0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014f4:	f7ff fe8d 	bl	8001212 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 80014f8:	88ba      	ldrh	r2, [r7, #4]
 80014fa:	883b      	ldrh	r3, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	b29b      	uxth	r3, r3
 8001500:	3b01      	subs	r3, #1
 8001502:	b29b      	uxth	r3, r3
 8001504:	b219      	sxth	r1, r3
 8001506:	8b3b      	ldrh	r3, [r7, #24]
 8001508:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800150c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001510:	f7ff fe7f 	bl	8001212 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8001514:	8b3b      	ldrh	r3, [r7, #24]
 8001516:	f9b7 2000 	ldrsh.w	r2, [r7]
 800151a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800151e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001522:	f7ff fe51 	bl	80011c8 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8001526:	88fa      	ldrh	r2, [r7, #6]
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	4413      	add	r3, r2
 800152c:	b29b      	uxth	r3, r3
 800152e:	3b01      	subs	r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	b218      	sxth	r0, r3
 8001534:	8b3b      	ldrh	r3, [r7, #24]
 8001536:	f9b7 2000 	ldrsh.w	r2, [r7]
 800153a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800153e:	f7ff fe43 	bl	80011c8 <drawFastVLine>
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}
	...

0800154c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af02      	add	r7, sp, #8
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <fillScreen+0x2c>)
 8001558:	f9b3 2000 	ldrsh.w	r2, [r3]
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <fillScreen+0x30>)
 800155e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	460b      	mov	r3, r1
 8001568:	2100      	movs	r1, #0
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fd59 	bl	8001022 <fillRect>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20002ef8 	.word	0x20002ef8
 800157c:	20002efc 	.word	0x20002efc

08001580 <MPU9250_Init>:
		0.000000,	0.000000,	0.000000,	0.000000,	0.000000,	0.000000,	0.000000,	0.000000,	0.000000,	0.000000,	0.000000};

char buff[100];
extern float Ax_offset, Ay_offset, Az_offset, Gx_offset, Gy_offset, Gz_offset;

void MPU9250_Init(void){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af04      	add	r7, sp, #16
	uint8_t check, data;
	HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,WHO_AM_I_REG,1,&check,1,1000);  //Check the conection with MPU9250
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	1dfb      	adds	r3, r7, #7
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2301      	movs	r3, #1
 8001596:	2275      	movs	r2, #117	; 0x75
 8001598:	21d0      	movs	r1, #208	; 0xd0
 800159a:	4839      	ldr	r0, [pc, #228]	; (8001680 <MPU9250_Init+0x100>)
 800159c:	f005 fc14 	bl	8006dc8 <HAL_I2C_Mem_Read>
	if (check == 0x71){
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b71      	cmp	r3, #113	; 0x71
 80015a4:	d168      	bne.n	8001678 <MPU9250_Init+0xf8>
		//Print the true connection
		sprintf(buff,"Hello, My name is MPU9250, I'm happy to meet you\r\n"); 
 80015a6:	4937      	ldr	r1, [pc, #220]	; (8001684 <MPU9250_Init+0x104>)
 80015a8:	4837      	ldr	r0, [pc, #220]	; (8001688 <MPU9250_Init+0x108>)
 80015aa:	f00a fb77 	bl	800bc9c <siprintf>
		HAL_UART_Transmit(&huart1,buff,strlen(buff),1000);
 80015ae:	4836      	ldr	r0, [pc, #216]	; (8001688 <MPU9250_Init+0x108>)
 80015b0:	f7fe fe16 	bl	80001e0 <strlen>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015bc:	4932      	ldr	r1, [pc, #200]	; (8001688 <MPU9250_Init+0x108>)
 80015be:	4833      	ldr	r0, [pc, #204]	; (800168c <MPU9250_Init+0x10c>)
 80015c0:	f008 fda5 	bl	800a10e <HAL_UART_Transmit>
		//Select de clock Source
		data = 0x0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,PWR_MGMT_1_REG,1,&data,1,1000);
 80015c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2301      	movs	r3, #1
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	1dbb      	adds	r3, r7, #6
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2301      	movs	r3, #1
 80015d8:	226b      	movs	r2, #107	; 0x6b
 80015da:	21d0      	movs	r1, #208	; 0xd0
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <MPU9250_Init+0x100>)
 80015de:	f005 faf9 	bl	8006bd4 <HAL_I2C_Mem_Write>
		//select the sample rate time
		data = 0x07;
 80015e2:	2307      	movs	r3, #7
 80015e4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,SMPLRT_DIV_REG,1,&data,1,1000);
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	1dbb      	adds	r3, r7, #6
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	2219      	movs	r2, #25
 80015f8:	21d0      	movs	r1, #208	; 0xd0
 80015fa:	4821      	ldr	r0, [pc, #132]	; (8001680 <MPU9250_Init+0x100>)
 80015fc:	f005 faea 	bl	8006bd4 <HAL_I2C_Mem_Write>
		//Configure the accel scale -+ 2g
		data = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,ACCEL_CONFIG_REG,1,&data,1,1000);
 8001604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	2301      	movs	r3, #1
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	1dbb      	adds	r3, r7, #6
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2301      	movs	r3, #1
 8001614:	221c      	movs	r2, #28
 8001616:	21d0      	movs	r1, #208	; 0xd0
 8001618:	4819      	ldr	r0, [pc, #100]	; (8001680 <MPU9250_Init+0x100>)
 800161a:	f005 fadb 	bl	8006bd4 <HAL_I2C_Mem_Write>
		//Configure the Gyro Scale 250�/s
		data = 0x00;
 800161e:	2300      	movs	r3, #0
 8001620:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,GYRO_CONFIG_REG,1,&data,1,1000);
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	2301      	movs	r3, #1
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	1dbb      	adds	r3, r7, #6
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	221b      	movs	r2, #27
 8001634:	21d0      	movs	r1, #208	; 0xd0
 8001636:	4812      	ldr	r0, [pc, #72]	; (8001680 <MPU9250_Init+0x100>)
 8001638:	f005 facc 	bl	8006bd4 <HAL_I2C_Mem_Write>
		//disable I2C master interface.Precondition to enable bypass multiplexer of the I2C master interface
		data = 0x0;
 800163c:	2300      	movs	r3, #0
 800163e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU9250_USERCONTROL,1,&data,1,1000);
 8001640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2301      	movs	r3, #1
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	1dbb      	adds	r3, r7, #6
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	226a      	movs	r2, #106	; 0x6a
 8001652:	21d0      	movs	r1, #208	; 0xd0
 8001654:	480a      	ldr	r0, [pc, #40]	; (8001680 <MPU9250_Init+0x100>)
 8001656:	f005 fabd 	bl	8006bd4 <HAL_I2C_Mem_Write>
		//enable I2C master interface bypass multiplexer
		data = 0x2;
 800165a:	2302      	movs	r3, #2
 800165c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,MPU9250_ADDR,MPU9250_BYPASSCONFG,1,&data,1,1000);
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2301      	movs	r3, #1
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	2237      	movs	r2, #55	; 0x37
 8001670:	21d0      	movs	r1, #208	; 0xd0
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <MPU9250_Init+0x100>)
 8001674:	f005 faae 	bl	8006bd4 <HAL_I2C_Mem_Write>
	}
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20002f4c 	.word	0x20002f4c
 8001684:	0800f800 	.word	0x0800f800
 8001688:	20002c6c 	.word	0x20002c6c
 800168c:	200030f0 	.word	0x200030f0

08001690 <initAK8963>:
void initAK8963(void){
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af04      	add	r7, sp, #16
	uint8_t check, data;
	//chech te correct conection with AK8963 (Magnetometer)
		HAL_I2C_Mem_Read(&hi2c1,AK8963_ADDRESS,0x0,1,&check,1,1000);
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	2200      	movs	r2, #0
 80016a8:	2118      	movs	r1, #24
 80016aa:	4864      	ldr	r0, [pc, #400]	; (800183c <initAK8963+0x1ac>)
 80016ac:	f005 fb8c 	bl	8006dc8 <HAL_I2C_Mem_Read>
		if (check == 0x48){
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2b48      	cmp	r3, #72	; 0x48
 80016b4:	d10e      	bne.n	80016d4 <initAK8963+0x44>
			sprintf(buff,"Hello, My name is AK8963, I'm happy to meet you\r\n");
 80016b6:	4962      	ldr	r1, [pc, #392]	; (8001840 <initAK8963+0x1b0>)
 80016b8:	4862      	ldr	r0, [pc, #392]	; (8001844 <initAK8963+0x1b4>)
 80016ba:	f00a faef 	bl	800bc9c <siprintf>
			HAL_UART_Transmit(&huart1,buff,strlen(buff),1000);
 80016be:	4861      	ldr	r0, [pc, #388]	; (8001844 <initAK8963+0x1b4>)
 80016c0:	f7fe fd8e 	bl	80001e0 <strlen>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016cc:	495d      	ldr	r1, [pc, #372]	; (8001844 <initAK8963+0x1b4>)
 80016ce:	485e      	ldr	r0, [pc, #376]	; (8001848 <initAK8963+0x1b8>)
 80016d0:	f008 fd1d 	bl	800a10e <HAL_UART_Transmit>
		}
	//setup the magnetometer:Fuse ROM access mode and 16 bit output
	data = 0x1F;
 80016d4:	231f      	movs	r3, #31
 80016d6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1,AK8963_ADDRESS,AK8963_CNTL,1,&data,1,1000);
 80016d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2301      	movs	r3, #1
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	1dbb      	adds	r3, r7, #6
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	220a      	movs	r2, #10
 80016ea:	2118      	movs	r1, #24
 80016ec:	4853      	ldr	r0, [pc, #332]	; (800183c <initAK8963+0x1ac>)
 80016ee:	f005 fa71 	bl	8006bd4 <HAL_I2C_Mem_Write>
	
	uint8_t Rec_Data[3];
	//read the sensitivity adjustment values
	HAL_I2C_Mem_Read(&hi2c1,AK8963_ADDRESS,AK8963_ASAX,1,Rec_Data,3,1000);
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2303      	movs	r3, #3
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	463b      	mov	r3, r7
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	2210      	movs	r2, #16
 8001704:	2118      	movs	r1, #24
 8001706:	484d      	ldr	r0, [pc, #308]	; (800183c <initAK8963+0x1ac>)
 8001708:	f005 fb5e 	bl	8006dc8 <HAL_I2C_Mem_Read>
	
	sens_Mg_X = (Rec_Data[0]-128)*0.5/128+1;
 800170c:	783b      	ldrb	r3, [r7, #0]
 800170e:	3b80      	subs	r3, #128	; 0x80
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff0f 	bl	8000534 <__aeabi_i2d>
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <initAK8963+0x1bc>)
 800171c:	f7fe ff74 	bl	8000608 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <initAK8963+0x1c0>)
 800172e:	f7ff f895 	bl	800085c <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <initAK8963+0x1c4>)
 8001740:	f7fe fdac 	bl	800029c <__adddf3>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff fa34 	bl	8000bb8 <__aeabi_d2uiz>
 8001750:	4603      	mov	r3, r0
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b40      	ldr	r3, [pc, #256]	; (8001858 <initAK8963+0x1c8>)
 8001756:	701a      	strb	r2, [r3, #0]
	sens_Mg_Y = (Rec_Data[0]-128)*0.5/128+1;
 8001758:	783b      	ldrb	r3, [r7, #0]
 800175a:	3b80      	subs	r3, #128	; 0x80
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fee9 	bl	8000534 <__aeabi_i2d>
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <initAK8963+0x1bc>)
 8001768:	f7fe ff4e 	bl	8000608 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <initAK8963+0x1c0>)
 800177a:	f7ff f86f 	bl	800085c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b32      	ldr	r3, [pc, #200]	; (8001854 <initAK8963+0x1c4>)
 800178c:	f7fe fd86 	bl	800029c <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa0e 	bl	8000bb8 <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <initAK8963+0x1cc>)
 80017a2:	701a      	strb	r2, [r3, #0]
	sens_Mg_Z = (Rec_Data[0]-128)*0.5/128+1;
 80017a4:	783b      	ldrb	r3, [r7, #0]
 80017a6:	3b80      	subs	r3, #128	; 0x80
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fec3 	bl	8000534 <__aeabi_i2d>
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <initAK8963+0x1bc>)
 80017b4:	f7fe ff28 	bl	8000608 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <initAK8963+0x1c0>)
 80017c6:	f7ff f849 	bl	800085c <__aeabi_ddiv>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <initAK8963+0x1c4>)
 80017d8:	f7fe fd60 	bl	800029c <__adddf3>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f9e8 	bl	8000bb8 <__aeabi_d2uiz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <initAK8963+0x1d0>)
 80017ee:	701a      	strb	r2, [r3, #0]
	//reset the magnetometer to power down mode
	data = 0x0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1,AK8963_ADDRESS,AK8963_CNTL,1,&data,1,1000);
 80017f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	2301      	movs	r3, #1
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2301      	movs	r3, #1
 8001804:	220a      	movs	r2, #10
 8001806:	2118      	movs	r1, #24
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <initAK8963+0x1ac>)
 800180a:	f005 f9e3 	bl	8006bd4 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 800180e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001812:	f003 fe31 	bl	8005478 <HAL_Delay>

	data = 0x16;
 8001816:	2316      	movs	r3, #22
 8001818:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1,AK8963_ADDRESS,AK8963_CNTL,1,&data,1,1000);
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	2301      	movs	r3, #1
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2301      	movs	r3, #1
 800182a:	220a      	movs	r2, #10
 800182c:	2118      	movs	r1, #24
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <initAK8963+0x1ac>)
 8001830:	f005 f9d0 	bl	8006bd4 <HAL_I2C_Mem_Write>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20002f4c 	.word	0x20002f4c
 8001840:	0800f834 	.word	0x0800f834
 8001844:	20002c6c 	.word	0x20002c6c
 8001848:	200030f0 	.word	0x200030f0
 800184c:	3fe00000 	.word	0x3fe00000
 8001850:	40600000 	.word	0x40600000
 8001854:	3ff00000 	.word	0x3ff00000
 8001858:	20002ea0 	.word	0x20002ea0
 800185c:	20002e80 	.word	0x20002e80
 8001860:	20002c56 	.word	0x20002c56
 8001864:	00000000 	.word	0x00000000

08001868 <MPU9250_Read_Accel>:
void MPU9250_Read_Accel (){
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	
	HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,ACCEL_XOUT_H_REG,1,Rec_Data,6,1000);
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	2306      	movs	r3, #6
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	463b      	mov	r3, r7
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2301      	movs	r3, #1
 800187e:	223b      	movs	r2, #59	; 0x3b
 8001880:	21d0      	movs	r1, #208	; 0xd0
 8001882:	484d      	ldr	r0, [pc, #308]	; (80019b8 <MPU9250_Read_Accel+0x150>)
 8001884:	f005 faa0 	bl	8006dc8 <HAL_I2C_Mem_Read>
	
	Accel_X_Raw = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]);
 8001888:	783b      	ldrb	r3, [r7, #0]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	787b      	ldrb	r3, [r7, #1]
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21a      	sxth	r2, r3
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <MPU9250_Read_Accel+0x154>)
 8001898:	801a      	strh	r2, [r3, #0]
	Accel_Y_Raw = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]);
 800189a:	78bb      	ldrb	r3, [r7, #2]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21a      	sxth	r2, r3
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <MPU9250_Read_Accel+0x158>)
 80018aa:	801a      	strh	r2, [r3, #0]
	Accel_Z_Raw = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]);
 80018ac:	793b      	ldrb	r3, [r7, #4]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	797b      	ldrb	r3, [r7, #5]
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	4b42      	ldr	r3, [pc, #264]	; (80019c4 <MPU9250_Read_Accel+0x15c>)
 80018bc:	801a      	strh	r2, [r3, #0]
	
	Ax = (Accel_X_Raw-Ax_offset)*9.806/16384.0;
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <MPU9250_Read_Accel+0x154>)
 80018c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018cc:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <MPU9250_Read_Accel+0x160>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d6:	ee17 0a90 	vmov	r0, s15
 80018da:	f7fe fe3d 	bl	8000558 <__aeabi_f2d>
 80018de:	a334      	add	r3, pc, #208	; (adr r3, 80019b0 <MPU9250_Read_Accel+0x148>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe90 	bl	8000608 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b35      	ldr	r3, [pc, #212]	; (80019cc <MPU9250_Read_Accel+0x164>)
 80018f6:	f7fe ffb1 	bl	800085c <__aeabi_ddiv>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f979 	bl	8000bf8 <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	4a31      	ldr	r2, [pc, #196]	; (80019d0 <MPU9250_Read_Accel+0x168>)
 800190a:	6013      	str	r3, [r2, #0]
	Ay = (Accel_Y_Raw-Ay_offset)*9.806/16384.0;
 800190c:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <MPU9250_Read_Accel+0x158>)
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <MPU9250_Read_Accel+0x16c>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001924:	ee17 0a90 	vmov	r0, s15
 8001928:	f7fe fe16 	bl	8000558 <__aeabi_f2d>
 800192c:	a320      	add	r3, pc, #128	; (adr r3, 80019b0 <MPU9250_Read_Accel+0x148>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe69 	bl	8000608 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <MPU9250_Read_Accel+0x164>)
 8001944:	f7fe ff8a 	bl	800085c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f952 	bl	8000bf8 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	4a20      	ldr	r2, [pc, #128]	; (80019d8 <MPU9250_Read_Accel+0x170>)
 8001958:	6013      	str	r3, [r2, #0]
	Az = (Accel_Z_Raw-Az_offset)*9.806/16384.0;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <MPU9250_Read_Accel+0x15c>)
 800195c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MPU9250_Read_Accel+0x174>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001972:	ee17 0a90 	vmov	r0, s15
 8001976:	f7fe fdef 	bl	8000558 <__aeabi_f2d>
 800197a:	a30d      	add	r3, pc, #52	; (adr r3, 80019b0 <MPU9250_Read_Accel+0x148>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe42 	bl	8000608 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MPU9250_Read_Accel+0x164>)
 8001992:	f7fe ff63 	bl	800085c <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f92b 	bl	8000bf8 <__aeabi_d2f>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <MPU9250_Read_Accel+0x178>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	083126e9 	.word	0x083126e9
 80019b4:	40239cac 	.word	0x40239cac
 80019b8:	20002f4c 	.word	0x20002f4c
 80019bc:	20002ed0 	.word	0x20002ed0
 80019c0:	20002e60 	.word	0x20002e60
 80019c4:	20002ee4 	.word	0x20002ee4
 80019c8:	20002be8 	.word	0x20002be8
 80019cc:	40d00000 	.word	0x40d00000
 80019d0:	20002e90 	.word	0x20002e90
 80019d4:	20002bec 	.word	0x20002bec
 80019d8:	20002e74 	.word	0x20002e74
 80019dc:	20002bf0 	.word	0x20002bf0
 80019e0:	20002e9c 	.word	0x20002e9c

080019e4 <MPU9250_Read_Gyro>:
void MPU9250_Read_Gyro (void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	
	HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,GYRO_XOUT_H_REG,1,Rec_Data,6,1000);
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	2306      	movs	r3, #6
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	463b      	mov	r3, r7
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	2243      	movs	r2, #67	; 0x43
 80019fc:	21d0      	movs	r1, #208	; 0xd0
 80019fe:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <MPU9250_Read_Gyro+0xd0>)
 8001a00:	f005 f9e2 	bl	8006dc8 <HAL_I2C_Mem_Read>
	
	Gyro_X_Raw = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]);
 8001a04:	783b      	ldrb	r3, [r7, #0]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	787b      	ldrb	r3, [r7, #1]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <MPU9250_Read_Gyro+0xd4>)
 8001a14:	801a      	strh	r2, [r3, #0]
	Gyro_Y_Raw = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]);
 8001a16:	78bb      	ldrb	r3, [r7, #2]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	4313      	orrs	r3, r2
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <MPU9250_Read_Gyro+0xd8>)
 8001a26:	801a      	strh	r2, [r3, #0]
	Gyro_Z_Raw = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]);
 8001a28:	793b      	ldrb	r3, [r7, #4]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	797b      	ldrb	r3, [r7, #5]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <MPU9250_Read_Gyro+0xdc>)
 8001a38:	801a      	strh	r2, [r3, #0]
	
	Gx = (Gyro_X_Raw-Gx_offset)/131.0;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <MPU9250_Read_Gyro+0xd4>)
 8001a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <MPU9250_Read_Gyro+0xe0>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a52:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001ac8 <MPU9250_Read_Gyro+0xe4>
 8001a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <MPU9250_Read_Gyro+0xe8>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
	Gy = (Gyro_Y_Raw-Gy_offset)/131.0;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MPU9250_Read_Gyro+0xd8>)
 8001a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MPU9250_Read_Gyro+0xec>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a78:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001ac8 <MPU9250_Read_Gyro+0xe4>
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MPU9250_Read_Gyro+0xf0>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
	Gz = (Gyro_Z_Raw-Gz_offset)/131.0;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MPU9250_Read_Gyro+0xdc>)
 8001a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MPU9250_Read_Gyro+0xf4>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ac8 <MPU9250_Read_Gyro+0xe4>
 8001aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <MPU9250_Read_Gyro+0xf8>)
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20002f4c 	.word	0x20002f4c
 8001ab8:	20002e98 	.word	0x20002e98
 8001abc:	20002ed2 	.word	0x20002ed2
 8001ac0:	20002e88 	.word	0x20002e88
 8001ac4:	20002bf4 	.word	0x20002bf4
 8001ac8:	43030000 	.word	0x43030000
 8001acc:	20002c60 	.word	0x20002c60
 8001ad0:	20002bf8 	.word	0x20002bf8
 8001ad4:	20002e7c 	.word	0x20002e7c
 8001ad8:	20002bfc 	.word	0x20002bfc
 8001adc:	20002ed8 	.word	0x20002ed8

08001ae0 <MPU9250_Read_Temp>:
void MPU9250_Read_Temp (void){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af04      	add	r7, sp, #16
	uint8_t Data[2];
	HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,TEMP_OUT_H_REG,1,Data,2,1000);
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2302      	movs	r3, #2
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2301      	movs	r3, #1
 8001af6:	2241      	movs	r2, #65	; 0x41
 8001af8:	21d0      	movs	r1, #208	; 0xd0
 8001afa:	481b      	ldr	r0, [pc, #108]	; (8001b68 <MPU9250_Read_Temp+0x88>)
 8001afc:	f005 f964 	bl	8006dc8 <HAL_I2C_Mem_Read>
	
	Temp_Raw = (int16_t)(Data[0]<<8 | Data[1]);
 8001b00:	793b      	ldrb	r3, [r7, #4]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	797b      	ldrb	r3, [r7, #5]
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MPU9250_Read_Temp+0x8c>)
 8001b10:	801a      	strh	r2, [r3, #0]
	Temp = ((float)Temp_Raw)/333.87+21.0;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MPU9250_Read_Temp+0x8c>)
 8001b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b20:	ee17 0a90 	vmov	r0, s15
 8001b24:	f7fe fd18 	bl	8000558 <__aeabi_f2d>
 8001b28:	a30d      	add	r3, pc, #52	; (adr r3, 8001b60 <MPU9250_Read_Temp+0x80>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fe95 	bl	800085c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MPU9250_Read_Temp+0x90>)
 8001b40:	f7fe fbac 	bl	800029c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f854 	bl	8000bf8 <__aeabi_d2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <MPU9250_Read_Temp+0x94>)
 8001b54:	6013      	str	r3, [r2, #0]
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	851eb852 	.word	0x851eb852
 8001b64:	4074ddeb 	.word	0x4074ddeb
 8001b68:	20002f4c 	.word	0x20002f4c
 8001b6c:	20002e9a 	.word	0x20002e9a
 8001b70:	40350000 	.word	0x40350000
 8001b74:	20002e5c 	.word	0x20002e5c

08001b78 <MPU9250_Read_Mag>:
void MPU9250_Read_Mag (void){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(&hi2c1,AK8963_ADDRESS,AK8963_XOUT_L,1,Rec_Data,7,1000);
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	9302      	str	r3, [sp, #8]
 8001b84:	2307      	movs	r3, #7
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	463b      	mov	r3, r7
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	2118      	movs	r1, #24
 8001b92:	4845      	ldr	r0, [pc, #276]	; (8001ca8 <MPU9250_Read_Mag+0x130>)
 8001b94:	f005 f918 	bl	8006dc8 <HAL_I2C_Mem_Read>
	Mag_X_Raw = (int16_t)(Rec_Data[0] | Rec_Data[1]<<8);
 8001b98:	783b      	ldrb	r3, [r7, #0]
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <MPU9250_Read_Mag+0x134>)
 8001ba8:	801a      	strh	r2, [r3, #0]
	Mag_Y_Raw = (int16_t)(Rec_Data[2] | Rec_Data[3]<<8);
 8001baa:	78bb      	ldrb	r3, [r7, #2]
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <MPU9250_Read_Mag+0x138>)
 8001bba:	801a      	strh	r2, [r3, #0]
	Mag_Z_Raw = (int16_t)(Rec_Data[4] | Rec_Data[5]<<8);
 8001bbc:	793b      	ldrb	r3, [r7, #4]
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <MPU9250_Read_Mag+0x13c>)
 8001bcc:	801a      	strh	r2, [r3, #0]

	Mgx = (float)Mag_X_Raw*(4800.0)/32768.0;
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <MPU9250_Read_Mag+0x134>)
 8001bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	ee17 0a90 	vmov	r0, s15
 8001be0:	f7fe fcba 	bl	8000558 <__aeabi_f2d>
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <MPU9250_Read_Mag+0x140>)
 8001bea:	f7fe fd0d 	bl	8000608 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <MPU9250_Read_Mag+0x144>)
 8001bfc:	f7fe fe2e 	bl	800085c <__aeabi_ddiv>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7fe fff6 	bl	8000bf8 <__aeabi_d2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a2c      	ldr	r2, [pc, #176]	; (8001cc0 <MPU9250_Read_Mag+0x148>)
 8001c10:	6013      	str	r3, [r2, #0]
	Mgy = (float)Mag_Y_Raw*(4800.0)/32768.0;
 8001c12:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <MPU9250_Read_Mag+0x138>)
 8001c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c20:	ee17 0a90 	vmov	r0, s15
 8001c24:	f7fe fc98 	bl	8000558 <__aeabi_f2d>
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <MPU9250_Read_Mag+0x140>)
 8001c2e:	f7fe fceb 	bl	8000608 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <MPU9250_Read_Mag+0x144>)
 8001c40:	f7fe fe0c 	bl	800085c <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffd4 	bl	8000bf8 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <MPU9250_Read_Mag+0x14c>)
 8001c54:	6013      	str	r3, [r2, #0]
	Mgz = -(float)Mag_Z_Raw*(4800.0)/32768.0;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MPU9250_Read_Mag+0x13c>)
 8001c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c64:	eef1 7a67 	vneg.f32	s15, s15
 8001c68:	ee17 3a90 	vmov	r3, s15
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc73 	bl	8000558 <__aeabi_f2d>
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MPU9250_Read_Mag+0x140>)
 8001c78:	f7fe fcc6 	bl	8000608 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MPU9250_Read_Mag+0x144>)
 8001c8a:	f7fe fde7 	bl	800085c <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7fe ffaf 	bl	8000bf8 <__aeabi_d2f>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <MPU9250_Read_Mag+0x150>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20002f4c 	.word	0x20002f4c
 8001cac:	20002ed4 	.word	0x20002ed4
 8001cb0:	20002edc 	.word	0x20002edc
 8001cb4:	20002c64 	.word	0x20002c64
 8001cb8:	40b2c000 	.word	0x40b2c000
 8001cbc:	40e00000 	.word	0x40e00000
 8001cc0:	20002e94 	.word	0x20002e94
 8001cc4:	20002e8c 	.word	0x20002e8c
 8001cc8:	20002e78 	.word	0x20002e78
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <MPU9250_LectureWithFilter>:

void MPU9250_DistanceAngle(void){

}
void MPU9250_LectureWithFilter (void){
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b0fe      	sub	sp, #504	; 0x1f8
 8001cd4:	af00      	add	r7, sp, #0
	MPU9250_Read_Gyro();
 8001cd6:	f7ff fe85 	bl	80019e4 <MPU9250_Read_Gyro>
	MPU9250_Read_Accel();
 8001cda:	f7ff fdc5 	bl	8001868 <MPU9250_Read_Accel>
	MPU9250_Read_Mag();
 8001cde:	f7ff ff4b 	bl	8001b78 <MPU9250_Read_Mag>

	float Var[9]= {Gx, Gy, Gz, Ax, Ay, Az-9.806, Mgx, Mgy, Mgz};
 8001ce2:	4ba3      	ldr	r3, [pc, #652]	; (8001f70 <MPU9250_LectureWithFilter+0x2a0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001cea:	4ba2      	ldr	r3, [pc, #648]	; (8001f74 <MPU9250_LectureWithFilter+0x2a4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001cf2:	4ba1      	ldr	r3, [pc, #644]	; (8001f78 <MPU9250_LectureWithFilter+0x2a8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001cfa:	4ba0      	ldr	r3, [pc, #640]	; (8001f7c <MPU9250_LectureWithFilter+0x2ac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d02:	4b9f      	ldr	r3, [pc, #636]	; (8001f80 <MPU9250_LectureWithFilter+0x2b0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d0a:	4b9e      	ldr	r3, [pc, #632]	; (8001f84 <MPU9250_LectureWithFilter+0x2b4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc22 	bl	8000558 <__aeabi_f2d>
 8001d14:	a394      	add	r3, pc, #592	; (adr r3, 8001f68 <MPU9250_LectureWithFilter+0x298>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fabd 	bl	8000298 <__aeabi_dsub>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe ff67 	bl	8000bf8 <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d30:	4b95      	ldr	r3, [pc, #596]	; (8001f88 <MPU9250_LectureWithFilter+0x2b8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8001d38:	4b94      	ldr	r3, [pc, #592]	; (8001f8c <MPU9250_LectureWithFilter+0x2bc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001d40:	4b93      	ldr	r3, [pc, #588]	; (8001f90 <MPU9250_LectureWithFilter+0x2c0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	float NewVar[9][11];
	float sensitivy[9] = {1/131,1/131,1/131,9.806/16384.0,9.806/16384.0,9.806/16384.0,0,0,0};
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	4a92      	ldr	r2, [pc, #584]	; (8001f94 <MPU9250_LectureWithFilter+0x2c4>)
 8001d4c:	461c      	mov	r4, r3
 8001d4e:	4615      	mov	r5, r2
 8001d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d58:	682b      	ldr	r3, [r5, #0]
 8001d5a:	6023      	str	r3, [r4, #0]

	for(int i=0; i<9; i++){
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001d62:	e00c      	b.n	8001d7e <MPU9250_LectureWithFilter+0xae>
		MPU9250Filtered[i] = 0;
 8001d64:	4a8c      	ldr	r2, [pc, #560]	; (8001f98 <MPU9250_LectureWithFilter+0x2c8>)
 8001d66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
	for(int i=0; i<9; i++){
 8001d74:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001d7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	ddee      	ble.n	8001d64 <MPU9250_LectureWithFilter+0x94>
	}
	for(int i=0; i<9; i++){
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001d8c:	e014      	b.n	8001db8 <MPU9250_LectureWithFilter+0xe8>
		MPU9250HistoryData[i][0] = Var[i];
 8001d8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b44      	subs	r3, #68	; 0x44
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	497f      	ldr	r1, [pc, #508]	; (8001f9c <MPU9250_LectureWithFilter+0x2cc>)
 8001da0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001da4:	202c      	movs	r0, #44	; 0x2c
 8001da6:	fb00 f303 	mul.w	r3, r0, r3
 8001daa:	440b      	add	r3, r1
 8001dac:	601a      	str	r2, [r3, #0]
	for(int i=0; i<9; i++){
 8001dae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001db2:	3301      	adds	r3, #1
 8001db4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001db8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	dde6      	ble.n	8001d8e <MPU9250_LectureWithFilter+0xbe>
	}
	for(int i=0; i<9; i++){
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8001dc6:	e041      	b.n	8001e4c <MPU9250_LectureWithFilter+0x17c>
		for(int j=0; j<11; j++){
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001dce:	e034      	b.n	8001e3a <MPU9250_LectureWithFilter+0x16a>
			NewVar[i][j] = MPU9250HistoryData[i][j]*DataFilter[i][j];
 8001dd0:	4972      	ldr	r1, [pc, #456]	; (8001f9c <MPU9250_LectureWithFilter+0x2cc>)
 8001dd2:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	ed93 7a00 	vldr	s14, [r3]
 8001dee:	496c      	ldr	r1, [pc, #432]	; (8001fa0 <MPU9250_LectureWithFilter+0x2d0>)
 8001df0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e10:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e14:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<11; j++){
 8001e30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e34:	3301      	adds	r3, #1
 8001e36:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001e3a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e3e:	2b0a      	cmp	r3, #10
 8001e40:	ddc6      	ble.n	8001dd0 <MPU9250_LectureWithFilter+0x100>
	for(int i=0; i<9; i++){
 8001e42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e46:	3301      	adds	r3, #1
 8001e48:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8001e4c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	ddb9      	ble.n	8001dc8 <MPU9250_LectureWithFilter+0xf8>
		}
	}
	for(int i=0; i<9; i++){
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e5a:	e031      	b.n	8001ec0 <MPU9250_LectureWithFilter+0x1f0>
		for(int j=0; j<11; j++){
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e62:	e024      	b.n	8001eae <MPU9250_LectureWithFilter+0x1de>
			MPU9250Filtered[i] = MPU9250Filtered[i]+NewVar[i][j];
 8001e64:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <MPU9250_LectureWithFilter+0x2c8>)
 8001e66:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e76:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e96:	4a40      	ldr	r2, [pc, #256]	; (8001f98 <MPU9250_LectureWithFilter+0x2c8>)
 8001e98:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0; j<11; j++){
 8001ea4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001eae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001eb2:	2b0a      	cmp	r3, #10
 8001eb4:	ddd6      	ble.n	8001e64 <MPU9250_LectureWithFilter+0x194>
	for(int i=0; i<9; i++){
 8001eb6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ec0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	ddc9      	ble.n	8001e5c <MPU9250_LectureWithFilter+0x18c>
		}
	}
	for(int i=0; i<9; i++){
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ece:	e02e      	b.n	8001f2e <MPU9250_LectureWithFilter+0x25e>
		for(int j=9; j>0; j--){
 8001ed0:	2309      	movs	r3, #9
 8001ed2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001ed6:	e021      	b.n	8001f1c <MPU9250_LectureWithFilter+0x24c>
			MPU9250HistoryData[i][j+1] = MPU9250HistoryData[i][j];
 8001ed8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001edc:	1c58      	adds	r0, r3, #1
 8001ede:	492f      	ldr	r1, [pc, #188]	; (8001f9c <MPU9250_LectureWithFilter+0x2cc>)
 8001ee0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	6819      	ldr	r1, [r3, #0]
 8001efa:	4c28      	ldr	r4, [pc, #160]	; (8001f9c <MPU9250_LectureWithFilter+0x2cc>)
 8001efc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	4403      	add	r3, r0
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4423      	add	r3, r4
 8001f10:	6019      	str	r1, [r3, #0]
		for(int j=9; j>0; j--){
 8001f12:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001f1c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	dcd9      	bgt.n	8001ed8 <MPU9250_LectureWithFilter+0x208>
	for(int i=0; i<9; i++){
 8001f24:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f2e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	ddcc      	ble.n	8001ed0 <MPU9250_LectureWithFilter+0x200>
		}
	}
	MPU9250Filtered[5] += 9.806;
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <MPU9250_LectureWithFilter+0x2c8>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb0c 	bl	8000558 <__aeabi_f2d>
 8001f40:	a309      	add	r3, pc, #36	; (adr r3, 8001f68 <MPU9250_LectureWithFilter+0x298>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe f9a9 	bl	800029c <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fe51 	bl	8000bf8 <__aeabi_d2f>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <MPU9250_LectureWithFilter+0x2c8>)
 8001f5a:	6153      	str	r3, [r2, #20]
//	for(int i=0; i<9; i++){
//		MPU9250Filtered[i] = MPU9250Filtered[i]*sensitivy[i];
//	}
}
 8001f5c:	bf00      	nop
 8001f5e:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdb0      	pop	{r4, r5, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	083126e9 	.word	0x083126e9
 8001f6c:	40239cac 	.word	0x40239cac
 8001f70:	20002c60 	.word	0x20002c60
 8001f74:	20002e7c 	.word	0x20002e7c
 8001f78:	20002ed8 	.word	0x20002ed8
 8001f7c:	20002e90 	.word	0x20002e90
 8001f80:	20002e74 	.word	0x20002e74
 8001f84:	20002e9c 	.word	0x20002e9c
 8001f88:	20002e94 	.word	0x20002e94
 8001f8c:	20002e8c 	.word	0x20002e8c
 8001f90:	20002e78 	.word	0x20002e78
 8001f94:	0800f868 	.word	0x0800f868
 8001f98:	20002eac 	.word	0x20002eac
 8001f9c:	20002cd0 	.word	0x20002cd0
 8001fa0:	20000030 	.word	0x20000030
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <MPU9250_CalibracionAG>:

void MPU9250_CalibracionAG(void){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af04      	add	r7, sp, #16
	float Porcentaje;
	for(int i=0;i<50;i++){
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e0cc      	b.n	800214e <MPU9250_CalibracionAG+0x1a6>
		uint8_t Rec_Data[6];

		HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,ACCEL_XOUT_H_REG,1,Rec_Data,6,1000);
 8001fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	2306      	movs	r3, #6
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	223b      	movs	r2, #59	; 0x3b
 8001fc8:	21d0      	movs	r1, #208	; 0xd0
 8001fca:	486f      	ldr	r0, [pc, #444]	; (8002188 <MPU9250_CalibracionAG+0x1e0>)
 8001fcc:	f004 fefc 	bl	8006dc8 <HAL_I2C_Mem_Read>

		Accel_X_Raw = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]);
 8001fd0:	7b3b      	ldrb	r3, [r7, #12]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	7b7b      	ldrb	r3, [r7, #13]
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b6b      	ldr	r3, [pc, #428]	; (800218c <MPU9250_CalibracionAG+0x1e4>)
 8001fe0:	801a      	strh	r2, [r3, #0]
		Accel_Y_Raw = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]);
 8001fe2:	7bbb      	ldrb	r3, [r7, #14]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	4b67      	ldr	r3, [pc, #412]	; (8002190 <MPU9250_CalibracionAG+0x1e8>)
 8001ff2:	801a      	strh	r2, [r3, #0]
		Accel_Z_Raw = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]);
 8001ff4:	7c3b      	ldrb	r3, [r7, #16]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	b21a      	sxth	r2, r3
 8001ffa:	7c7b      	ldrb	r3, [r7, #17]
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b21a      	sxth	r2, r3
 8002002:	4b64      	ldr	r3, [pc, #400]	; (8002194 <MPU9250_CalibracionAG+0x1ec>)
 8002004:	801a      	strh	r2, [r3, #0]

		Ax = Accel_X_Raw/16384.0;
 8002006:	4b61      	ldr	r3, [pc, #388]	; (800218c <MPU9250_CalibracionAG+0x1e4>)
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fa91 	bl	8000534 <__aeabi_i2d>
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b60      	ldr	r3, [pc, #384]	; (8002198 <MPU9250_CalibracionAG+0x1f0>)
 8002018:	f7fe fc20 	bl	800085c <__aeabi_ddiv>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	f7fe fde8 	bl	8000bf8 <__aeabi_d2f>
 8002028:	4603      	mov	r3, r0
 800202a:	4a5c      	ldr	r2, [pc, #368]	; (800219c <MPU9250_CalibracionAG+0x1f4>)
 800202c:	6013      	str	r3, [r2, #0]
		Ay = Accel_Y_Raw/16384.0;
 800202e:	4b58      	ldr	r3, [pc, #352]	; (8002190 <MPU9250_CalibracionAG+0x1e8>)
 8002030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa7d 	bl	8000534 <__aeabi_i2d>
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b56      	ldr	r3, [pc, #344]	; (8002198 <MPU9250_CalibracionAG+0x1f0>)
 8002040:	f7fe fc0c 	bl	800085c <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fdd4 	bl	8000bf8 <__aeabi_d2f>
 8002050:	4603      	mov	r3, r0
 8002052:	4a53      	ldr	r2, [pc, #332]	; (80021a0 <MPU9250_CalibracionAG+0x1f8>)
 8002054:	6013      	str	r3, [r2, #0]
		Az = Accel_Z_Raw/16384.0;
 8002056:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <MPU9250_CalibracionAG+0x1ec>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa69 	bl	8000534 <__aeabi_i2d>
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <MPU9250_CalibracionAG+0x1f0>)
 8002068:	f7fe fbf8 	bl	800085c <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f7fe fdc0 	bl	8000bf8 <__aeabi_d2f>
 8002078:	4603      	mov	r3, r0
 800207a:	4a4a      	ldr	r2, [pc, #296]	; (80021a4 <MPU9250_CalibracionAG+0x1fc>)
 800207c:	6013      	str	r3, [r2, #0]

		HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,GYRO_XOUT_H_REG,1,Rec_Data,6,1000);
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	2306      	movs	r3, #6
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	2243      	movs	r2, #67	; 0x43
 8002092:	21d0      	movs	r1, #208	; 0xd0
 8002094:	483c      	ldr	r0, [pc, #240]	; (8002188 <MPU9250_CalibracionAG+0x1e0>)
 8002096:	f004 fe97 	bl	8006dc8 <HAL_I2C_Mem_Read>

		Gyro_X_Raw = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]);
 800209a:	7b3b      	ldrb	r3, [r7, #12]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21a      	sxth	r2, r3
 80020a0:	7b7b      	ldrb	r3, [r7, #13]
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <MPU9250_CalibracionAG+0x200>)
 80020aa:	801a      	strh	r2, [r3, #0]
		Gyro_Y_Raw = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]);
 80020ac:	7bbb      	ldrb	r3, [r7, #14]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	b21a      	sxth	r2, r3
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <MPU9250_CalibracionAG+0x204>)
 80020bc:	801a      	strh	r2, [r3, #0]
		Gyro_Z_Raw = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]);
 80020be:	7c3b      	ldrb	r3, [r7, #16]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	7c7b      	ldrb	r3, [r7, #17]
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	4313      	orrs	r3, r2
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <MPU9250_CalibracionAG+0x208>)
 80020ce:	801a      	strh	r2, [r3, #0]

		Gx = (Gyro_X_Raw/131.0);
 80020d0:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <MPU9250_CalibracionAG+0x200>)
 80020d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa2c 	bl	8000534 <__aeabi_i2d>
 80020dc:	a328      	add	r3, pc, #160	; (adr r3, 8002180 <MPU9250_CalibracionAG+0x1d8>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe fbbb 	bl	800085c <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f7fe fd83 	bl	8000bf8 <__aeabi_d2f>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <MPU9250_CalibracionAG+0x20c>)
 80020f6:	6013      	str	r3, [r2, #0]
		Gy = (Gyro_Y_Raw/131.0);
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <MPU9250_CalibracionAG+0x204>)
 80020fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fa18 	bl	8000534 <__aeabi_i2d>
 8002104:	a31e      	add	r3, pc, #120	; (adr r3, 8002180 <MPU9250_CalibracionAG+0x1d8>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe fba7 	bl	800085c <__aeabi_ddiv>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f7fe fd6f 	bl	8000bf8 <__aeabi_d2f>
 800211a:	4603      	mov	r3, r0
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <MPU9250_CalibracionAG+0x210>)
 800211e:	6013      	str	r3, [r2, #0]
		Gz = (Gyro_Z_Raw/131.0);
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <MPU9250_CalibracionAG+0x208>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fa04 	bl	8000534 <__aeabi_i2d>
 800212c:	a314      	add	r3, pc, #80	; (adr r3, 8002180 <MPU9250_CalibracionAG+0x1d8>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe fb93 	bl	800085c <__aeabi_ddiv>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fd5b 	bl	8000bf8 <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <MPU9250_CalibracionAG+0x214>)
 8002146:	6013      	str	r3, [r2, #0]
	for(int i=0;i<50;i++){
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	2b31      	cmp	r3, #49	; 0x31
 8002152:	f77f af2f 	ble.w	8001fb4 <MPU9250_CalibracionAG+0xc>
	}
	sprintf(Display_Buff,"Toma de datos");
 8002156:	491a      	ldr	r1, [pc, #104]	; (80021c0 <MPU9250_CalibracionAG+0x218>)
 8002158:	481a      	ldr	r0, [pc, #104]	; (80021c4 <MPU9250_CalibracionAG+0x21c>)
 800215a:	f009 fd9f 	bl	800bc9c <siprintf>
	ST7735_WriteString(20,30,Display_Buff, Font_7x10, WHITE,BLACK);
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <MPU9250_CalibracionAG+0x220>)
 8002160:	2200      	movs	r2, #0
 8002162:	9202      	str	r2, [sp, #8]
 8002164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002168:	9201      	str	r2, [sp, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	9200      	str	r2, [sp, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <MPU9250_CalibracionAG+0x21c>)
 8002172:	211e      	movs	r1, #30
 8002174:	2014      	movs	r0, #20
 8002176:	f000 fed1 	bl	8002f1c <ST7735_WriteString>
	for(int i=0;i<200;i++){
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	e1db      	b.n	8002538 <MPU9250_CalibracionAG+0x590>
 8002180:	00000000 	.word	0x00000000
 8002184:	40606000 	.word	0x40606000
 8002188:	20002f4c 	.word	0x20002f4c
 800218c:	20002ed0 	.word	0x20002ed0
 8002190:	20002e60 	.word	0x20002e60
 8002194:	20002ee4 	.word	0x20002ee4
 8002198:	40d00000 	.word	0x40d00000
 800219c:	20002e90 	.word	0x20002e90
 80021a0:	20002e74 	.word	0x20002e74
 80021a4:	20002e9c 	.word	0x20002e9c
 80021a8:	20002e98 	.word	0x20002e98
 80021ac:	20002ed2 	.word	0x20002ed2
 80021b0:	20002e88 	.word	0x20002e88
 80021b4:	20002c60 	.word	0x20002c60
 80021b8:	20002e7c 	.word	0x20002e7c
 80021bc:	20002ed8 	.word	0x20002ed8
 80021c0:	0800f88c 	.word	0x0800f88c
 80021c4:	20002c24 	.word	0x20002c24
 80021c8:	200029d0 	.word	0x200029d0
		uint8_t Rec_Data[6];

		HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,ACCEL_XOUT_H_REG,1,Rec_Data,6,1000);
 80021cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d0:	9302      	str	r3, [sp, #8]
 80021d2:	2306      	movs	r3, #6
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2301      	movs	r3, #1
 80021dc:	223b      	movs	r2, #59	; 0x3b
 80021de:	21d0      	movs	r1, #208	; 0xd0
 80021e0:	48af      	ldr	r0, [pc, #700]	; (80024a0 <MPU9250_CalibracionAG+0x4f8>)
 80021e2:	f004 fdf1 	bl	8006dc8 <HAL_I2C_Mem_Read>

		Accel_X_Raw = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]);
 80021e6:	793b      	ldrb	r3, [r7, #4]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	797b      	ldrb	r3, [r7, #5]
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	4bab      	ldr	r3, [pc, #684]	; (80024a4 <MPU9250_CalibracionAG+0x4fc>)
 80021f6:	801a      	strh	r2, [r3, #0]
		Accel_Y_Raw = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]);
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21a      	sxth	r2, r3
 8002206:	4ba8      	ldr	r3, [pc, #672]	; (80024a8 <MPU9250_CalibracionAG+0x500>)
 8002208:	801a      	strh	r2, [r3, #0]
		Accel_Z_Raw = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]);
 800220a:	7a3b      	ldrb	r3, [r7, #8]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b21a      	sxth	r2, r3
 8002210:	7a7b      	ldrb	r3, [r7, #9]
 8002212:	b21b      	sxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b21a      	sxth	r2, r3
 8002218:	4ba4      	ldr	r3, [pc, #656]	; (80024ac <MPU9250_CalibracionAG+0x504>)
 800221a:	801a      	strh	r2, [r3, #0]

		Ax = Accel_X_Raw;
 800221c:	4ba1      	ldr	r3, [pc, #644]	; (80024a4 <MPU9250_CalibracionAG+0x4fc>)
 800221e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222a:	4ba1      	ldr	r3, [pc, #644]	; (80024b0 <MPU9250_CalibracionAG+0x508>)
 800222c:	edc3 7a00 	vstr	s15, [r3]
		Ay = Accel_Y_Raw;
 8002230:	4b9d      	ldr	r3, [pc, #628]	; (80024a8 <MPU9250_CalibracionAG+0x500>)
 8002232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223e:	4b9d      	ldr	r3, [pc, #628]	; (80024b4 <MPU9250_CalibracionAG+0x50c>)
 8002240:	edc3 7a00 	vstr	s15, [r3]
		Az = Accel_Z_Raw;
 8002244:	4b99      	ldr	r3, [pc, #612]	; (80024ac <MPU9250_CalibracionAG+0x504>)
 8002246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002252:	4b99      	ldr	r3, [pc, #612]	; (80024b8 <MPU9250_CalibracionAG+0x510>)
 8002254:	edc3 7a00 	vstr	s15, [r3]

		HAL_I2C_Mem_Read(&hi2c1,MPU9250_ADDR,GYRO_XOUT_H_REG,1,Rec_Data,6,1000);
 8002258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	2306      	movs	r3, #6
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2301      	movs	r3, #1
 8002268:	2243      	movs	r2, #67	; 0x43
 800226a:	21d0      	movs	r1, #208	; 0xd0
 800226c:	488c      	ldr	r0, [pc, #560]	; (80024a0 <MPU9250_CalibracionAG+0x4f8>)
 800226e:	f004 fdab 	bl	8006dc8 <HAL_I2C_Mem_Read>

		Gyro_X_Raw = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]);
 8002272:	793b      	ldrb	r3, [r7, #4]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	b21a      	sxth	r2, r3
 8002278:	797b      	ldrb	r3, [r7, #5]
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21a      	sxth	r2, r3
 8002280:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <MPU9250_CalibracionAG+0x514>)
 8002282:	801a      	strh	r2, [r3, #0]
		Gyro_Y_Raw = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]);
 8002284:	79bb      	ldrb	r3, [r7, #6]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	b21a      	sxth	r2, r3
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	b21b      	sxth	r3, r3
 800228e:	4313      	orrs	r3, r2
 8002290:	b21a      	sxth	r2, r3
 8002292:	4b8b      	ldr	r3, [pc, #556]	; (80024c0 <MPU9250_CalibracionAG+0x518>)
 8002294:	801a      	strh	r2, [r3, #0]
		Gyro_Z_Raw = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]);
 8002296:	7a3b      	ldrb	r3, [r7, #8]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	b21a      	sxth	r2, r3
 800229c:	7a7b      	ldrb	r3, [r7, #9]
 800229e:	b21b      	sxth	r3, r3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	4b87      	ldr	r3, [pc, #540]	; (80024c4 <MPU9250_CalibracionAG+0x51c>)
 80022a6:	801a      	strh	r2, [r3, #0]

		Gx = (Gyro_X_Raw);
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <MPU9250_CalibracionAG+0x514>)
 80022aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b6:	4b84      	ldr	r3, [pc, #528]	; (80024c8 <MPU9250_CalibracionAG+0x520>)
 80022b8:	edc3 7a00 	vstr	s15, [r3]
		Gy = (Gyro_Y_Raw);
 80022bc:	4b80      	ldr	r3, [pc, #512]	; (80024c0 <MPU9250_CalibracionAG+0x518>)
 80022be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ca:	4b80      	ldr	r3, [pc, #512]	; (80024cc <MPU9250_CalibracionAG+0x524>)
 80022cc:	edc3 7a00 	vstr	s15, [r3]
		Gz = (Gyro_Z_Raw);
 80022d0:	4b7c      	ldr	r3, [pc, #496]	; (80024c4 <MPU9250_CalibracionAG+0x51c>)
 80022d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022de:	4b7c      	ldr	r3, [pc, #496]	; (80024d0 <MPU9250_CalibracionAG+0x528>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]

		if(Ax < Ax_min){
 80022e4:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <MPU9250_CalibracionAG+0x508>)
 80022e6:	ed93 7a00 	vldr	s14, [r3]
 80022ea:	4b7a      	ldr	r3, [pc, #488]	; (80024d4 <MPU9250_CalibracionAG+0x52c>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f8:	d503      	bpl.n	8002302 <MPU9250_CalibracionAG+0x35a>
			Ax_min = Ax;
 80022fa:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <MPU9250_CalibracionAG+0x508>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a75      	ldr	r2, [pc, #468]	; (80024d4 <MPU9250_CalibracionAG+0x52c>)
 8002300:	6013      	str	r3, [r2, #0]
		}
		if(Ay < Ay_min){
 8002302:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <MPU9250_CalibracionAG+0x50c>)
 8002304:	ed93 7a00 	vldr	s14, [r3]
 8002308:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <MPU9250_CalibracionAG+0x530>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	d503      	bpl.n	8002320 <MPU9250_CalibracionAG+0x378>
			Ay_min = Ay;
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <MPU9250_CalibracionAG+0x50c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <MPU9250_CalibracionAG+0x530>)
 800231e:	6013      	str	r3, [r2, #0]
		}
		if(Az < Az_min){
 8002320:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <MPU9250_CalibracionAG+0x510>)
 8002322:	ed93 7a00 	vldr	s14, [r3]
 8002326:	4b6d      	ldr	r3, [pc, #436]	; (80024dc <MPU9250_CalibracionAG+0x534>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	d503      	bpl.n	800233e <MPU9250_CalibracionAG+0x396>
			Az_min = Az;
 8002336:	4b60      	ldr	r3, [pc, #384]	; (80024b8 <MPU9250_CalibracionAG+0x510>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a68      	ldr	r2, [pc, #416]	; (80024dc <MPU9250_CalibracionAG+0x534>)
 800233c:	6013      	str	r3, [r2, #0]
		}
		if(Gx < Gx_min){
 800233e:	4b62      	ldr	r3, [pc, #392]	; (80024c8 <MPU9250_CalibracionAG+0x520>)
 8002340:	ed93 7a00 	vldr	s14, [r3]
 8002344:	4b66      	ldr	r3, [pc, #408]	; (80024e0 <MPU9250_CalibracionAG+0x538>)
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002352:	d503      	bpl.n	800235c <MPU9250_CalibracionAG+0x3b4>
			Gx_min = Gx;
 8002354:	4b5c      	ldr	r3, [pc, #368]	; (80024c8 <MPU9250_CalibracionAG+0x520>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a61      	ldr	r2, [pc, #388]	; (80024e0 <MPU9250_CalibracionAG+0x538>)
 800235a:	6013      	str	r3, [r2, #0]
		}
		if(Gy < Gy_min){
 800235c:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <MPU9250_CalibracionAG+0x524>)
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	4b60      	ldr	r3, [pc, #384]	; (80024e4 <MPU9250_CalibracionAG+0x53c>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d503      	bpl.n	800237a <MPU9250_CalibracionAG+0x3d2>
			Gy_min = Gy;
 8002372:	4b56      	ldr	r3, [pc, #344]	; (80024cc <MPU9250_CalibracionAG+0x524>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a5b      	ldr	r2, [pc, #364]	; (80024e4 <MPU9250_CalibracionAG+0x53c>)
 8002378:	6013      	str	r3, [r2, #0]
		}
		if(Gz < Gz_min){
 800237a:	4b55      	ldr	r3, [pc, #340]	; (80024d0 <MPU9250_CalibracionAG+0x528>)
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <MPU9250_CalibracionAG+0x540>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	d503      	bpl.n	8002398 <MPU9250_CalibracionAG+0x3f0>
			Gz_min = Gz;
 8002390:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <MPU9250_CalibracionAG+0x528>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a54      	ldr	r2, [pc, #336]	; (80024e8 <MPU9250_CalibracionAG+0x540>)
 8002396:	6013      	str	r3, [r2, #0]
		}
		if(Ax > Ax_max){
 8002398:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <MPU9250_CalibracionAG+0x508>)
 800239a:	ed93 7a00 	vldr	s14, [r3]
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <MPU9250_CalibracionAG+0x544>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	dd03      	ble.n	80023b6 <MPU9250_CalibracionAG+0x40e>
			Ax_max = Ax;
 80023ae:	4b40      	ldr	r3, [pc, #256]	; (80024b0 <MPU9250_CalibracionAG+0x508>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a4e      	ldr	r2, [pc, #312]	; (80024ec <MPU9250_CalibracionAG+0x544>)
 80023b4:	6013      	str	r3, [r2, #0]
		}
		if(Ay > Ay_max){
 80023b6:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <MPU9250_CalibracionAG+0x50c>)
 80023b8:	ed93 7a00 	vldr	s14, [r3]
 80023bc:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <MPU9250_CalibracionAG+0x548>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	dd03      	ble.n	80023d4 <MPU9250_CalibracionAG+0x42c>
			Ay_max = Ay;
 80023cc:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <MPU9250_CalibracionAG+0x50c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a47      	ldr	r2, [pc, #284]	; (80024f0 <MPU9250_CalibracionAG+0x548>)
 80023d2:	6013      	str	r3, [r2, #0]
		}
		if(Az > Az_max){
 80023d4:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <MPU9250_CalibracionAG+0x510>)
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <MPU9250_CalibracionAG+0x54c>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	dd03      	ble.n	80023f2 <MPU9250_CalibracionAG+0x44a>
			Az_max = Az;
 80023ea:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <MPU9250_CalibracionAG+0x510>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a41      	ldr	r2, [pc, #260]	; (80024f4 <MPU9250_CalibracionAG+0x54c>)
 80023f0:	6013      	str	r3, [r2, #0]
		}
		if(Gx > Gx_max){
 80023f2:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <MPU9250_CalibracionAG+0x520>)
 80023f4:	ed93 7a00 	vldr	s14, [r3]
 80023f8:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <MPU9250_CalibracionAG+0x550>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	dd03      	ble.n	8002410 <MPU9250_CalibracionAG+0x468>
			Gx_max = Gx;
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <MPU9250_CalibracionAG+0x520>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3a      	ldr	r2, [pc, #232]	; (80024f8 <MPU9250_CalibracionAG+0x550>)
 800240e:	6013      	str	r3, [r2, #0]
		}
		if(Gy > Gy_max){
 8002410:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <MPU9250_CalibracionAG+0x524>)
 8002412:	ed93 7a00 	vldr	s14, [r3]
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <MPU9250_CalibracionAG+0x554>)
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	dd03      	ble.n	800242e <MPU9250_CalibracionAG+0x486>
			Gy_max = Gy;
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <MPU9250_CalibracionAG+0x524>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a34      	ldr	r2, [pc, #208]	; (80024fc <MPU9250_CalibracionAG+0x554>)
 800242c:	6013      	str	r3, [r2, #0]
		}
		if(Gz > Gz_max){
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <MPU9250_CalibracionAG+0x528>)
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <MPU9250_CalibracionAG+0x558>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002442:	dd03      	ble.n	800244c <MPU9250_CalibracionAG+0x4a4>
			Gz_max = Gz;
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <MPU9250_CalibracionAG+0x528>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2d      	ldr	r2, [pc, #180]	; (8002500 <MPU9250_CalibracionAG+0x558>)
 800244a:	6013      	str	r3, [r2, #0]
		}
		Porcentaje = i*100/200;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	0fda      	lsrs	r2, r3, #31
 8002450:	4413      	add	r3, r2
 8002452:	105b      	asrs	r3, r3, #1
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245c:	edc7 7a05 	vstr	s15, [r7, #20]
		sprintf(Display_Buff,"%.0f",Porcentaje);
 8002460:	6978      	ldr	r0, [r7, #20]
 8002462:	f7fe f879 	bl	8000558 <__aeabi_f2d>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4926      	ldr	r1, [pc, #152]	; (8002504 <MPU9250_CalibracionAG+0x55c>)
 800246c:	4826      	ldr	r0, [pc, #152]	; (8002508 <MPU9250_CalibracionAG+0x560>)
 800246e:	f009 fc15 	bl	800bc9c <siprintf>
		ST7735_WriteString(55,50,Display_Buff, Font_11x18, WHITE,BLACK);
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <MPU9250_CalibracionAG+0x564>)
 8002474:	2200      	movs	r2, #0
 8002476:	9202      	str	r2, [sp, #8]
 8002478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800247c:	9201      	str	r2, [sp, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	9200      	str	r2, [sp, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <MPU9250_CalibracionAG+0x560>)
 8002486:	2132      	movs	r1, #50	; 0x32
 8002488:	2037      	movs	r0, #55	; 0x37
 800248a:	f000 fd47 	bl	8002f1c <ST7735_WriteString>
		drawRect(14,78,100,20,WHITE);
 800248e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2314      	movs	r3, #20
 8002496:	2264      	movs	r2, #100	; 0x64
 8002498:	214e      	movs	r1, #78	; 0x4e
 800249a:	200e      	movs	r0, #14
 800249c:	e038      	b.n	8002510 <MPU9250_CalibracionAG+0x568>
 800249e:	bf00      	nop
 80024a0:	20002f4c 	.word	0x20002f4c
 80024a4:	20002ed0 	.word	0x20002ed0
 80024a8:	20002e60 	.word	0x20002e60
 80024ac:	20002ee4 	.word	0x20002ee4
 80024b0:	20002e90 	.word	0x20002e90
 80024b4:	20002e74 	.word	0x20002e74
 80024b8:	20002e9c 	.word	0x20002e9c
 80024bc:	20002e98 	.word	0x20002e98
 80024c0:	20002ed2 	.word	0x20002ed2
 80024c4:	20002e88 	.word	0x20002e88
 80024c8:	20002c60 	.word	0x20002c60
 80024cc:	20002e7c 	.word	0x20002e7c
 80024d0:	20002ed8 	.word	0x20002ed8
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20000004 	.word	0x20000004
 80024dc:	20000008 	.word	0x20000008
 80024e0:	2000000c 	.word	0x2000000c
 80024e4:	20000010 	.word	0x20000010
 80024e8:	20000014 	.word	0x20000014
 80024ec:	20000018 	.word	0x20000018
 80024f0:	2000001c 	.word	0x2000001c
 80024f4:	20000020 	.word	0x20000020
 80024f8:	20000024 	.word	0x20000024
 80024fc:	20000028 	.word	0x20000028
 8002500:	2000002c 	.word	0x2000002c
 8002504:	0800f89c 	.word	0x0800f89c
 8002508:	20002c24 	.word	0x20002c24
 800250c:	200029d8 	.word	0x200029d8
 8002510:	f7fe ffda 	bl	80014c8 <drawRect>
		fillRect(14,78,(int)Porcentaje,20,WHITE);
 8002514:	edd7 7a05 	vldr	s15, [r7, #20]
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 3a90 	vmov	r3, s15
 8002520:	b21a      	sxth	r2, r3
 8002522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2314      	movs	r3, #20
 800252a:	214e      	movs	r1, #78	; 0x4e
 800252c:	200e      	movs	r0, #14
 800252e:	f7fe fd78 	bl	8001022 <fillRect>
	for(int i=0;i<200;i++){
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	3301      	adds	r3, #1
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2bc7      	cmp	r3, #199	; 0xc7
 800253c:	f77f ae46 	ble.w	80021cc <MPU9250_CalibracionAG+0x224>
	}
	Ax_offset = (Ax_min+Ax_max)/2;
 8002540:	4b30      	ldr	r3, [pc, #192]	; (8002604 <MPU9250_CalibracionAG+0x65c>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <MPU9250_CalibracionAG+0x660>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002550:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <MPU9250_CalibracionAG+0x664>)
 800255a:	edc3 7a00 	vstr	s15, [r3]
	Ay_offset = (Ay_min+Ay_max)/2;
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <MPU9250_CalibracionAG+0x668>)
 8002560:	ed93 7a00 	vldr	s14, [r3]
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <MPU9250_CalibracionAG+0x66c>)
 8002566:	edd3 7a00 	vldr	s15, [r3]
 800256a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800256e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <MPU9250_CalibracionAG+0x670>)
 8002578:	edc3 7a00 	vstr	s15, [r3]
	Az_offset = (Az_min+Az_max)/2-32768/2;
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <MPU9250_CalibracionAG+0x674>)
 800257e:	ed93 7a00 	vldr	s14, [r3]
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <MPU9250_CalibracionAG+0x678>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002594:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002624 <MPU9250_CalibracionAG+0x67c>
 8002598:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800259c:	4b22      	ldr	r3, [pc, #136]	; (8002628 <MPU9250_CalibracionAG+0x680>)
 800259e:	edc3 7a00 	vstr	s15, [r3]
	Gx_offset = (Gx_min+Gx_max)/2;
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <MPU9250_CalibracionAG+0x684>)
 80025a4:	ed93 7a00 	vldr	s14, [r3]
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <MPU9250_CalibracionAG+0x688>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ba:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <MPU9250_CalibracionAG+0x68c>)
 80025bc:	edc3 7a00 	vstr	s15, [r3]
	Gy_offset = (Gy_min+Gy_max)/2;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <MPU9250_CalibracionAG+0x690>)
 80025c2:	ed93 7a00 	vldr	s14, [r3]
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <MPU9250_CalibracionAG+0x694>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <MPU9250_CalibracionAG+0x698>)
 80025da:	edc3 7a00 	vstr	s15, [r3]
	Gz_offset = (Gz_min+Gz_max)/2;
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <MPU9250_CalibracionAG+0x69c>)
 80025e0:	ed93 7a00 	vldr	s14, [r3]
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <MPU9250_CalibracionAG+0x6a0>)
 80025e6:	edd3 7a00 	vldr	s15, [r3]
 80025ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <MPU9250_CalibracionAG+0x6a4>)
 80025f8:	edc3 7a00 	vstr	s15, [r3]
}
 80025fc:	bf00      	nop
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000000 	.word	0x20000000
 8002608:	20000018 	.word	0x20000018
 800260c:	20002be8 	.word	0x20002be8
 8002610:	20000004 	.word	0x20000004
 8002614:	2000001c 	.word	0x2000001c
 8002618:	20002bec 	.word	0x20002bec
 800261c:	20000008 	.word	0x20000008
 8002620:	20000020 	.word	0x20000020
 8002624:	46800000 	.word	0x46800000
 8002628:	20002bf0 	.word	0x20002bf0
 800262c:	2000000c 	.word	0x2000000c
 8002630:	20000024 	.word	0x20000024
 8002634:	20002bf4 	.word	0x20002bf4
 8002638:	20000010 	.word	0x20000010
 800263c:	20000028 	.word	0x20000028
 8002640:	20002bf8 	.word	0x20002bf8
 8002644:	20000014 	.word	0x20000014
 8002648:	2000002c 	.word	0x2000002c
 800264c:	20002bfc 	.word	0x20002bfc

08002650 <MPU9250_CalibracionMag>:

void MPU9250_CalibracionMag(void){
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af04      	add	r7, sp, #16
	int Max = 0, Min = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
	if (VarMag == 0){
 800265e:	4b99      	ldr	r3, [pc, #612]	; (80028c4 <MPU9250_CalibracionMag+0x274>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 8087 	bne.w	8002776 <MPU9250_CalibracionMag+0x126>
		sprintf(Display_Buff," Calibracion en");
 8002668:	4997      	ldr	r1, [pc, #604]	; (80028c8 <MPU9250_CalibracionMag+0x278>)
 800266a:	4898      	ldr	r0, [pc, #608]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 800266c:	f009 fb16 	bl	800bc9c <siprintf>
		ST7735_WriteString(15 ,0 ,Display_Buff, Font_7x10, WHITE,BLACK);
 8002670:	4b97      	ldr	r3, [pc, #604]	; (80028d0 <MPU9250_CalibracionMag+0x280>)
 8002672:	2200      	movs	r2, #0
 8002674:	9202      	str	r2, [sp, #8]
 8002676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800267a:	9201      	str	r2, [sp, #4]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	9200      	str	r2, [sp, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a92      	ldr	r2, [pc, #584]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 8002684:	2100      	movs	r1, #0
 8002686:	200f      	movs	r0, #15
 8002688:	f000 fc48 	bl	8002f1c <ST7735_WriteString>
		for (float i = 0; i<200; i++){
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	e066      	b.n	8002762 <MPU9250_CalibracionMag+0x112>
			sprintf(Display_Buff," X = %.0f",i);
 8002694:	6938      	ldr	r0, [r7, #16]
 8002696:	f7fd ff5f 	bl	8000558 <__aeabi_f2d>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	498d      	ldr	r1, [pc, #564]	; (80028d4 <MPU9250_CalibracionMag+0x284>)
 80026a0:	488a      	ldr	r0, [pc, #552]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 80026a2:	f009 fafb 	bl	800bc9c <siprintf>
			ST7735_WriteString(15 ,12 ,Display_Buff, Font_11x18, WHITE,BLACK);
 80026a6:	4b8c      	ldr	r3, [pc, #560]	; (80028d8 <MPU9250_CalibracionMag+0x288>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	9202      	str	r2, [sp, #8]
 80026ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b0:	9201      	str	r2, [sp, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	9200      	str	r2, [sp, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a84      	ldr	r2, [pc, #528]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 80026ba:	210c      	movs	r1, #12
 80026bc:	200f      	movs	r0, #15
 80026be:	f000 fc2d 	bl	8002f1c <ST7735_WriteString>
			MPU9250_Read_Mag();
 80026c2:	f7ff fa59 	bl	8001b78 <MPU9250_Read_Mag>
			if (Mgz > Max){
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d0:	4b82      	ldr	r3, [pc, #520]	; (80028dc <MPU9250_CalibracionMag+0x28c>)
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	d507      	bpl.n	80026f0 <MPU9250_CalibracionMag+0xa0>
				Max = Mgz;
 80026e0:	4b7e      	ldr	r3, [pc, #504]	; (80028dc <MPU9250_CalibracionMag+0x28c>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ea:	ee17 3a90 	vmov	r3, s15
 80026ee:	617b      	str	r3, [r7, #20]
			}
			if (Mgy > Max){
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fa:	4b79      	ldr	r3, [pc, #484]	; (80028e0 <MPU9250_CalibracionMag+0x290>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002708:	d507      	bpl.n	800271a <MPU9250_CalibracionMag+0xca>
				Max = Mgy;
 800270a:	4b75      	ldr	r3, [pc, #468]	; (80028e0 <MPU9250_CalibracionMag+0x290>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002714:	ee17 3a90 	vmov	r3, s15
 8002718:	617b      	str	r3, [r7, #20]
			}
			ST7735_DrawPixel(Mgy+64, Mgz+78, RED);
 800271a:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <MPU9250_CalibracionMag+0x290>)
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80028e4 <MPU9250_CalibracionMag+0x294>
 8002724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800272c:	ee17 3a90 	vmov	r3, s15
 8002730:	b29b      	uxth	r3, r3
 8002732:	4a6a      	ldr	r2, [pc, #424]	; (80028dc <MPU9250_CalibracionMag+0x28c>)
 8002734:	edd2 7a00 	vldr	s15, [r2]
 8002738:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80028e8 <MPU9250_CalibracionMag+0x298>
 800273c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002744:	ee17 2a90 	vmov	r2, s15
 8002748:	b291      	uxth	r1, r2
 800274a:	22ff      	movs	r2, #255	; 0xff
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fb2f 	bl	8002db0 <ST7735_DrawPixel>
		for (float i = 0; i<200; i++){
 8002752:	edd7 7a04 	vldr	s15, [r7, #16]
 8002756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800275a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800275e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002762:	edd7 7a04 	vldr	s15, [r7, #16]
 8002766:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80028ec <MPU9250_CalibracionMag+0x29c>
 800276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	d48f      	bmi.n	8002694 <MPU9250_CalibracionMag+0x44>
				Max = Mgy;
			}
			ST7735_DrawPixel(Mgx+64, Mgy+78, RED);
		}
	}
}
 8002774:	e130      	b.n	80029d8 <MPU9250_CalibracionMag+0x388>
	else if (VarMag == 1){
 8002776:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <MPU9250_CalibracionMag+0x274>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	f040 8087 	bne.w	800288e <MPU9250_CalibracionMag+0x23e>
		sprintf(Display_Buff," Calibracion en");
 8002780:	4951      	ldr	r1, [pc, #324]	; (80028c8 <MPU9250_CalibracionMag+0x278>)
 8002782:	4852      	ldr	r0, [pc, #328]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 8002784:	f009 fa8a 	bl	800bc9c <siprintf>
		ST7735_WriteString(15 ,0 ,Display_Buff, Font_7x10, WHITE,BLACK);
 8002788:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <MPU9250_CalibracionMag+0x280>)
 800278a:	2200      	movs	r2, #0
 800278c:	9202      	str	r2, [sp, #8]
 800278e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002792:	9201      	str	r2, [sp, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	9200      	str	r2, [sp, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a4c      	ldr	r2, [pc, #304]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 800279c:	2100      	movs	r1, #0
 800279e:	200f      	movs	r0, #15
 80027a0:	f000 fbbc 	bl	8002f1c <ST7735_WriteString>
		for (float i = 0; i<200; i++){
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e066      	b.n	800287a <MPU9250_CalibracionMag+0x22a>
			sprintf(Display_Buff," Y = %.0f",i);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7fd fed3 	bl	8000558 <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	494e      	ldr	r1, [pc, #312]	; (80028f0 <MPU9250_CalibracionMag+0x2a0>)
 80027b8:	4844      	ldr	r0, [pc, #272]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 80027ba:	f009 fa6f 	bl	800bc9c <siprintf>
			ST7735_WriteString(15 ,12 ,Display_Buff, Font_11x18, WHITE,BLACK);
 80027be:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <MPU9250_CalibracionMag+0x288>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	9202      	str	r2, [sp, #8]
 80027c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c8:	9201      	str	r2, [sp, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	9200      	str	r2, [sp, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a3e      	ldr	r2, [pc, #248]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 80027d2:	210c      	movs	r1, #12
 80027d4:	200f      	movs	r0, #15
 80027d6:	f000 fba1 	bl	8002f1c <ST7735_WriteString>
			MPU9250_Read_Mag();
 80027da:	f7ff f9cd 	bl	8001b78 <MPU9250_Read_Mag>
			if (Mgz > Max){
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e8:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <MPU9250_CalibracionMag+0x28c>)
 80027ea:	edd3 7a00 	vldr	s15, [r3]
 80027ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f6:	d507      	bpl.n	8002808 <MPU9250_CalibracionMag+0x1b8>
				Max = Mgz;
 80027f8:	4b38      	ldr	r3, [pc, #224]	; (80028dc <MPU9250_CalibracionMag+0x28c>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002802:	ee17 3a90 	vmov	r3, s15
 8002806:	617b      	str	r3, [r7, #20]
			if (Mgx > Max){
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	ee07 3a90 	vmov	s15, r3
 800280e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <MPU9250_CalibracionMag+0x2a4>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800281c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002820:	d507      	bpl.n	8002832 <MPU9250_CalibracionMag+0x1e2>
				Max = Mgx;
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <MPU9250_CalibracionMag+0x2a4>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800282c:	ee17 3a90 	vmov	r3, s15
 8002830:	617b      	str	r3, [r7, #20]
			ST7735_DrawPixel(Mgx+64, Mgz+78, RED);
 8002832:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <MPU9250_CalibracionMag+0x2a4>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80028e4 <MPU9250_CalibracionMag+0x294>
 800283c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002844:	ee17 3a90 	vmov	r3, s15
 8002848:	b29b      	uxth	r3, r3
 800284a:	4a24      	ldr	r2, [pc, #144]	; (80028dc <MPU9250_CalibracionMag+0x28c>)
 800284c:	edd2 7a00 	vldr	s15, [r2]
 8002850:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80028e8 <MPU9250_CalibracionMag+0x298>
 8002854:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800285c:	ee17 2a90 	vmov	r2, s15
 8002860:	b291      	uxth	r1, r2
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	4618      	mov	r0, r3
 8002866:	f000 faa3 	bl	8002db0 <ST7735_DrawPixel>
		for (float i = 0; i<200; i++){
 800286a:	edd7 7a03 	vldr	s15, [r7, #12]
 800286e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002876:	edc7 7a03 	vstr	s15, [r7, #12]
 800287a:	edd7 7a03 	vldr	s15, [r7, #12]
 800287e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028ec <MPU9250_CalibracionMag+0x29c>
 8002882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	d48f      	bmi.n	80027ac <MPU9250_CalibracionMag+0x15c>
}
 800288c:	e0a4      	b.n	80029d8 <MPU9250_CalibracionMag+0x388>
	else if (VarMag == 2){
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <MPU9250_CalibracionMag+0x274>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b02      	cmp	r3, #2
 8002894:	f040 80a0 	bne.w	80029d8 <MPU9250_CalibracionMag+0x388>
		sprintf(Display_Buff," Calibracion en");
 8002898:	490b      	ldr	r1, [pc, #44]	; (80028c8 <MPU9250_CalibracionMag+0x278>)
 800289a:	480c      	ldr	r0, [pc, #48]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 800289c:	f009 f9fe 	bl	800bc9c <siprintf>
		ST7735_WriteString(15 ,0 ,Display_Buff, Font_7x10, WHITE,BLACK);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <MPU9250_CalibracionMag+0x280>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	9202      	str	r2, [sp, #8]
 80028a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028aa:	9201      	str	r2, [sp, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	9200      	str	r2, [sp, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a06      	ldr	r2, [pc, #24]	; (80028cc <MPU9250_CalibracionMag+0x27c>)
 80028b4:	2100      	movs	r1, #0
 80028b6:	200f      	movs	r0, #15
 80028b8:	f000 fb30 	bl	8002f1c <ST7735_WriteString>
		for (float i = 0; i<200; i++){
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	e080      	b.n	80029c6 <MPU9250_CalibracionMag+0x376>
 80028c4:	20002e84 	.word	0x20002e84
 80028c8:	0800f8a4 	.word	0x0800f8a4
 80028cc:	20002c24 	.word	0x20002c24
 80028d0:	200029d0 	.word	0x200029d0
 80028d4:	0800f8b4 	.word	0x0800f8b4
 80028d8:	200029d8 	.word	0x200029d8
 80028dc:	20002e78 	.word	0x20002e78
 80028e0:	20002e8c 	.word	0x20002e8c
 80028e4:	42800000 	.word	0x42800000
 80028e8:	429c0000 	.word	0x429c0000
 80028ec:	43480000 	.word	0x43480000
 80028f0:	0800f8c0 	.word	0x0800f8c0
 80028f4:	20002e94 	.word	0x20002e94
			sprintf(Display_Buff," Z = %.0f",i);
 80028f8:	68b8      	ldr	r0, [r7, #8]
 80028fa:	f7fd fe2d 	bl	8000558 <__aeabi_f2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4937      	ldr	r1, [pc, #220]	; (80029e0 <MPU9250_CalibracionMag+0x390>)
 8002904:	4837      	ldr	r0, [pc, #220]	; (80029e4 <MPU9250_CalibracionMag+0x394>)
 8002906:	f009 f9c9 	bl	800bc9c <siprintf>
			ST7735_WriteString(15 ,12 ,Display_Buff, Font_11x18, WHITE,BLACK);
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <MPU9250_CalibracionMag+0x398>)
 800290c:	2200      	movs	r2, #0
 800290e:	9202      	str	r2, [sp, #8]
 8002910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002914:	9201      	str	r2, [sp, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	9200      	str	r2, [sp, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a31      	ldr	r2, [pc, #196]	; (80029e4 <MPU9250_CalibracionMag+0x394>)
 800291e:	210c      	movs	r1, #12
 8002920:	200f      	movs	r0, #15
 8002922:	f000 fafb 	bl	8002f1c <ST7735_WriteString>
			MPU9250_Read_Mag();
 8002926:	f7ff f927 	bl	8001b78 <MPU9250_Read_Mag>
			if (Mgx > Max){
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002934:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <MPU9250_CalibracionMag+0x39c>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	d507      	bpl.n	8002954 <MPU9250_CalibracionMag+0x304>
				Max = Mgx;
 8002944:	4b29      	ldr	r3, [pc, #164]	; (80029ec <MPU9250_CalibracionMag+0x39c>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294e:	ee17 3a90 	vmov	r3, s15
 8002952:	617b      	str	r3, [r7, #20]
			if (Mgy > Max){
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <MPU9250_CalibracionMag+0x3a0>)
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	d507      	bpl.n	800297e <MPU9250_CalibracionMag+0x32e>
				Max = Mgy;
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <MPU9250_CalibracionMag+0x3a0>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002978:	ee17 3a90 	vmov	r3, s15
 800297c:	617b      	str	r3, [r7, #20]
			ST7735_DrawPixel(Mgx+64, Mgy+78, RED);
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <MPU9250_CalibracionMag+0x39c>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80029f4 <MPU9250_CalibracionMag+0x3a4>
 8002988:	ee77 7a87 	vadd.f32	s15, s15, s14
 800298c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002990:	ee17 3a90 	vmov	r3, s15
 8002994:	b29b      	uxth	r3, r3
 8002996:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <MPU9250_CalibracionMag+0x3a0>)
 8002998:	edd2 7a00 	vldr	s15, [r2]
 800299c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80029f8 <MPU9250_CalibracionMag+0x3a8>
 80029a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a8:	ee17 2a90 	vmov	r2, s15
 80029ac:	b291      	uxth	r1, r2
 80029ae:	22ff      	movs	r2, #255	; 0xff
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f9fd 	bl	8002db0 <ST7735_DrawPixel>
		for (float i = 0; i<200; i++){
 80029b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029c2:	edc7 7a02 	vstr	s15, [r7, #8]
 80029c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ca:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80029fc <MPU9250_CalibracionMag+0x3ac>
 80029ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d6:	d48f      	bmi.n	80028f8 <MPU9250_CalibracionMag+0x2a8>
}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	0800f8cc 	.word	0x0800f8cc
 80029e4:	20002c24 	.word	0x20002c24
 80029e8:	200029d8 	.word	0x200029d8
 80029ec:	20002e94 	.word	0x20002e94
 80029f0:	20002e8c 	.word	0x20002e8c
 80029f4:	42800000 	.word	0x42800000
 80029f8:	429c0000 	.word	0x429c0000
 80029fc:	43480000 	.word	0x43480000

08002a00 <zeros>:

void zeros (void){
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
	for (int i = 0; i<9; i++){
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	e020      	b.n	8002a4e <zeros+0x4e>
		for(int j = 0; j<11; j++){
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	e017      	b.n	8002a42 <zeros+0x42>
			 MPU9250Filtered[i] = 0;
 8002a12:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <zeros+0x64>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
			 MPU9250HistoryData[i][j] = 0;
 8002a20:	4911      	ldr	r1, [pc, #68]	; (8002a68 <zeros+0x68>)
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
		for(int j = 0; j<11; j++){
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b0a      	cmp	r3, #10
 8002a46:	dde4      	ble.n	8002a12 <zeros+0x12>
	for (int i = 0; i<9; i++){
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	dddb      	ble.n	8002a0c <zeros+0xc>
		}
	}
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20002eac 	.word	0x20002eac
 8002a68:	20002cd0 	.word	0x20002cd0

08002a6c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002a70:	2200      	movs	r2, #0
 8002a72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a76:	4802      	ldr	r0, [pc, #8]	; (8002a80 <ST7735_Select+0x14>)
 8002a78:	f003 ff10 	bl	800689c <HAL_GPIO_WritePin>
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40020400 	.word	0x40020400

08002a84 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a8e:	4802      	ldr	r0, [pc, #8]	; (8002a98 <ST7735_Unselect+0x14>)
 8002a90:	f003 ff04 	bl	800689c <HAL_GPIO_WritePin>
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40020400 	.word	0x40020400

08002a9c <ST7735_Reset>:

void ST7735_Reset()
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aa6:	4807      	ldr	r0, [pc, #28]	; (8002ac4 <ST7735_Reset+0x28>)
 8002aa8:	f003 fef8 	bl	800689c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002aac:	2005      	movs	r0, #5
 8002aae:	f002 fce3 	bl	8005478 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <ST7735_Reset+0x28>)
 8002aba:	f003 feef 	bl	800689c <HAL_GPIO_WritePin>
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40020400 	.word	0x40020400

08002ac8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ad8:	4806      	ldr	r0, [pc, #24]	; (8002af4 <ST7735_WriteCommand+0x2c>)
 8002ada:	f003 fedf 	bl	800689c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002ade:	1df9      	adds	r1, r7, #7
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4804      	ldr	r0, [pc, #16]	; (8002af8 <ST7735_WriteCommand+0x30>)
 8002ae8:	f006 f813 	bl	8008b12 <HAL_SPI_Transmit>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40020400 	.word	0x40020400
 8002af8:	2000319c 	.word	0x2000319c

08002afc <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002b06:	2201      	movs	r2, #1
 8002b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b0c:	4807      	ldr	r0, [pc, #28]	; (8002b2c <ST7735_WriteData+0x30>)
 8002b0e:	f003 fec5 	bl	800689c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4804      	ldr	r0, [pc, #16]	; (8002b30 <ST7735_WriteData+0x34>)
 8002b1e:	f005 fff8 	bl	8008b12 <HAL_SPI_Transmit>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	2000319c 	.word	0x2000319c

08002b34 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8002b46:	e034      	b.n	8002bb2 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8002b52:	7afb      	ldrb	r3, [r7, #11]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ffb7 	bl	8002ac8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002b64:	7abb      	ldrb	r3, [r7, #10]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002b6e:	7abb      	ldrb	r3, [r7, #10]
 8002b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b74:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002b76:	7abb      	ldrb	r3, [r7, #10]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002b7c:	7abb      	ldrb	r3, [r7, #10]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ffbb 	bl	8002afc <ST7735_WriteData>
            addr += numArgs;
 8002b86:	7abb      	ldrb	r3, [r7, #10]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002b8e:	89bb      	ldrh	r3, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00e      	beq.n	8002bb2 <DisplayInit+0x7e>
            ms = *addr++;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002b9e:	89bb      	ldrh	r3, [r7, #12]
 8002ba0:	2bff      	cmp	r3, #255	; 0xff
 8002ba2:	d102      	bne.n	8002baa <DisplayInit+0x76>
 8002ba4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ba8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002baa:	89bb      	ldrh	r3, [r7, #12]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f002 fc63 	bl	8005478 <HAL_Delay>
    while(numCommands--) {
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	1e5a      	subs	r2, r3, #1
 8002bb6:	73fa      	strb	r2, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1c5      	bne.n	8002b48 <DisplayInit+0x14>
        }
    }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4604      	mov	r4, r0
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	71fb      	strb	r3, [r7, #7]
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71bb      	strb	r3, [r7, #6]
 8002bde:	460b      	mov	r3, r1
 8002be0:	717b      	strb	r3, [r7, #5]
 8002be2:	4613      	mov	r3, r2
 8002be4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002be6:	202a      	movs	r0, #42	; 0x2a
 8002be8:	f7ff ff6e 	bl	8002ac8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8002bec:	2300      	movs	r3, #0
 8002bee:	733b      	strb	r3, [r7, #12]
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <ST7735_SetAddressWindow+0x88>)
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	737b      	strb	r3, [r7, #13]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73bb      	strb	r3, [r7, #14]
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <ST7735_SetAddressWindow+0x88>)
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	797b      	ldrb	r3, [r7, #5]
 8002c06:	4413      	add	r3, r2
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2104      	movs	r1, #4
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff72 	bl	8002afc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002c18:	202b      	movs	r0, #43	; 0x2b
 8002c1a:	f7ff ff55 	bl	8002ac8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <ST7735_SetAddressWindow+0x8c>)
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	79bb      	ldrb	r3, [r7, #6]
 8002c24:	4413      	add	r3, r2
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <ST7735_SetAddressWindow+0x8c>)
 8002c2c:	781a      	ldrb	r2, [r3, #0]
 8002c2e:	793b      	ldrb	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff5d 	bl	8002afc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002c42:	202c      	movs	r0, #44	; 0x2c
 8002c44:	f7ff ff40 	bl	8002ac8 <ST7735_WriteCommand>
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}
 8002c50:	20002ef0 	.word	0x20002ef0
 8002c54:	20002ef4 	.word	0x20002ef4

08002c58 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8002c62:	f7ff ff03 	bl	8002a6c <ST7735_Select>
    ST7735_Reset();
 8002c66:	f7ff ff19 	bl	8002a9c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8002c6a:	480c      	ldr	r0, [pc, #48]	; (8002c9c <ST7735_Init+0x44>)
 8002c6c:	f7ff ff62 	bl	8002b34 <DisplayInit>
    DisplayInit(init_cmds2);
 8002c70:	480b      	ldr	r0, [pc, #44]	; (8002ca0 <ST7735_Init+0x48>)
 8002c72:	f7ff ff5f 	bl	8002b34 <DisplayInit>
    DisplayInit(init_cmds3);
 8002c76:	480b      	ldr	r0, [pc, #44]	; (8002ca4 <ST7735_Init+0x4c>)
 8002c78:	f7ff ff5c 	bl	8002b34 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <ST7735_Init+0x50>)
 8002c7e:	2202      	movs	r2, #2
 8002c80:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <ST7735_Init+0x54>)
 8002c84:	2203      	movs	r2, #3
 8002c86:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f810 	bl	8002cb0 <ST7735_SetRotation>
    ST7735_Unselect();
 8002c90:	f7ff fef8 	bl	8002a84 <ST7735_Unselect>

}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	0800fb68 	.word	0x0800fb68
 8002ca0:	0800fba0 	.word	0x0800fba0
 8002ca4:	0800fbb0 	.word	0x0800fbb0
 8002ca8:	20002ef1 	.word	0x20002ef1
 8002cac:	20002ef5 	.word	0x20002ef5

08002cb0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <ST7735_SetRotation+0xe4>)
 8002cc8:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8002cca:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <ST7735_SetRotation+0xe4>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d84e      	bhi.n	8002d70 <ST7735_SetRotation+0xc0>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <ST7735_SetRotation+0x28>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002d0b 	.word	0x08002d0b
 8002ce0:	08002d2d 	.word	0x08002d2d
 8002ce4:	08002d4f 	.word	0x08002d4f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8002ce8:	23c0      	movs	r3, #192	; 0xc0
 8002cea:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8002cec:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <ST7735_SetRotation+0xe8>)
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <ST7735_SetRotation+0xec>)
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8002cf8:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <ST7735_SetRotation+0xf0>)
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <ST7735_SetRotation+0xf4>)
 8002cfe:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <ST7735_SetRotation+0xf8>)
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <ST7735_SetRotation+0xfc>)
 8002d06:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002d08:	e032      	b.n	8002d70 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8002d0a:	23a0      	movs	r3, #160	; 0xa0
 8002d0c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <ST7735_SetRotation+0xec>)
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002d14:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <ST7735_SetRotation+0xe8>)
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <ST7735_SetRotation+0xf0>)
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <ST7735_SetRotation+0xfc>)
 8002d20:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002d22:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <ST7735_SetRotation+0xf8>)
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <ST7735_SetRotation+0xf4>)
 8002d28:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002d2a:	e021      	b.n	8002d70 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <ST7735_SetRotation+0xe8>)
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <ST7735_SetRotation+0xec>)
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <ST7735_SetRotation+0xf0>)
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <ST7735_SetRotation+0xf4>)
 8002d42:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <ST7735_SetRotation+0xf8>)
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <ST7735_SetRotation+0xfc>)
 8002d4a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002d4c:	e010      	b.n	8002d70 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8002d4e:	2360      	movs	r3, #96	; 0x60
 8002d50:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <ST7735_SetRotation+0xec>)
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <ST7735_SetRotation+0xe8>)
 8002d5a:	2280      	movs	r2, #128	; 0x80
 8002d5c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <ST7735_SetRotation+0xf0>)
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <ST7735_SetRotation+0xfc>)
 8002d64:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <ST7735_SetRotation+0xf8>)
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <ST7735_SetRotation+0xf4>)
 8002d6c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002d6e:	bf00      	nop
  }
  ST7735_Select();
 8002d70:	f7ff fe7c 	bl	8002a6c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8002d74:	2036      	movs	r0, #54	; 0x36
 8002d76:	f7ff fea7 	bl	8002ac8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8002d7a:	f107 030f 	add.w	r3, r7, #15
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff febb 	bl	8002afc <ST7735_WriteData>
  ST7735_Unselect();
 8002d86:	f7ff fe7d 	bl	8002a84 <ST7735_Unselect>
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20002ef6 	.word	0x20002ef6
 8002d98:	20002efc 	.word	0x20002efc
 8002d9c:	20002ef8 	.word	0x20002ef8
 8002da0:	20002ef1 	.word	0x20002ef1
 8002da4:	20002ef0 	.word	0x20002ef0
 8002da8:	20002ef5 	.word	0x20002ef5
 8002dac:	20002ef4 	.word	0x20002ef4

08002db0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	80fb      	strh	r3, [r7, #6]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	80bb      	strh	r3, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <ST7735_DrawPixel+0x74>)
 8002dc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	da26      	bge.n	8002e1c <ST7735_DrawPixel+0x6c>
 8002dce:	88bb      	ldrh	r3, [r7, #4]
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <ST7735_DrawPixel+0x78>)
 8002dd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	da20      	bge.n	8002e1c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8002dda:	f7ff fe47 	bl	8002a6c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	b2d8      	uxtb	r0, r3
 8002de2:	88bb      	ldrh	r3, [r7, #4]
 8002de4:	b2d9      	uxtb	r1, r3
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	88bb      	ldrh	r3, [r7, #4]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f7ff fee7 	bl	8002bc8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	733b      	strb	r3, [r7, #12]
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	2102      	movs	r1, #2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fe73 	bl	8002afc <ST7735_WriteData>

    ST7735_Unselect();
 8002e16:	f7ff fe35 	bl	8002a84 <ST7735_Unselect>
 8002e1a:	e000      	b.n	8002e1e <ST7735_DrawPixel+0x6e>
        return;
 8002e1c:	bf00      	nop
}
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20002ef8 	.word	0x20002ef8
 8002e28:	20002efc 	.word	0x20002efc

08002e2c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	b590      	push	{r4, r7, lr}
 8002e30:	b089      	sub	sp, #36	; 0x24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	80bb      	strh	r3, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	b2d8      	uxtb	r0, r3
 8002e46:	88bb      	ldrh	r3, [r7, #4]
 8002e48:	b2d9      	uxtb	r1, r3
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e52:	4413      	add	r3, r2
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b2dc      	uxtb	r4, r3
 8002e5a:	88bb      	ldrh	r3, [r7, #4]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e62:	4413      	add	r3, r2
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	f7ff feac 	bl	8002bc8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e043      	b.n	8002efe <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	3b20      	subs	r3, #32
 8002e7c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	440b      	add	r3, r1
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e029      	b.n	8002eec <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002ea8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	743b      	strb	r3, [r7, #16]
 8002eb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fe1c 	bl	8002afc <ST7735_WriteData>
 8002ec4:	e00f      	b.n	8002ee6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002ec6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	733b      	strb	r3, [r7, #12]
 8002ed2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8002eda:	f107 030c 	add.w	r3, r7, #12
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fe0b 	bl	8002afc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d3cf      	bcc.n	8002e98 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f02:	461a      	mov	r2, r3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d3b5      	bcc.n	8002e76 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3724      	adds	r7, #36	; 0x24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002f16:	b002      	add	sp, #8
 8002f18:	4770      	bx	lr
	...

08002f1c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af04      	add	r7, sp, #16
 8002f24:	603a      	str	r2, [r7, #0]
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	4603      	mov	r3, r0
 8002f2a:	80fb      	strh	r3, [r7, #6]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002f30:	f7ff fd9c 	bl	8002a6c <ST7735_Select>

    while(*str) {
 8002f34:	e033      	b.n	8002f9e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	7d3a      	ldrb	r2, [r7, #20]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <ST7735_WriteString+0xa0>)
 8002f3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002f42:	4293      	cmp	r3, r2
 8002f44:	db16      	blt.n	8002f74 <ST7735_WriteString+0x58>
            x = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002f4a:	7d7b      	ldrb	r3, [r7, #21]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8002f54:	88bb      	ldrh	r3, [r7, #4]
 8002f56:	7d7a      	ldrb	r2, [r7, #21]
 8002f58:	4413      	add	r3, r2
 8002f5a:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <ST7735_WriteString+0xa4>)
 8002f5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002f60:	4293      	cmp	r3, r2
 8002f62:	da21      	bge.n	8002fa8 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d103      	bne.n	8002f74 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	603b      	str	r3, [r7, #0]
                continue;
 8002f72:	e014      	b.n	8002f9e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	88b9      	ldrh	r1, [r7, #4]
 8002f7a:	88f8      	ldrh	r0, [r7, #6]
 8002f7c:	8c3b      	ldrh	r3, [r7, #32]
 8002f7e:	9302      	str	r3, [sp, #8]
 8002f80:	8bbb      	ldrh	r3, [r7, #28]
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f7ff ff4f 	bl	8002e2c <ST7735_WriteChar>
        x += font.width;
 8002f8e:	7d3b      	ldrb	r3, [r7, #20]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	4413      	add	r3, r2
 8002f96:	80fb      	strh	r3, [r7, #6]
        str++;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1c7      	bne.n	8002f36 <ST7735_WriteString+0x1a>
 8002fa6:	e000      	b.n	8002faa <ST7735_WriteString+0x8e>
                break;
 8002fa8:	bf00      	nop
    }

    ST7735_Unselect();
 8002faa:	f7ff fd6b 	bl	8002a84 <ST7735_Unselect>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fb8:	b002      	add	sp, #8
 8002fba:	4770      	bx	lr
 8002fbc:	20002ef8 	.word	0x20002ef8
 8002fc0:	20002efc 	.word	0x20002efc

08002fc4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4604      	mov	r4, r0
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	80fb      	strh	r3, [r7, #6]
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	80bb      	strh	r3, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	807b      	strh	r3, [r7, #2]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	4a38      	ldr	r2, [pc, #224]	; (80030c8 <ST7735_FillRectangle+0x104>)
 8002fe6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	da67      	bge.n	80030be <ST7735_FillRectangle+0xfa>
 8002fee:	88bb      	ldrh	r3, [r7, #4]
 8002ff0:	4a36      	ldr	r2, [pc, #216]	; (80030cc <ST7735_FillRectangle+0x108>)
 8002ff2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	da61      	bge.n	80030be <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	4413      	add	r3, r2
 8003000:	4a31      	ldr	r2, [pc, #196]	; (80030c8 <ST7735_FillRectangle+0x104>)
 8003002:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003006:	4293      	cmp	r3, r2
 8003008:	dd06      	ble.n	8003018 <ST7735_FillRectangle+0x54>
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <ST7735_FillRectangle+0x104>)
 800300c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003010:	b29a      	uxth	r2, r3
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8003018:	88ba      	ldrh	r2, [r7, #4]
 800301a:	883b      	ldrh	r3, [r7, #0]
 800301c:	4413      	add	r3, r2
 800301e:	4a2b      	ldr	r2, [pc, #172]	; (80030cc <ST7735_FillRectangle+0x108>)
 8003020:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003024:	4293      	cmp	r3, r2
 8003026:	dd06      	ble.n	8003036 <ST7735_FillRectangle+0x72>
 8003028:	4b28      	ldr	r3, [pc, #160]	; (80030cc <ST7735_FillRectangle+0x108>)
 800302a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800302e:	b29a      	uxth	r2, r3
 8003030:	88bb      	ldrh	r3, [r7, #4]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8003036:	f7ff fd19 	bl	8002a6c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	b2d8      	uxtb	r0, r3
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	b2d9      	uxtb	r1, r3
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	4413      	add	r3, r2
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b2dc      	uxtb	r4, r3
 8003052:	88bb      	ldrh	r3, [r7, #4]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	883b      	ldrh	r3, [r7, #0]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	4413      	add	r3, r2
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	4622      	mov	r2, r4
 8003064:	f7ff fdb0 	bl	8002bc8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8003068:	8c3b      	ldrh	r3, [r7, #32]
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	b29b      	uxth	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	733b      	strb	r3, [r7, #12]
 8003072:	8c3b      	ldrh	r3, [r7, #32]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003078:	2201      	movs	r2, #1
 800307a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800307e:	4814      	ldr	r0, [pc, #80]	; (80030d0 <ST7735_FillRectangle+0x10c>)
 8003080:	f003 fc0c 	bl	800689c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8003084:	883b      	ldrh	r3, [r7, #0]
 8003086:	80bb      	strh	r3, [r7, #4]
 8003088:	e013      	b.n	80030b2 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	80fb      	strh	r3, [r7, #6]
 800308e:	e00a      	b.n	80030a6 <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003090:	f107 010c 	add.w	r1, r7, #12
 8003094:	f04f 33ff 	mov.w	r3, #4294967295
 8003098:	2202      	movs	r2, #2
 800309a:	480e      	ldr	r0, [pc, #56]	; (80030d4 <ST7735_FillRectangle+0x110>)
 800309c:	f005 fd39 	bl	8008b12 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	80fb      	strh	r3, [r7, #6]
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f1      	bne.n	8003090 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 80030ac:	88bb      	ldrh	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	80bb      	strh	r3, [r7, #4]
 80030b2:	88bb      	ldrh	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e8      	bne.n	800308a <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 80030b8:	f7ff fce4 	bl	8002a84 <ST7735_Unselect>
 80030bc:	e000      	b.n	80030c0 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 80030be:	bf00      	nop
}
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20002ef8 	.word	0x20002ef8
 80030cc:	20002efc 	.word	0x20002efc
 80030d0:	40020400 	.word	0x40020400
 80030d4:	2000319c 	.word	0x2000319c

080030d8 <HAL_UART_RxCpltCallback>:
float pulse = 8399;
int iniSendUart = 0;
char Nombre[50];

uint8_t rx_buff[1];
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart1,rx_buff,1);
 80030e0:	2201      	movs	r2, #1
 80030e2:	490b      	ldr	r1, [pc, #44]	; (8003110 <HAL_UART_RxCpltCallback+0x38>)
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <HAL_UART_RxCpltCallback+0x3c>)
 80030e6:	f007 f8a4 	bl	800a232 <HAL_UART_Receive_DMA>
	if(rx_buff[0] == 49){
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_UART_RxCpltCallback+0x38>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b31      	cmp	r3, #49	; 0x31
 80030f0:	d103      	bne.n	80030fa <HAL_UART_RxCpltCallback+0x22>
		//HAL_TIM_Base_Start_IT(&htim2);
		iniSendUart = 1;
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_UART_RxCpltCallback+0x40>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
	}
	else if(rx_buff[0] == 115){
		HAL_TIM_Base_Stop_IT(&htim2);
	}
}
 80030f8:	e006      	b.n	8003108 <HAL_UART_RxCpltCallback+0x30>
	else if(rx_buff[0] == 115){
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_UART_RxCpltCallback+0x38>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b73      	cmp	r3, #115	; 0x73
 8003100:	d102      	bne.n	8003108 <HAL_UART_RxCpltCallback+0x30>
		HAL_TIM_Base_Stop_IT(&htim2);
 8003102:	4806      	ldr	r0, [pc, #24]	; (800311c <HAL_UART_RxCpltCallback+0x44>)
 8003104:	f005 ffbe 	bl	8009084 <HAL_TIM_Base_Stop_IT>
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20002f48 	.word	0x20002f48
 8003114:	200030f0 	.word	0x200030f0
 8003118:	20002c00 	.word	0x20002c00
 800311c:	200031f4 	.word	0x200031f4

08003120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003126:	f002 f935 	bl	8005394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800312a:	f000 f8b7 	bl	800329c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800312e:	f000 fbfd 	bl	800392c <MX_GPIO_Init>
  MX_DMA_Init();
 8003132:	f000 fbd3 	bl	80038dc <MX_DMA_Init>
  MX_I2C1_Init();
 8003136:	f000 f987 	bl	8003448 <MX_I2C1_Init>
  MX_TIM2_Init();
 800313a:	f000 fabb 	bl	80036b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800313e:	f000 fba3 	bl	8003888 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8003142:	f000 f9af 	bl	80034a4 <MX_RTC_Init>
  MX_SPI1_Init();
 8003146:	f000 f9d3 	bl	80034f0 <MX_SPI1_Init>
  MX_ADC1_Init();
 800314a:	f000 f92b 	bl	80033a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800314e:	f000 fa05 	bl	800355c <MX_TIM1_Init>
  MX_TIM3_Init();
 8003152:	f000 fafd 	bl	8003750 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003156:	f000 fb49 	bl	80037ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 800315a:	210c      	movs	r1, #12
 800315c:	4844      	ldr	r0, [pc, #272]	; (8003270 <main+0x150>)
 800315e:	f006 f819 	bl	8009194 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse);
 8003162:	4b44      	ldr	r3, [pc, #272]	; (8003274 <main+0x154>)
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <main+0x150>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003170:	ee17 2a90 	vmov	r2, s15
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
  zeros();
 8003176:	f7ff fc43 	bl	8002a00 <zeros>
  ST7735_Init(0);
 800317a:	2000      	movs	r0, #0
 800317c:	f7ff fd6c 	bl	8002c58 <ST7735_Init>
  	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 8003180:	2101      	movs	r1, #1
 8003182:	483d      	ldr	r0, [pc, #244]	; (8003278 <main+0x158>)
 8003184:	f005 fc24 	bl	80089d0 <HAL_RTCEx_BKUPRead>
 8003188:	4603      	mov	r3, r0
 800318a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800318e:	4293      	cmp	r3, r2
 8003190:	d001      	beq.n	8003196 <main+0x76>
  		set_time();
 8003192:	f000 fe1d 	bl	8003dd0 <set_time>
  	}
  	fillScreen(BLACK);
 8003196:	2000      	movs	r0, #0
 8003198:	f7fe f9d8 	bl	800154c <fillScreen>
  	sprintf(Nombre,"Created By:");
 800319c:	4937      	ldr	r1, [pc, #220]	; (800327c <main+0x15c>)
 800319e:	4838      	ldr	r0, [pc, #224]	; (8003280 <main+0x160>)
 80031a0:	f008 fd7c 	bl	800bc9c <siprintf>
  	ST7735_WriteString(25,0,Nombre, Font_7x10, WHITE,BLACK);
 80031a4:	4b37      	ldr	r3, [pc, #220]	; (8003284 <main+0x164>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	9202      	str	r2, [sp, #8]
 80031aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ae:	9201      	str	r2, [sp, #4]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	9200      	str	r2, [sp, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a32      	ldr	r2, [pc, #200]	; (8003280 <main+0x160>)
 80031b8:	2100      	movs	r1, #0
 80031ba:	2019      	movs	r0, #25
 80031bc:	f7ff feae 	bl	8002f1c <ST7735_WriteString>
  	sprintf(Nombre,"Esteban Beltran");
 80031c0:	4931      	ldr	r1, [pc, #196]	; (8003288 <main+0x168>)
 80031c2:	482f      	ldr	r0, [pc, #188]	; (8003280 <main+0x160>)
 80031c4:	f008 fd6a 	bl	800bc9c <siprintf>
  	ST7735_WriteString(11,50,Nombre, Font_7x10, WHITE,BLACK);
 80031c8:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <main+0x164>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	9202      	str	r2, [sp, #8]
 80031ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031d2:	9201      	str	r2, [sp, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	9200      	str	r2, [sp, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a29      	ldr	r2, [pc, #164]	; (8003280 <main+0x160>)
 80031dc:	2132      	movs	r1, #50	; 0x32
 80031de:	200b      	movs	r0, #11
 80031e0:	f7ff fe9c 	bl	8002f1c <ST7735_WriteString>
  	sprintf(Nombre,"Eng. Mechatronic");
 80031e4:	4929      	ldr	r1, [pc, #164]	; (800328c <main+0x16c>)
 80031e6:	4826      	ldr	r0, [pc, #152]	; (8003280 <main+0x160>)
 80031e8:	f008 fd58 	bl	800bc9c <siprintf>
  	ST7735_WriteString(8,65,Nombre, Font_7x10, WHITE,BLACK);
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <main+0x164>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	9202      	str	r2, [sp, #8]
 80031f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031f6:	9201      	str	r2, [sp, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	9200      	str	r2, [sp, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a20      	ldr	r2, [pc, #128]	; (8003280 <main+0x160>)
 8003200:	2141      	movs	r1, #65	; 0x41
 8003202:	2008      	movs	r0, #8
 8003204:	f7ff fe8a 	bl	8002f1c <ST7735_WriteString>
  	sprintf(Nombre,"Fimware V.2.0.0.");
 8003208:	4921      	ldr	r1, [pc, #132]	; (8003290 <main+0x170>)
 800320a:	481d      	ldr	r0, [pc, #116]	; (8003280 <main+0x160>)
 800320c:	f008 fd46 	bl	800bc9c <siprintf>
  	ST7735_WriteString(8,110,Nombre, Font_7x10, WHITE,BLACK);
 8003210:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <main+0x164>)
 8003212:	2200      	movs	r2, #0
 8003214:	9202      	str	r2, [sp, #8]
 8003216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800321a:	9201      	str	r2, [sp, #4]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	9200      	str	r2, [sp, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a17      	ldr	r2, [pc, #92]	; (8003280 <main+0x160>)
 8003224:	216e      	movs	r1, #110	; 0x6e
 8003226:	2008      	movs	r0, #8
 8003228:	f7ff fe78 	bl	8002f1c <ST7735_WriteString>
  	HAL_Delay(800);
 800322c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003230:	f002 f922 	bl	8005478 <HAL_Delay>
  	fillScreen(BLACK);
 8003234:	2000      	movs	r0, #0
 8003236:	f7fe f989 	bl	800154c <fillScreen>
  	Logo_Ecci();
 800323a:	f000 fc39 	bl	8003ab0 <Logo_Ecci>
  	HAL_Delay(1000);
 800323e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003242:	f002 f919 	bl	8005478 <HAL_Delay>
  	MPU9250_Init();
 8003246:	f7fe f99b 	bl	8001580 <MPU9250_Init>
  	initAK8963();
 800324a:	f7fe fa21 	bl	8001690 <initAK8963>
  	HAL_UART_Receive_DMA(&huart1,rx_buff,1);
 800324e:	2201      	movs	r2, #1
 8003250:	4910      	ldr	r1, [pc, #64]	; (8003294 <main+0x174>)
 8003252:	4811      	ldr	r0, [pc, #68]	; (8003298 <main+0x178>)
 8003254:	f006 ffed 	bl	800a232 <HAL_UART_Receive_DMA>
  	for (int i = 0; i<15;i++){
 8003258:	2300      	movs	r3, #0
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	e004      	b.n	8003268 <main+0x148>
  		MPU9250_LectureWithFilter();
 800325e:	f7fe fd37 	bl	8001cd0 <MPU9250_LectureWithFilter>
  	for (int i = 0; i<15;i++){
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3301      	adds	r3, #1
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b0e      	cmp	r3, #14
 800326c:	ddf7      	ble.n	800325e <main+0x13e>
  	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800326e:	e7fe      	b.n	800326e <main+0x14e>
 8003270:	20003154 	.word	0x20003154
 8003274:	200029e8 	.word	0x200029e8
 8003278:	20003134 	.word	0x20003134
 800327c:	0800f8d8 	.word	0x0800f8d8
 8003280:	2000323c 	.word	0x2000323c
 8003284:	200029d0 	.word	0x200029d0
 8003288:	0800f8e4 	.word	0x0800f8e4
 800328c:	0800f8f4 	.word	0x0800f8f4
 8003290:	0800f908 	.word	0x0800f908
 8003294:	20002f48 	.word	0x20002f48
 8003298:	200030f0 	.word	0x200030f0

0800329c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b098      	sub	sp, #96	; 0x60
 80032a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032a6:	2230      	movs	r2, #48	; 0x30
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f007 fe6e 	bl	800af8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b0:	f107 031c 	add.w	r3, r7, #28
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032c0:	f107 0308 	add.w	r3, r7, #8
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d0:	2300      	movs	r3, #0
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	4b31      	ldr	r3, [pc, #196]	; (800339c <SystemClock_Config+0x100>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	4a30      	ldr	r2, [pc, #192]	; (800339c <SystemClock_Config+0x100>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032de:	6413      	str	r3, [r2, #64]	; 0x40
 80032e0:	4b2e      	ldr	r3, [pc, #184]	; (800339c <SystemClock_Config+0x100>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ec:	2300      	movs	r3, #0
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <SystemClock_Config+0x104>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80032f8:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <SystemClock_Config+0x104>)
 80032fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <SystemClock_Config+0x104>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800330c:	230a      	movs	r3, #10
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003310:	2301      	movs	r3, #1
 8003312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003314:	2310      	movs	r3, #16
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003318:	2301      	movs	r3, #1
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331c:	2302      	movs	r3, #2
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003320:	2300      	movs	r3, #0
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003324:	2308      	movs	r3, #8
 8003326:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003328:	2354      	movs	r3, #84	; 0x54
 800332a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800332c:	2302      	movs	r3, #2
 800332e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003330:	2304      	movs	r3, #4
 8003332:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003334:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003338:	4618      	mov	r0, r3
 800333a:	f004 fac7 	bl	80078cc <HAL_RCC_OscConfig>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003344:	f000 fe7c 	bl	8004040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003348:	230f      	movs	r3, #15
 800334a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800334c:	2302      	movs	r3, #2
 800334e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800335a:	2300      	movs	r3, #0
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f004 fd29 	bl	8007dbc <HAL_RCC_ClockConfig>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8003370:	f000 fe66 	bl	8004040 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003374:	2302      	movs	r3, #2
 8003376:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800337c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800337e:	f107 0308 	add.w	r3, r7, #8
 8003382:	4618      	mov	r0, r3
 8003384:	f004 feea 	bl	800815c <HAL_RCCEx_PeriphCLKConfig>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800338e:	f000 fe57 	bl	8004040 <Error_Handler>
  }
}
 8003392:	bf00      	nop
 8003394:	3760      	adds	r7, #96	; 0x60
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40007000 	.word	0x40007000

080033a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033aa:	463b      	mov	r3, r7
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80033b6:	4b21      	ldr	r3, [pc, #132]	; (800343c <MX_ADC1_Init+0x98>)
 80033b8:	4a21      	ldr	r2, [pc, #132]	; (8003440 <MX_ADC1_Init+0x9c>)
 80033ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033bc:	4b1f      	ldr	r3, [pc, #124]	; (800343c <MX_ADC1_Init+0x98>)
 80033be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <MX_ADC1_Init+0x98>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80033ca:	4b1c      	ldr	r3, [pc, #112]	; (800343c <MX_ADC1_Init+0x98>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <MX_ADC1_Init+0x98>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <MX_ADC1_Init+0x98>)
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033de:	4b17      	ldr	r3, [pc, #92]	; (800343c <MX_ADC1_Init+0x98>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <MX_ADC1_Init+0x98>)
 80033e6:	4a17      	ldr	r2, [pc, #92]	; (8003444 <MX_ADC1_Init+0xa0>)
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <MX_ADC1_Init+0x98>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <MX_ADC1_Init+0x98>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <MX_ADC1_Init+0x98>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033fe:	4b0f      	ldr	r3, [pc, #60]	; (800343c <MX_ADC1_Init+0x98>)
 8003400:	2201      	movs	r2, #1
 8003402:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003404:	480d      	ldr	r0, [pc, #52]	; (800343c <MX_ADC1_Init+0x98>)
 8003406:	f002 f85b 	bl	80054c0 <HAL_ADC_Init>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003410:	f000 fe16 	bl	8004040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003414:	2300      	movs	r3, #0
 8003416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003418:	2301      	movs	r3, #1
 800341a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800341c:	2300      	movs	r3, #0
 800341e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003420:	463b      	mov	r3, r7
 8003422:	4619      	mov	r1, r3
 8003424:	4805      	ldr	r0, [pc, #20]	; (800343c <MX_ADC1_Init+0x98>)
 8003426:	f002 f983 	bl	8005730 <HAL_ADC_ConfigChannel>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003430:	f000 fe06 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20003048 	.word	0x20003048
 8003440:	40012000 	.word	0x40012000
 8003444:	0f000001 	.word	0x0f000001

08003448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800344c:	4b12      	ldr	r3, [pc, #72]	; (8003498 <MX_I2C1_Init+0x50>)
 800344e:	4a13      	ldr	r2, [pc, #76]	; (800349c <MX_I2C1_Init+0x54>)
 8003450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <MX_I2C1_Init+0x50>)
 8003454:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <MX_I2C1_Init+0x58>)
 8003456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <MX_I2C1_Init+0x50>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <MX_I2C1_Init+0x50>)
 8003460:	2200      	movs	r2, #0
 8003462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <MX_I2C1_Init+0x50>)
 8003466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800346a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <MX_I2C1_Init+0x50>)
 800346e:	2200      	movs	r2, #0
 8003470:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <MX_I2C1_Init+0x50>)
 8003474:	2200      	movs	r2, #0
 8003476:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <MX_I2C1_Init+0x50>)
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <MX_I2C1_Init+0x50>)
 8003480:	2200      	movs	r2, #0
 8003482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003484:	4804      	ldr	r0, [pc, #16]	; (8003498 <MX_I2C1_Init+0x50>)
 8003486:	f003 fa61 	bl	800694c <HAL_I2C_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003490:	f000 fdd6 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20002f4c 	.word	0x20002f4c
 800349c:	40005400 	.word	0x40005400
 80034a0:	000186a0 	.word	0x000186a0

080034a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <MX_RTC_Init+0x44>)
 80034aa:	4a10      	ldr	r2, [pc, #64]	; (80034ec <MX_RTC_Init+0x48>)
 80034ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <MX_RTC_Init+0x44>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <MX_RTC_Init+0x44>)
 80034b6:	227f      	movs	r2, #127	; 0x7f
 80034b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <MX_RTC_Init+0x44>)
 80034bc:	22ff      	movs	r2, #255	; 0xff
 80034be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <MX_RTC_Init+0x44>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <MX_RTC_Init+0x44>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <MX_RTC_Init+0x44>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80034d2:	4805      	ldr	r0, [pc, #20]	; (80034e8 <MX_RTC_Init+0x44>)
 80034d4:	f004 ff30 	bl	8008338 <HAL_RTC_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80034de:	f000 fdaf 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20003134 	.word	0x20003134
 80034ec:	40002800 	.word	0x40002800

080034f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80034f4:	4b17      	ldr	r3, [pc, #92]	; (8003554 <MX_SPI1_Init+0x64>)
 80034f6:	4a18      	ldr	r2, [pc, #96]	; (8003558 <MX_SPI1_Init+0x68>)
 80034f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <MX_SPI1_Init+0x64>)
 80034fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <MX_SPI1_Init+0x64>)
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <MX_SPI1_Init+0x64>)
 800350a:	2200      	movs	r2, #0
 800350c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <MX_SPI1_Init+0x64>)
 8003510:	2200      	movs	r2, #0
 8003512:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <MX_SPI1_Init+0x64>)
 8003516:	2200      	movs	r2, #0
 8003518:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <MX_SPI1_Init+0x64>)
 800351c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003520:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <MX_SPI1_Init+0x64>)
 8003524:	2208      	movs	r2, #8
 8003526:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <MX_SPI1_Init+0x64>)
 800352a:	2200      	movs	r2, #0
 800352c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <MX_SPI1_Init+0x64>)
 8003530:	2200      	movs	r2, #0
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <MX_SPI1_Init+0x64>)
 8003536:	2200      	movs	r2, #0
 8003538:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <MX_SPI1_Init+0x64>)
 800353c:	220a      	movs	r2, #10
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003540:	4804      	ldr	r0, [pc, #16]	; (8003554 <MX_SPI1_Init+0x64>)
 8003542:	f005 fa5d 	bl	8008a00 <HAL_SPI_Init>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800354c:	f000 fd78 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}
 8003554:	2000319c 	.word	0x2000319c
 8003558:	40013000 	.word	0x40013000

0800355c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b096      	sub	sp, #88	; 0x58
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800357a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	611a      	str	r2, [r3, #16]
 800358a:	615a      	str	r2, [r3, #20]
 800358c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	2220      	movs	r2, #32
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f007 fcf9 	bl	800af8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800359a:	4b44      	ldr	r3, [pc, #272]	; (80036ac <MX_TIM1_Init+0x150>)
 800359c:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <MX_TIM1_Init+0x154>)
 800359e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80035a0:	4b42      	ldr	r3, [pc, #264]	; (80036ac <MX_TIM1_Init+0x150>)
 80035a2:	2204      	movs	r2, #4
 80035a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a6:	4b41      	ldr	r3, [pc, #260]	; (80036ac <MX_TIM1_Init+0x150>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8399;
 80035ac:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <MX_TIM1_Init+0x150>)
 80035ae:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80035b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b4:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <MX_TIM1_Init+0x150>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035ba:	4b3c      	ldr	r3, [pc, #240]	; (80036ac <MX_TIM1_Init+0x150>)
 80035bc:	2200      	movs	r2, #0
 80035be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c0:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <MX_TIM1_Init+0x150>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035c6:	4839      	ldr	r0, [pc, #228]	; (80036ac <MX_TIM1_Init+0x150>)
 80035c8:	f005 fcaa 	bl	8008f20 <HAL_TIM_Base_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80035d2:	f000 fd35 	bl	8004040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035e0:	4619      	mov	r1, r3
 80035e2:	4832      	ldr	r0, [pc, #200]	; (80036ac <MX_TIM1_Init+0x150>)
 80035e4:	f006 f8b0 	bl	8009748 <HAL_TIM_ConfigClockSource>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80035ee:	f000 fd27 	bl	8004040 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035f2:	482e      	ldr	r0, [pc, #184]	; (80036ac <MX_TIM1_Init+0x150>)
 80035f4:	f005 fd75 	bl	80090e2 <HAL_TIM_PWM_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80035fe:	f000 fd1f 	bl	8004040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003602:	2300      	movs	r3, #0
 8003604:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800360a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800360e:	4619      	mov	r1, r3
 8003610:	4826      	ldr	r0, [pc, #152]	; (80036ac <MX_TIM1_Init+0x150>)
 8003612:	f006 fc5b 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800361c:	f000 fd10 	bl	8004040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003620:	2360      	movs	r3, #96	; 0x60
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003628:	2300      	movs	r3, #0
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800362c:	2300      	movs	r3, #0
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003634:	2300      	movs	r3, #0
 8003636:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003638:	2300      	movs	r3, #0
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800363c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003640:	2200      	movs	r2, #0
 8003642:	4619      	mov	r1, r3
 8003644:	4819      	ldr	r0, [pc, #100]	; (80036ac <MX_TIM1_Init+0x150>)
 8003646:	f005 ffc1 	bl	80095cc <HAL_TIM_PWM_ConfigChannel>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003650:	f000 fcf6 	bl	8004040 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003658:	220c      	movs	r2, #12
 800365a:	4619      	mov	r1, r3
 800365c:	4813      	ldr	r0, [pc, #76]	; (80036ac <MX_TIM1_Init+0x150>)
 800365e:	f005 ffb5 	bl	80095cc <HAL_TIM_PWM_ConfigChannel>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003668:	f000 fcea 	bl	8004040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003684:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4807      	ldr	r0, [pc, #28]	; (80036ac <MX_TIM1_Init+0x150>)
 8003690:	f006 fc8a 	bl	8009fa8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800369a:	f000 fcd1 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800369e:	4803      	ldr	r0, [pc, #12]	; (80036ac <MX_TIM1_Init+0x150>)
 80036a0:	f000 fe5e 	bl	8004360 <HAL_TIM_MspPostInit>

}
 80036a4:	bf00      	nop
 80036a6:	3758      	adds	r7, #88	; 0x58
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20003154 	.word	0x20003154
 80036b0:	40010000 	.word	0x40010000

080036b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c8:	463b      	mov	r3, r7
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036d0:	4b1e      	ldr	r3, [pc, #120]	; (800374c <MX_TIM2_Init+0x98>)
 80036d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <MX_TIM2_Init+0x98>)
 80036da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <MX_TIM2_Init+0x98>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <MX_TIM2_Init+0x98>)
 80036e8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80036ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <MX_TIM2_Init+0x98>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f4:	4b15      	ldr	r3, [pc, #84]	; (800374c <MX_TIM2_Init+0x98>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036fa:	4814      	ldr	r0, [pc, #80]	; (800374c <MX_TIM2_Init+0x98>)
 80036fc:	f005 fc10 	bl	8008f20 <HAL_TIM_Base_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003706:	f000 fc9b 	bl	8004040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800370a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800370e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003710:	f107 0308 	add.w	r3, r7, #8
 8003714:	4619      	mov	r1, r3
 8003716:	480d      	ldr	r0, [pc, #52]	; (800374c <MX_TIM2_Init+0x98>)
 8003718:	f006 f816 	bl	8009748 <HAL_TIM_ConfigClockSource>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003722:	f000 fc8d 	bl	8004040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800372e:	463b      	mov	r3, r7
 8003730:	4619      	mov	r1, r3
 8003732:	4806      	ldr	r0, [pc, #24]	; (800374c <MX_TIM2_Init+0x98>)
 8003734:	f006 fbca 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800373e:	f000 fc7f 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200031f4 	.word	0x200031f4

08003750 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003756:	f107 0308 	add.w	r3, r7, #8
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	605a      	str	r2, [r3, #4]
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003764:	463b      	mov	r3, r7
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <MX_TIM3_Init+0x94>)
 800376e:	4a1e      	ldr	r2, [pc, #120]	; (80037e8 <MX_TIM3_Init+0x98>)
 8003770:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 149;
 8003772:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <MX_TIM3_Init+0x94>)
 8003774:	2295      	movs	r2, #149	; 0x95
 8003776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <MX_TIM3_Init+0x94>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 55999;
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <MX_TIM3_Init+0x94>)
 8003780:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8003784:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003786:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <MX_TIM3_Init+0x94>)
 8003788:	2200      	movs	r2, #0
 800378a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378c:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <MX_TIM3_Init+0x94>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003792:	4814      	ldr	r0, [pc, #80]	; (80037e4 <MX_TIM3_Init+0x94>)
 8003794:	f005 fbc4 	bl	8008f20 <HAL_TIM_Base_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800379e:	f000 fc4f 	bl	8004040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037a8:	f107 0308 	add.w	r3, r7, #8
 80037ac:	4619      	mov	r1, r3
 80037ae:	480d      	ldr	r0, [pc, #52]	; (80037e4 <MX_TIM3_Init+0x94>)
 80037b0:	f005 ffca 	bl	8009748 <HAL_TIM_ConfigClockSource>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80037ba:	f000 fc41 	bl	8004040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037c6:	463b      	mov	r3, r7
 80037c8:	4619      	mov	r1, r3
 80037ca:	4806      	ldr	r0, [pc, #24]	; (80037e4 <MX_TIM3_Init+0x94>)
 80037cc:	f006 fb7e 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80037d6:	f000 fc33 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20002fa0 	.word	0x20002fa0
 80037e8:	40000400 	.word	0x40000400

080037ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003800:	463b      	mov	r3, r7
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <MX_TIM4_Init+0x94>)
 800380a:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <MX_TIM4_Init+0x98>)
 800380c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1499;
 800380e:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <MX_TIM4_Init+0x94>)
 8003810:	f240 52db 	movw	r2, #1499	; 0x5db
 8003814:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003816:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <MX_TIM4_Init+0x94>)
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 55999;
 800381c:	4b18      	ldr	r3, [pc, #96]	; (8003880 <MX_TIM4_Init+0x94>)
 800381e:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8003822:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003824:	4b16      	ldr	r3, [pc, #88]	; (8003880 <MX_TIM4_Init+0x94>)
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <MX_TIM4_Init+0x94>)
 800382c:	2200      	movs	r2, #0
 800382e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003830:	4813      	ldr	r0, [pc, #76]	; (8003880 <MX_TIM4_Init+0x94>)
 8003832:	f005 fb75 	bl	8008f20 <HAL_TIM_Base_Init>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800383c:	f000 fc00 	bl	8004040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	4619      	mov	r1, r3
 800384c:	480c      	ldr	r0, [pc, #48]	; (8003880 <MX_TIM4_Init+0x94>)
 800384e:	f005 ff7b 	bl	8009748 <HAL_TIM_ConfigClockSource>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003858:	f000 fbf2 	bl	8004040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800385c:	2300      	movs	r3, #0
 800385e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003860:	2300      	movs	r3, #0
 8003862:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003864:	463b      	mov	r3, r7
 8003866:	4619      	mov	r1, r3
 8003868:	4805      	ldr	r0, [pc, #20]	; (8003880 <MX_TIM4_Init+0x94>)
 800386a:	f006 fb2f 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003874:	f000 fbe4 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003878:	bf00      	nop
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	20002f00 	.word	0x20002f00
 8003884:	40000800 	.word	0x40000800

08003888 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <MX_USART1_UART_Init+0x4c>)
 800388e:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <MX_USART1_UART_Init+0x50>)
 8003890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <MX_USART1_UART_Init+0x4c>)
 8003894:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <MX_USART1_UART_Init+0x4c>)
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <MX_USART1_UART_Init+0x4c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <MX_USART1_UART_Init+0x4c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <MX_USART1_UART_Init+0x4c>)
 80038ae:	220c      	movs	r2, #12
 80038b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <MX_USART1_UART_Init+0x4c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <MX_USART1_UART_Init+0x4c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038be:	4805      	ldr	r0, [pc, #20]	; (80038d4 <MX_USART1_UART_Init+0x4c>)
 80038c0:	f006 fbd8 	bl	800a074 <HAL_UART_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80038ca:	f000 fbb9 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200030f0 	.word	0x200030f0
 80038d8:	40011000 	.word	0x40011000

080038dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <MX_DMA_Init+0x4c>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4a0f      	ldr	r2, [pc, #60]	; (8003928 <MX_DMA_Init+0x4c>)
 80038ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <MX_DMA_Init+0x4c>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	2100      	movs	r1, #0
 8003902:	203a      	movs	r0, #58	; 0x3a
 8003904:	f002 fa0d 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003908:	203a      	movs	r0, #58	; 0x3a
 800390a:	f002 fa26 	bl	8005d5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800390e:	2200      	movs	r2, #0
 8003910:	2100      	movs	r1, #0
 8003912:	2046      	movs	r0, #70	; 0x46
 8003914:	f002 fa05 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003918:	2046      	movs	r0, #70	; 0x46
 800391a:	f002 fa1e 	bl	8005d5a <HAL_NVIC_EnableIRQ>

}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800

0800392c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
 8003930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <MX_GPIO_Init+0x170>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	4a54      	ldr	r2, [pc, #336]	; (8003a9c <MX_GPIO_Init+0x170>)
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	6313      	str	r3, [r2, #48]	; 0x30
 8003952:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <MX_GPIO_Init+0x170>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	4b4e      	ldr	r3, [pc, #312]	; (8003a9c <MX_GPIO_Init+0x170>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4a4d      	ldr	r2, [pc, #308]	; (8003a9c <MX_GPIO_Init+0x170>)
 8003968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <MX_GPIO_Init+0x170>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <MX_GPIO_Init+0x170>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a46      	ldr	r2, [pc, #280]	; (8003a9c <MX_GPIO_Init+0x170>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <MX_GPIO_Init+0x170>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	4b40      	ldr	r3, [pc, #256]	; (8003a9c <MX_GPIO_Init+0x170>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a3f      	ldr	r2, [pc, #252]	; (8003a9c <MX_GPIO_Init+0x170>)
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <MX_GPIO_Init+0x170>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	607b      	str	r3, [r7, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80039b2:	2201      	movs	r2, #1
 80039b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039b8:	4839      	ldr	r0, [pc, #228]	; (8003aa0 <MX_GPIO_Init+0x174>)
 80039ba:	f002 ff6f 	bl	800689c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80039be:	2200      	movs	r2, #0
 80039c0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80039c4:	4837      	ldr	r0, [pc, #220]	; (8003aa4 <MX_GPIO_Init+0x178>)
 80039c6:	f002 ff69 	bl	800689c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80039ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d0:	2301      	movs	r3, #1
 80039d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d8:	2300      	movs	r3, #0
 80039da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	4619      	mov	r1, r3
 80039e2:	482f      	ldr	r0, [pc, #188]	; (8003aa0 <MX_GPIO_Init+0x174>)
 80039e4:	f002 fdd6 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80039e8:	f249 031e 	movw	r3, #36894	; 0x901e
 80039ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ee:	2303      	movs	r3, #3
 80039f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	4619      	mov	r1, r3
 80039fc:	482a      	ldr	r0, [pc, #168]	; (8003aa8 <MX_GPIO_Init+0x17c>)
 80039fe:	f002 fdc9 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : Arriba_Pin Abajo_Pin Enter_Pin Atras_Pin */
  GPIO_InitStruct.Pin = Arriba_Pin|Abajo_Pin|Enter_Pin|Atras_Pin;
 8003a02:	231b      	movs	r3, #27
 8003a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a06:	4b29      	ldr	r3, [pc, #164]	; (8003aac <MX_GPIO_Init+0x180>)
 8003a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4619      	mov	r1, r3
 8003a14:	4823      	ldr	r0, [pc, #140]	; (8003aa4 <MX_GPIO_Init+0x178>)
 8003a16:	f002 fdbd 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB15 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_5
 8003a1a:	f248 7324 	movw	r3, #34596	; 0x8724
 8003a1e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a20:	2303      	movs	r3, #3
 8003a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	481d      	ldr	r0, [pc, #116]	; (8003aa4 <MX_GPIO_Init+0x178>)
 8003a30:	f002 fdb0 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003a34:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	2300      	movs	r3, #0
 8003a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4815      	ldr	r0, [pc, #84]	; (8003aa4 <MX_GPIO_Init+0x178>)
 8003a4e:	f002 fda1 	bl	8006594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003a52:	2200      	movs	r2, #0
 8003a54:	2100      	movs	r1, #0
 8003a56:	2006      	movs	r0, #6
 8003a58:	f002 f963 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003a5c:	2006      	movs	r0, #6
 8003a5e:	f002 f97c 	bl	8005d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2100      	movs	r1, #0
 8003a66:	2007      	movs	r0, #7
 8003a68:	f002 f95b 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003a6c:	2007      	movs	r0, #7
 8003a6e:	f002 f974 	bl	8005d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2100      	movs	r1, #0
 8003a76:	2009      	movs	r0, #9
 8003a78:	f002 f953 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003a7c:	2009      	movs	r0, #9
 8003a7e:	f002 f96c 	bl	8005d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2100      	movs	r1, #0
 8003a86:	200a      	movs	r0, #10
 8003a88:	f002 f94b 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003a8c:	200a      	movs	r0, #10
 8003a8e:	f002 f964 	bl	8005d5a <HAL_NVIC_EnableIRQ>

}
 8003a92:	bf00      	nop
 8003a94:	3728      	adds	r7, #40	; 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40020800 	.word	0x40020800
 8003aa4:	40020400 	.word	0x40020400
 8003aa8:	40020000 	.word	0x40020000
 8003aac:	10110000 	.word	0x10110000

08003ab0 <Logo_Ecci>:

/* USER CODE BEGIN 4 */
void Logo_Ecci(void){
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af04      	add	r7, sp, #16

	for(int i=0;i<7;i++){
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e033      	b.n	8003b24 <Logo_Ecci+0x74>
		drawLine(15,24,64,i,BLUE);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	b21b      	sxth	r3, r3
 8003ac0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003ac4:	9200      	str	r2, [sp, #0]
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	2118      	movs	r1, #24
 8003aca:	200f      	movs	r0, #15
 8003acc:	f7fd fbc6 	bl	800125c <drawLine>
		drawLine(15,26,80,i+3,BLUE);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3303      	adds	r3, #3
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	b21b      	sxth	r3, r3
 8003ada:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003ade:	9200      	str	r2, [sp, #0]
 8003ae0:	2250      	movs	r2, #80	; 0x50
 8003ae2:	211a      	movs	r1, #26
 8003ae4:	200f      	movs	r0, #15
 8003ae6:	f7fd fbb9 	bl	800125c <drawLine>
		drawLine(16,28,100,i+6,BLUE);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3306      	adds	r3, #6
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	b21b      	sxth	r3, r3
 8003af4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003af8:	9200      	str	r2, [sp, #0]
 8003afa:	2264      	movs	r2, #100	; 0x64
 8003afc:	211c      	movs	r1, #28
 8003afe:	2010      	movs	r0, #16
 8003b00:	f7fd fbac 	bl	800125c <drawLine>
		drawLine(17,30,119,i+10,BLUE);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	330a      	adds	r3, #10
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	b21b      	sxth	r3, r3
 8003b0e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003b12:	9200      	str	r2, [sp, #0]
 8003b14:	2277      	movs	r2, #119	; 0x77
 8003b16:	211e      	movs	r1, #30
 8003b18:	2011      	movs	r0, #17
 8003b1a:	f7fd fb9f 	bl	800125c <drawLine>
	for(int i=0;i<7;i++){
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3301      	adds	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	ddc8      	ble.n	8003abc <Logo_Ecci+0xc>
	}
	for(int i=0;i<7;i++){
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	e00f      	b.n	8003b50 <Logo_Ecci+0xa0>
		drawLine(17,30,118,i+13,BLUE);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	330d      	adds	r3, #13
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	b21b      	sxth	r3, r3
 8003b3a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003b3e:	9200      	str	r2, [sp, #0]
 8003b40:	2276      	movs	r2, #118	; 0x76
 8003b42:	211e      	movs	r1, #30
 8003b44:	2011      	movs	r0, #17
 8003b46:	f7fd fb89 	bl	800125c <drawLine>
	for(int i=0;i<7;i++){
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	ddec      	ble.n	8003b30 <Logo_Ecci+0x80>
	}
	drawRect(15,34,40,40,BLUE);
 8003b56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2328      	movs	r3, #40	; 0x28
 8003b5e:	2228      	movs	r2, #40	; 0x28
 8003b60:	2122      	movs	r1, #34	; 0x22
 8003b62:	200f      	movs	r0, #15
 8003b64:	f7fd fcb0 	bl	80014c8 <drawRect>
	fillRect(15,34,40,40,BLUE);
 8003b68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2328      	movs	r3, #40	; 0x28
 8003b70:	2228      	movs	r2, #40	; 0x28
 8003b72:	2122      	movs	r1, #34	; 0x22
 8003b74:	200f      	movs	r0, #15
 8003b76:	f7fd fa54 	bl	8001022 <fillRect>
	ST7735_WriteString(25,42,"E",Font_16x26,WHITE,BLUE);
 8003b7a:	4b7b      	ldr	r3, [pc, #492]	; (8003d68 <Logo_Ecci+0x2b8>)
 8003b7c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003b80:	9202      	str	r2, [sp, #8]
 8003b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b86:	9201      	str	r2, [sp, #4]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	9200      	str	r2, [sp, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a77      	ldr	r2, [pc, #476]	; (8003d6c <Logo_Ecci+0x2bc>)
 8003b90:	212a      	movs	r1, #42	; 0x2a
 8003b92:	2019      	movs	r0, #25
 8003b94:	f7ff f9c2 	bl	8002f1c <ST7735_WriteString>
	drawRect(65,34,45,40,RED);
 8003b98:	23ff      	movs	r3, #255	; 0xff
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2328      	movs	r3, #40	; 0x28
 8003b9e:	222d      	movs	r2, #45	; 0x2d
 8003ba0:	2122      	movs	r1, #34	; 0x22
 8003ba2:	2041      	movs	r0, #65	; 0x41
 8003ba4:	f7fd fc90 	bl	80014c8 <drawRect>
	fillRect(65,34,45,40,RED);
 8003ba8:	23ff      	movs	r3, #255	; 0xff
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2328      	movs	r3, #40	; 0x28
 8003bae:	222d      	movs	r2, #45	; 0x2d
 8003bb0:	2122      	movs	r1, #34	; 0x22
 8003bb2:	2041      	movs	r0, #65	; 0x41
 8003bb4:	f7fd fa35 	bl	8001022 <fillRect>
	ST7735_WriteString(77,42,"C",Font_16x26,WHITE,RED);
 8003bb8:	4b6b      	ldr	r3, [pc, #428]	; (8003d68 <Logo_Ecci+0x2b8>)
 8003bba:	22ff      	movs	r2, #255	; 0xff
 8003bbc:	9202      	str	r2, [sp, #8]
 8003bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc2:	9201      	str	r2, [sp, #4]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	9200      	str	r2, [sp, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a69      	ldr	r2, [pc, #420]	; (8003d70 <Logo_Ecci+0x2c0>)
 8003bcc:	212a      	movs	r1, #42	; 0x2a
 8003bce:	204d      	movs	r0, #77	; 0x4d
 8003bd0:	f7ff f9a4 	bl	8002f1c <ST7735_WriteString>
	drawRect(15,84,40,40,color565(0xFF, 0xF6, 0x00));
 8003bd4:	f240 73bf 	movw	r3, #1983	; 0x7bf
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2328      	movs	r3, #40	; 0x28
 8003bdc:	2228      	movs	r2, #40	; 0x28
 8003bde:	2154      	movs	r1, #84	; 0x54
 8003be0:	200f      	movs	r0, #15
 8003be2:	f7fd fc71 	bl	80014c8 <drawRect>
	fillRect(15,84,40,40,color565(0xFF, 0xF6, 0x00));
 8003be6:	f240 73bf 	movw	r3, #1983	; 0x7bf
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2328      	movs	r3, #40	; 0x28
 8003bee:	2228      	movs	r2, #40	; 0x28
 8003bf0:	2154      	movs	r1, #84	; 0x54
 8003bf2:	200f      	movs	r0, #15
 8003bf4:	f7fd fa15 	bl	8001022 <fillRect>
	ST7735_WriteString(25,94,"C",Font_16x26,WHITE,color565(0xFF, 0xF6, 0x00));
 8003bf8:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <Logo_Ecci+0x2b8>)
 8003bfa:	f240 72bf 	movw	r2, #1983	; 0x7bf
 8003bfe:	9202      	str	r2, [sp, #8]
 8003c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c04:	9201      	str	r2, [sp, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	9200      	str	r2, [sp, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <Logo_Ecci+0x2c0>)
 8003c0e:	215e      	movs	r1, #94	; 0x5e
 8003c10:	2019      	movs	r0, #25
 8003c12:	f7ff f983 	bl	8002f1c <ST7735_WriteString>
	drawRect(65,84,45,40,BLUE);
 8003c16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2328      	movs	r3, #40	; 0x28
 8003c1e:	222d      	movs	r2, #45	; 0x2d
 8003c20:	2154      	movs	r1, #84	; 0x54
 8003c22:	2041      	movs	r0, #65	; 0x41
 8003c24:	f7fd fc50 	bl	80014c8 <drawRect>
	fillRect(65,84,45,40,BLUE);
 8003c28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	2328      	movs	r3, #40	; 0x28
 8003c30:	222d      	movs	r2, #45	; 0x2d
 8003c32:	2154      	movs	r1, #84	; 0x54
 8003c34:	2041      	movs	r0, #65	; 0x41
 8003c36:	f7fd f9f4 	bl	8001022 <fillRect>
	ST7735_WriteString(77,94,"I",Font_16x26,WHITE,BLUE);
 8003c3a:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <Logo_Ecci+0x2b8>)
 8003c3c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003c40:	9202      	str	r2, [sp, #8]
 8003c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c46:	9201      	str	r2, [sp, #4]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	9200      	str	r2, [sp, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a49      	ldr	r2, [pc, #292]	; (8003d74 <Logo_Ecci+0x2c4>)
 8003c50:	215e      	movs	r1, #94	; 0x5e
 8003c52:	204d      	movs	r0, #77	; 0x4d
 8003c54:	f7ff f962 	bl	8002f1c <ST7735_WriteString>
	for(int i=0;i<40;i++){
 8003c58:	2300      	movs	r3, #0
 8003c5a:	607b      	str	r3, [r7, #4]
 8003c5c:	e024      	b.n	8003ca8 <Logo_Ecci+0x1f8>
		drawLine(3,i+26,15,i+34,BLUE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	331a      	adds	r3, #26
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b219      	sxth	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3322      	adds	r3, #34	; 0x22
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	b21b      	sxth	r3, r3
 8003c72:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003c76:	9200      	str	r2, [sp, #0]
 8003c78:	220f      	movs	r2, #15
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	f7fd faee 	bl	800125c <drawLine>
		drawLine(3,i+72,15,i+84,color565(0xFF, 0xF6, 0x00));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3348      	adds	r3, #72	; 0x48
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	b219      	sxth	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3354      	adds	r3, #84	; 0x54
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	b21b      	sxth	r3, r3
 8003c94:	f240 72bf 	movw	r2, #1983	; 0x7bf
 8003c98:	9200      	str	r2, [sp, #0]
 8003c9a:	220f      	movs	r2, #15
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f7fd fadd 	bl	800125c <drawLine>
	for(int i=0;i<40;i++){
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b27      	cmp	r3, #39	; 0x27
 8003cac:	ddd7      	ble.n	8003c5e <Logo_Ecci+0x1ae>
	}
	for(int i=9;i>5;i--){
 8003cae:	2309      	movs	r3, #9
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	e04e      	b.n	8003d52 <Logo_Ecci+0x2a2>
		drawCircleHelper(14,24,i,0x8,BLACK);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b21a      	sxth	r2, r3
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	2118      	movs	r1, #24
 8003cc0:	200e      	movs	r0, #14
 8003cc2:	f7fd fb2d 	bl	8001320 <drawCircleHelper>
		drawCircleHelper(14,24,i,0x8,BLACK);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	b21a      	sxth	r2, r3
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	2308      	movs	r3, #8
 8003cd0:	2118      	movs	r1, #24
 8003cd2:	200e      	movs	r0, #14
 8003cd4:	f7fd fb24 	bl	8001320 <drawCircleHelper>
		drawCircleHelper(14,64,i,0x8,BLUE);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b21a      	sxth	r2, r3
 8003cdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	2140      	movs	r1, #64	; 0x40
 8003ce6:	200e      	movs	r0, #14
 8003ce8:	f7fd fb1a 	bl	8001320 <drawCircleHelper>
		drawCircleHelper(14,64,i,0x8,BLUE);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	b21a      	sxth	r2, r3
 8003cf0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	2140      	movs	r1, #64	; 0x40
 8003cfa:	200e      	movs	r0, #14
 8003cfc:	f7fd fb10 	bl	8001320 <drawCircleHelper>
		drawCircleHelper(14,74,i,0x8,BLACK);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	b21a      	sxth	r2, r3
 8003d04:	2300      	movs	r3, #0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2308      	movs	r3, #8
 8003d0a:	214a      	movs	r1, #74	; 0x4a
 8003d0c:	200e      	movs	r0, #14
 8003d0e:	f7fd fb07 	bl	8001320 <drawCircleHelper>
		drawCircleHelper(14,74,i,0x8,BLACK);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	b21a      	sxth	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	214a      	movs	r1, #74	; 0x4a
 8003d1e:	200e      	movs	r0, #14
 8003d20:	f7fd fafe 	bl	8001320 <drawCircleHelper>
		drawCircleHelper(14,114,i,0x8,color565(0xFF, 0xF6, 0x00));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	b21a      	sxth	r2, r3
 8003d28:	f240 73bf 	movw	r3, #1983	; 0x7bf
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2308      	movs	r3, #8
 8003d30:	2172      	movs	r1, #114	; 0x72
 8003d32:	200e      	movs	r0, #14
 8003d34:	f7fd faf4 	bl	8001320 <drawCircleHelper>
		drawCircleHelper(14,114,i,0x8,color565(0xFF, 0xF6, 0x00));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	f240 73bf 	movw	r3, #1983	; 0x7bf
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2308      	movs	r3, #8
 8003d44:	2172      	movs	r1, #114	; 0x72
 8003d46:	200e      	movs	r0, #14
 8003d48:	f7fd faea 	bl	8001320 <drawCircleHelper>
	for(int i=9;i>5;i--){
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b05      	cmp	r3, #5
 8003d56:	dcad      	bgt.n	8003cb4 <Logo_Ecci+0x204>
	}

	HAL_TIM_Base_Start_IT(&htim4);
 8003d58:	4807      	ldr	r0, [pc, #28]	; (8003d78 <Logo_Ecci+0x2c8>)
 8003d5a:	f005 f931 	bl	8008fc0 <HAL_TIM_Base_Start_IT>
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200029e0 	.word	0x200029e0
 8003d6c:	0800f91c 	.word	0x0800f91c
 8003d70:	0800f920 	.word	0x0800f920
 8003d74:	0800f924 	.word	0x0800f924
 8003d78:	20002f00 	.word	0x20002f00

08003d7c <get_time>:

void get_time(void){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef gTime;
	//RTC_DateTypeDef gDate;

	HAL_RTC_GetTime(&hrtc,&gTime,RTC_FORMAT_BIN);
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	2200      	movs	r2, #0
 8003d86:	4619      	mov	r1, r3
 8003d88:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <get_time+0x44>)
 8003d8a:	f004 fc23 	bl	80085d4 <HAL_RTC_GetTime>

	sprintf(Nombre,"%02d:%02d",gTime.Hours,gTime.Minutes);
 8003d8e:	793b      	ldrb	r3, [r7, #4]
 8003d90:	461a      	mov	r2, r3
 8003d92:	797b      	ldrb	r3, [r7, #5]
 8003d94:	490b      	ldr	r1, [pc, #44]	; (8003dc4 <get_time+0x48>)
 8003d96:	480c      	ldr	r0, [pc, #48]	; (8003dc8 <get_time+0x4c>)
 8003d98:	f007 ff80 	bl	800bc9c <siprintf>
	ST7735_WriteString(0,0,Nombre, Font_7x10, WHITE,BLACK);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <get_time+0x50>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	9202      	str	r2, [sp, #8]
 8003da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da6:	9201      	str	r2, [sp, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	9200      	str	r2, [sp, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a06      	ldr	r2, [pc, #24]	; (8003dc8 <get_time+0x4c>)
 8003db0:	2100      	movs	r1, #0
 8003db2:	2000      	movs	r0, #0
 8003db4:	f7ff f8b2 	bl	8002f1c <ST7735_WriteString>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20003134 	.word	0x20003134
 8003dc4:	0800f928 	.word	0x0800f928
 8003dc8:	2000323c 	.word	0x2000323c
 8003dcc:	200029d0 	.word	0x200029d0

08003dd0 <set_time>:
void set_time(void){
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef DateToUpdate = {0};
 8003de4:	2300      	movs	r3, #0
 8003de6:	603b      	str	r3, [r7, #0]
	/** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x5;
 8003de8:	2305      	movs	r3, #5
 8003dea:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x32;
 8003dec:	2332      	movs	r3, #50	; 0x32
 8003dee:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	2201      	movs	r2, #1
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4812      	ldr	r0, [pc, #72]	; (8003e44 <set_time+0x74>)
 8003dfc:	f004 fb2d 	bl	800845a <HAL_RTC_SetTime>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <set_time+0x3a>
  {
    Error_Handler();
 8003e06:	f000 f91b 	bl	8004040 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MARCH;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x30;
 8003e12:	2330      	movs	r3, #48	; 0x30
 8003e14:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x21;
 8003e16:	2321      	movs	r3, #33	; 0x21
 8003e18:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4808      	ldr	r0, [pc, #32]	; (8003e44 <set_time+0x74>)
 8003e22:	f004 fc35 	bl	8008690 <HAL_RTC_SetDate>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <set_time+0x60>
  {
    Error_Handler();
 8003e2c:	f000 f908 	bl	8004040 <Error_Handler>
  }
 /* USER CODE BEGIN Check_RTC_BKUP */
	HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1,0x32f2);
 8003e30:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003e34:	2101      	movs	r1, #1
 8003e36:	4803      	ldr	r0, [pc, #12]	; (8003e44 <set_time+0x74>)
 8003e38:	f004 fdb0 	bl	800899c <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */
}
 8003e3c:	bf00      	nop
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20003134 	.word	0x20003134

08003e48 <Clock_Ecci>:

void Clock_Ecci(void){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	; 0x28
 8003e4c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	HAL_RTC_GetTime(&hrtc,&gTime,RTC_FORMAT_BIN);
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	2200      	movs	r2, #0
 8003e52:	4619      	mov	r1, r3
 8003e54:	486c      	ldr	r0, [pc, #432]	; (8004008 <Clock_Ecci+0x1c0>)
 8003e56:	f004 fbbd 	bl	80085d4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&gDate,RTC_FORMAT_BIN);
 8003e5a:	463b      	mov	r3, r7
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4869      	ldr	r0, [pc, #420]	; (8004008 <Clock_Ecci+0x1c0>)
 8003e62:	f004 fcbc 	bl	80087de <HAL_RTC_GetDate>
	switch(gDate.WeekDay){
 8003e66:	783b      	ldrb	r3, [r7, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	f200 809e 	bhi.w	8003fac <Clock_Ecci+0x164>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <Clock_Ecci+0x30>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e95 	.word	0x08003e95
 8003e7c:	08003ebd 	.word	0x08003ebd
 8003e80:	08003ee5 	.word	0x08003ee5
 8003e84:	08003f0d 	.word	0x08003f0d
 8003e88:	08003f35 	.word	0x08003f35
 8003e8c:	08003f5d 	.word	0x08003f5d
 8003e90:	08003f85 	.word	0x08003f85
		case(1):
			sprintf(Nombre,"%s","Mon");
 8003e94:	4a5d      	ldr	r2, [pc, #372]	; (800400c <Clock_Ecci+0x1c4>)
 8003e96:	495e      	ldr	r1, [pc, #376]	; (8004010 <Clock_Ecci+0x1c8>)
 8003e98:	485e      	ldr	r0, [pc, #376]	; (8004014 <Clock_Ecci+0x1cc>)
 8003e9a:	f007 feff 	bl	800bc9c <siprintf>
			ST7735_WriteString(100,0,Nombre, Font_7x10, WHITE,BLACK);
 8003e9e:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <Clock_Ecci+0x1d0>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	9202      	str	r2, [sp, #8]
 8003ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea8:	9201      	str	r2, [sp, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	9200      	str	r2, [sp, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	; (8004014 <Clock_Ecci+0x1cc>)
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	2064      	movs	r0, #100	; 0x64
 8003eb6:	f7ff f831 	bl	8002f1c <ST7735_WriteString>
			break;
 8003eba:	e077      	b.n	8003fac <Clock_Ecci+0x164>
		case(2):
			sprintf(Nombre,"%s","Tue");
 8003ebc:	4a57      	ldr	r2, [pc, #348]	; (800401c <Clock_Ecci+0x1d4>)
 8003ebe:	4954      	ldr	r1, [pc, #336]	; (8004010 <Clock_Ecci+0x1c8>)
 8003ec0:	4854      	ldr	r0, [pc, #336]	; (8004014 <Clock_Ecci+0x1cc>)
 8003ec2:	f007 feeb 	bl	800bc9c <siprintf>
			ST7735_WriteString(100,0,Nombre, Font_7x10, WHITE,BLACK);
 8003ec6:	4b54      	ldr	r3, [pc, #336]	; (8004018 <Clock_Ecci+0x1d0>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	9202      	str	r2, [sp, #8]
 8003ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ed0:	9201      	str	r2, [sp, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	9200      	str	r2, [sp, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <Clock_Ecci+0x1cc>)
 8003eda:	2100      	movs	r1, #0
 8003edc:	2064      	movs	r0, #100	; 0x64
 8003ede:	f7ff f81d 	bl	8002f1c <ST7735_WriteString>
			break;
 8003ee2:	e063      	b.n	8003fac <Clock_Ecci+0x164>
		case(3):
			sprintf(Nombre,"%s","Wed");
 8003ee4:	4a4e      	ldr	r2, [pc, #312]	; (8004020 <Clock_Ecci+0x1d8>)
 8003ee6:	494a      	ldr	r1, [pc, #296]	; (8004010 <Clock_Ecci+0x1c8>)
 8003ee8:	484a      	ldr	r0, [pc, #296]	; (8004014 <Clock_Ecci+0x1cc>)
 8003eea:	f007 fed7 	bl	800bc9c <siprintf>
			ST7735_WriteString(100,0,Nombre, Font_7x10, WHITE,BLACK);
 8003eee:	4b4a      	ldr	r3, [pc, #296]	; (8004018 <Clock_Ecci+0x1d0>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	9202      	str	r2, [sp, #8]
 8003ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef8:	9201      	str	r2, [sp, #4]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	9200      	str	r2, [sp, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a44      	ldr	r2, [pc, #272]	; (8004014 <Clock_Ecci+0x1cc>)
 8003f02:	2100      	movs	r1, #0
 8003f04:	2064      	movs	r0, #100	; 0x64
 8003f06:	f7ff f809 	bl	8002f1c <ST7735_WriteString>
			break;
 8003f0a:	e04f      	b.n	8003fac <Clock_Ecci+0x164>
		case(4):
			sprintf(Nombre,"%s","Thu");
 8003f0c:	4a45      	ldr	r2, [pc, #276]	; (8004024 <Clock_Ecci+0x1dc>)
 8003f0e:	4940      	ldr	r1, [pc, #256]	; (8004010 <Clock_Ecci+0x1c8>)
 8003f10:	4840      	ldr	r0, [pc, #256]	; (8004014 <Clock_Ecci+0x1cc>)
 8003f12:	f007 fec3 	bl	800bc9c <siprintf>
			ST7735_WriteString(100,0,Nombre, Font_7x10, WHITE,BLACK);
 8003f16:	4b40      	ldr	r3, [pc, #256]	; (8004018 <Clock_Ecci+0x1d0>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	9202      	str	r2, [sp, #8]
 8003f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f20:	9201      	str	r2, [sp, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	9200      	str	r2, [sp, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a3a      	ldr	r2, [pc, #232]	; (8004014 <Clock_Ecci+0x1cc>)
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	2064      	movs	r0, #100	; 0x64
 8003f2e:	f7fe fff5 	bl	8002f1c <ST7735_WriteString>
			break;
 8003f32:	e03b      	b.n	8003fac <Clock_Ecci+0x164>
		case(5):
			sprintf(Nombre,"%s","Fri");
 8003f34:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <Clock_Ecci+0x1e0>)
 8003f36:	4936      	ldr	r1, [pc, #216]	; (8004010 <Clock_Ecci+0x1c8>)
 8003f38:	4836      	ldr	r0, [pc, #216]	; (8004014 <Clock_Ecci+0x1cc>)
 8003f3a:	f007 feaf 	bl	800bc9c <siprintf>
			ST7735_WriteString(100,0,Nombre, Font_7x10, WHITE,BLACK);
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <Clock_Ecci+0x1d0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	9202      	str	r2, [sp, #8]
 8003f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f48:	9201      	str	r2, [sp, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	9200      	str	r2, [sp, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a30      	ldr	r2, [pc, #192]	; (8004014 <Clock_Ecci+0x1cc>)
 8003f52:	2100      	movs	r1, #0
 8003f54:	2064      	movs	r0, #100	; 0x64
 8003f56:	f7fe ffe1 	bl	8002f1c <ST7735_WriteString>
			break;
 8003f5a:	e027      	b.n	8003fac <Clock_Ecci+0x164>
		case(6):
			sprintf(Nombre,"%s","Sat");
 8003f5c:	4a33      	ldr	r2, [pc, #204]	; (800402c <Clock_Ecci+0x1e4>)
 8003f5e:	492c      	ldr	r1, [pc, #176]	; (8004010 <Clock_Ecci+0x1c8>)
 8003f60:	482c      	ldr	r0, [pc, #176]	; (8004014 <Clock_Ecci+0x1cc>)
 8003f62:	f007 fe9b 	bl	800bc9c <siprintf>
			ST7735_WriteString(100,0,Nombre, Font_7x10, WHITE,BLACK);
 8003f66:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <Clock_Ecci+0x1d0>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	9202      	str	r2, [sp, #8]
 8003f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f70:	9201      	str	r2, [sp, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	9200      	str	r2, [sp, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a26      	ldr	r2, [pc, #152]	; (8004014 <Clock_Ecci+0x1cc>)
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	2064      	movs	r0, #100	; 0x64
 8003f7e:	f7fe ffcd 	bl	8002f1c <ST7735_WriteString>
			break;
 8003f82:	e013      	b.n	8003fac <Clock_Ecci+0x164>
		case(7):
			sprintf(Nombre,"%s","Sun");
 8003f84:	4a2a      	ldr	r2, [pc, #168]	; (8004030 <Clock_Ecci+0x1e8>)
 8003f86:	4922      	ldr	r1, [pc, #136]	; (8004010 <Clock_Ecci+0x1c8>)
 8003f88:	4822      	ldr	r0, [pc, #136]	; (8004014 <Clock_Ecci+0x1cc>)
 8003f8a:	f007 fe87 	bl	800bc9c <siprintf>
			ST7735_WriteString(100,0,Nombre, Font_7x10, WHITE,BLACK);
 8003f8e:	4b22      	ldr	r3, [pc, #136]	; (8004018 <Clock_Ecci+0x1d0>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	9202      	str	r2, [sp, #8]
 8003f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f98:	9201      	str	r2, [sp, #4]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	9200      	str	r2, [sp, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <Clock_Ecci+0x1cc>)
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	2064      	movs	r0, #100	; 0x64
 8003fa6:	f7fe ffb9 	bl	8002f1c <ST7735_WriteString>
			break;
 8003faa:	bf00      	nop
	}

	sprintf(Nombre,"%02d/%02d",gDate.Month,gDate.Date);
 8003fac:	787b      	ldrb	r3, [r7, #1]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	78bb      	ldrb	r3, [r7, #2]
 8003fb2:	4920      	ldr	r1, [pc, #128]	; (8004034 <Clock_Ecci+0x1ec>)
 8003fb4:	4817      	ldr	r0, [pc, #92]	; (8004014 <Clock_Ecci+0x1cc>)
 8003fb6:	f007 fe71 	bl	800bc9c <siprintf>
	ST7735_WriteString(0,0,Nombre, Font_7x10, WHITE,BLACK);
 8003fba:	4b17      	ldr	r3, [pc, #92]	; (8004018 <Clock_Ecci+0x1d0>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	9202      	str	r2, [sp, #8]
 8003fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fc4:	9201      	str	r2, [sp, #4]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	9200      	str	r2, [sp, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a11      	ldr	r2, [pc, #68]	; (8004014 <Clock_Ecci+0x1cc>)
 8003fce:	2100      	movs	r1, #0
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f7fe ffa3 	bl	8002f1c <ST7735_WriteString>

	sprintf(Nombre,"%02d:%02d",gTime.Hours,gTime.Minutes);
 8003fd6:	793b      	ldrb	r3, [r7, #4]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	797b      	ldrb	r3, [r7, #5]
 8003fdc:	4916      	ldr	r1, [pc, #88]	; (8004038 <Clock_Ecci+0x1f0>)
 8003fde:	480d      	ldr	r0, [pc, #52]	; (8004014 <Clock_Ecci+0x1cc>)
 8003fe0:	f007 fe5c 	bl	800bc9c <siprintf>
	ST7735_WriteString(20,15,Nombre, Font_16x26, WHITE,BLACK);
 8003fe4:	4b15      	ldr	r3, [pc, #84]	; (800403c <Clock_Ecci+0x1f4>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	9202      	str	r2, [sp, #8]
 8003fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fee:	9201      	str	r2, [sp, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	9200      	str	r2, [sp, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a07      	ldr	r2, [pc, #28]	; (8004014 <Clock_Ecci+0x1cc>)
 8003ff8:	210f      	movs	r1, #15
 8003ffa:	2014      	movs	r0, #20
 8003ffc:	f7fe ff8e 	bl	8002f1c <ST7735_WriteString>
}
 8004000:	bf00      	nop
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20003134 	.word	0x20003134
 800400c:	0800f934 	.word	0x0800f934
 8004010:	0800f938 	.word	0x0800f938
 8004014:	2000323c 	.word	0x2000323c
 8004018:	200029d0 	.word	0x200029d0
 800401c:	0800f93c 	.word	0x0800f93c
 8004020:	0800f940 	.word	0x0800f940
 8004024:	0800f944 	.word	0x0800f944
 8004028:	0800f948 	.word	0x0800f948
 800402c:	0800f94c 	.word	0x0800f94c
 8004030:	0800f950 	.word	0x0800f950
 8004034:	0800f954 	.word	0x0800f954
 8004038:	0800f928 	.word	0x0800f928
 800403c:	200029e0 	.word	0x200029e0

08004040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004044:	b672      	cpsid	i
}
 8004046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004048:	e7fe      	b.n	8004048 <Error_Handler+0x8>
	...

0800404c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_MspInit+0x4c>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	4a0f      	ldr	r2, [pc, #60]	; (8004098 <HAL_MspInit+0x4c>)
 800405c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004060:	6453      	str	r3, [r2, #68]	; 0x44
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <HAL_MspInit+0x4c>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_MspInit+0x4c>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	4a08      	ldr	r2, [pc, #32]	; (8004098 <HAL_MspInit+0x4c>)
 8004078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407c:	6413      	str	r3, [r2, #64]	; 0x40
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_MspInit+0x4c>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800

0800409c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a17      	ldr	r2, [pc, #92]	; (8004118 <HAL_ADC_MspInit+0x7c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d127      	bne.n	800410e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	4b16      	ldr	r3, [pc, #88]	; (800411c <HAL_ADC_MspInit+0x80>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	4a15      	ldr	r2, [pc, #84]	; (800411c <HAL_ADC_MspInit+0x80>)
 80040c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040cc:	6453      	str	r3, [r2, #68]	; 0x44
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <HAL_ADC_MspInit+0x80>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_ADC_MspInit+0x80>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	4a0e      	ldr	r2, [pc, #56]	; (800411c <HAL_ADC_MspInit+0x80>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <HAL_ADC_MspInit+0x80>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040f6:	2301      	movs	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040fa:	2303      	movs	r3, #3
 80040fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004102:	f107 0314 	add.w	r3, r7, #20
 8004106:	4619      	mov	r1, r3
 8004108:	4805      	ldr	r0, [pc, #20]	; (8004120 <HAL_ADC_MspInit+0x84>)
 800410a:	f002 fa43 	bl	8006594 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800410e:	bf00      	nop
 8004110:	3728      	adds	r7, #40	; 0x28
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40012000 	.word	0x40012000
 800411c:	40023800 	.word	0x40023800
 8004120:	40020000 	.word	0x40020000

08004124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412c:	f107 0314 	add.w	r3, r7, #20
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <HAL_I2C_MspInit+0x84>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d12b      	bne.n	800419e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_I2C_MspInit+0x88>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	4a17      	ldr	r2, [pc, #92]	; (80041ac <HAL_I2C_MspInit+0x88>)
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	6313      	str	r3, [r2, #48]	; 0x30
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <HAL_I2C_MspInit+0x88>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004162:	23c0      	movs	r3, #192	; 0xc0
 8004164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004166:	2312      	movs	r3, #18
 8004168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800416a:	2301      	movs	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416e:	2303      	movs	r3, #3
 8004170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004172:	2304      	movs	r3, #4
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004176:	f107 0314 	add.w	r3, r7, #20
 800417a:	4619      	mov	r1, r3
 800417c:	480c      	ldr	r0, [pc, #48]	; (80041b0 <HAL_I2C_MspInit+0x8c>)
 800417e:	f002 fa09 	bl	8006594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_I2C_MspInit+0x88>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a08      	ldr	r2, [pc, #32]	; (80041ac <HAL_I2C_MspInit+0x88>)
 800418c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_I2C_MspInit+0x88>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800419e:	bf00      	nop
 80041a0:	3728      	adds	r7, #40	; 0x28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40005400 	.word	0x40005400
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40020400 	.word	0x40020400

080041b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <HAL_RTC_MspInit+0x24>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d102      	bne.n	80041cc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RTC_MspInit+0x28>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40002800 	.word	0x40002800
 80041dc:	42470e3c 	.word	0x42470e3c

080041e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e8:	f107 0314 	add.w	r3, r7, #20
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_SPI_MspInit+0x84>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d12b      	bne.n	800425a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	4b18      	ldr	r3, [pc, #96]	; (8004268 <HAL_SPI_MspInit+0x88>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <HAL_SPI_MspInit+0x88>)
 800420c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004210:	6453      	str	r3, [r2, #68]	; 0x44
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <HAL_SPI_MspInit+0x88>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <HAL_SPI_MspInit+0x88>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <HAL_SPI_MspInit+0x88>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_SPI_MspInit+0x88>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800423a:	23e0      	movs	r3, #224	; 0xe0
 800423c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423e:	2302      	movs	r3, #2
 8004240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004246:	2303      	movs	r3, #3
 8004248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800424a:	2305      	movs	r3, #5
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800424e:	f107 0314 	add.w	r3, r7, #20
 8004252:	4619      	mov	r1, r3
 8004254:	4805      	ldr	r0, [pc, #20]	; (800426c <HAL_SPI_MspInit+0x8c>)
 8004256:	f002 f99d 	bl	8006594 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800425a:	bf00      	nop
 800425c:	3728      	adds	r7, #40	; 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40013000 	.word	0x40013000
 8004268:	40023800 	.word	0x40023800
 800426c:	40020000 	.word	0x40020000

08004270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a34      	ldr	r2, [pc, #208]	; (8004350 <HAL_TIM_Base_MspInit+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10e      	bne.n	80042a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	4b33      	ldr	r3, [pc, #204]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	4a32      	ldr	r2, [pc, #200]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6453      	str	r3, [r2, #68]	; 0x44
 8004292:	4b30      	ldr	r3, [pc, #192]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800429e:	e052      	b.n	8004346 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d116      	bne.n	80042d8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	4b29      	ldr	r3, [pc, #164]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a28      	ldr	r2, [pc, #160]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ba:	4b26      	ldr	r3, [pc, #152]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2100      	movs	r1, #0
 80042ca:	201c      	movs	r0, #28
 80042cc:	f001 fd29 	bl	8005d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042d0:	201c      	movs	r0, #28
 80042d2:	f001 fd42 	bl	8005d5a <HAL_NVIC_EnableIRQ>
}
 80042d6:	e036      	b.n	8004346 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1e      	ldr	r2, [pc, #120]	; (8004358 <HAL_TIM_Base_MspInit+0xe8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d116      	bne.n	8004310 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a1a      	ldr	r2, [pc, #104]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	6413      	str	r3, [r2, #64]	; 0x40
 80042f2:	4b18      	ldr	r3, [pc, #96]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042fe:	2200      	movs	r2, #0
 8004300:	2100      	movs	r1, #0
 8004302:	201d      	movs	r0, #29
 8004304:	f001 fd0d 	bl	8005d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004308:	201d      	movs	r0, #29
 800430a:	f001 fd26 	bl	8005d5a <HAL_NVIC_EnableIRQ>
}
 800430e:	e01a      	b.n	8004346 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <HAL_TIM_Base_MspInit+0xec>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d115      	bne.n	8004346 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <HAL_TIM_Base_MspInit+0xe4>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004336:	2200      	movs	r2, #0
 8004338:	2100      	movs	r1, #0
 800433a:	201e      	movs	r0, #30
 800433c:	f001 fcf1 	bl	8005d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004340:	201e      	movs	r0, #30
 8004342:	f001 fd0a 	bl	8005d5a <HAL_NVIC_EnableIRQ>
}
 8004346:	bf00      	nop
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40023800 	.word	0x40023800
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800

08004360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 030c 	add.w	r3, r7, #12
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <HAL_TIM_MspPostInit+0x68>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d11e      	bne.n	80043c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_TIM_MspPostInit+0x6c>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <HAL_TIM_MspPostInit+0x6c>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6313      	str	r3, [r2, #48]	; 0x30
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <HAL_TIM_MspPostInit+0x6c>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800439e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80043a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a4:	2302      	movs	r3, #2
 80043a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043b0:	2301      	movs	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	4619      	mov	r1, r3
 80043ba:	4805      	ldr	r0, [pc, #20]	; (80043d0 <HAL_TIM_MspPostInit+0x70>)
 80043bc:	f002 f8ea 	bl	8006594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043c0:	bf00      	nop
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40020000 	.word	0x40020000

080043d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043dc:	f107 0314 	add.w	r3, r7, #20
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a4c      	ldr	r2, [pc, #304]	; (8004524 <HAL_UART_MspInit+0x150>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	f040 8091 	bne.w	800451a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	4b4a      	ldr	r3, [pc, #296]	; (8004528 <HAL_UART_MspInit+0x154>)
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	4a49      	ldr	r2, [pc, #292]	; (8004528 <HAL_UART_MspInit+0x154>)
 8004402:	f043 0310 	orr.w	r3, r3, #16
 8004406:	6453      	str	r3, [r2, #68]	; 0x44
 8004408:	4b47      	ldr	r3, [pc, #284]	; (8004528 <HAL_UART_MspInit+0x154>)
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	4b43      	ldr	r3, [pc, #268]	; (8004528 <HAL_UART_MspInit+0x154>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4a42      	ldr	r2, [pc, #264]	; (8004528 <HAL_UART_MspInit+0x154>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6313      	str	r3, [r2, #48]	; 0x30
 8004424:	4b40      	ldr	r3, [pc, #256]	; (8004528 <HAL_UART_MspInit+0x154>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004430:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004436:	2302      	movs	r3, #2
 8004438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800443e:	2303      	movs	r3, #3
 8004440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004442:	2307      	movs	r3, #7
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004446:	f107 0314 	add.w	r3, r7, #20
 800444a:	4619      	mov	r1, r3
 800444c:	4837      	ldr	r0, [pc, #220]	; (800452c <HAL_UART_MspInit+0x158>)
 800444e:	f002 f8a1 	bl	8006594 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004452:	4b37      	ldr	r3, [pc, #220]	; (8004530 <HAL_UART_MspInit+0x15c>)
 8004454:	4a37      	ldr	r2, [pc, #220]	; (8004534 <HAL_UART_MspInit+0x160>)
 8004456:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004458:	4b35      	ldr	r3, [pc, #212]	; (8004530 <HAL_UART_MspInit+0x15c>)
 800445a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800445e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004460:	4b33      	ldr	r3, [pc, #204]	; (8004530 <HAL_UART_MspInit+0x15c>)
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004466:	4b32      	ldr	r3, [pc, #200]	; (8004530 <HAL_UART_MspInit+0x15c>)
 8004468:	2200      	movs	r2, #0
 800446a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800446c:	4b30      	ldr	r3, [pc, #192]	; (8004530 <HAL_UART_MspInit+0x15c>)
 800446e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004472:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004474:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <HAL_UART_MspInit+0x15c>)
 8004476:	2200      	movs	r2, #0
 8004478:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800447a:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <HAL_UART_MspInit+0x15c>)
 800447c:	2200      	movs	r2, #0
 800447e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_UART_MspInit+0x15c>)
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004486:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <HAL_UART_MspInit+0x15c>)
 8004488:	2200      	movs	r2, #0
 800448a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800448c:	4b28      	ldr	r3, [pc, #160]	; (8004530 <HAL_UART_MspInit+0x15c>)
 800448e:	2200      	movs	r2, #0
 8004490:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004492:	4827      	ldr	r0, [pc, #156]	; (8004530 <HAL_UART_MspInit+0x15c>)
 8004494:	f001 fc7c 	bl	8005d90 <HAL_DMA_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800449e:	f7ff fdcf 	bl	8004040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a22      	ldr	r2, [pc, #136]	; (8004530 <HAL_UART_MspInit+0x15c>)
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
 80044a8:	4a21      	ldr	r2, [pc, #132]	; (8004530 <HAL_UART_MspInit+0x15c>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80044ae:	4b22      	ldr	r3, [pc, #136]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044b0:	4a22      	ldr	r2, [pc, #136]	; (800453c <HAL_UART_MspInit+0x168>)
 80044b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80044b4:	4b20      	ldr	r3, [pc, #128]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044bc:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044be:	2240      	movs	r2, #64	; 0x40
 80044c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044c2:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044c8:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044d6:	4b18      	ldr	r3, [pc, #96]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044d8:	2200      	movs	r2, #0
 80044da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80044dc:	4b16      	ldr	r3, [pc, #88]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044de:	2200      	movs	r2, #0
 80044e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044e8:	4b13      	ldr	r3, [pc, #76]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80044ee:	4812      	ldr	r0, [pc, #72]	; (8004538 <HAL_UART_MspInit+0x164>)
 80044f0:	f001 fc4e 	bl	8005d90 <HAL_DMA_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80044fa:	f7ff fda1 	bl	8004040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a0d      	ldr	r2, [pc, #52]	; (8004538 <HAL_UART_MspInit+0x164>)
 8004502:	635a      	str	r2, [r3, #52]	; 0x34
 8004504:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <HAL_UART_MspInit+0x164>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800450a:	2200      	movs	r2, #0
 800450c:	2100      	movs	r1, #0
 800450e:	2025      	movs	r0, #37	; 0x25
 8004510:	f001 fc07 	bl	8005d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004514:	2025      	movs	r0, #37	; 0x25
 8004516:	f001 fc20 	bl	8005d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800451a:	bf00      	nop
 800451c:	3728      	adds	r7, #40	; 0x28
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40011000 	.word	0x40011000
 8004528:	40023800 	.word	0x40023800
 800452c:	40020000 	.word	0x40020000
 8004530:	20003090 	.word	0x20003090
 8004534:	40026440 	.word	0x40026440
 8004538:	20002fe8 	.word	0x20002fe8
 800453c:	400264b8 	.word	0x400264b8

08004540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004544:	e7fe      	b.n	8004544 <NMI_Handler+0x4>

08004546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800454a:	e7fe      	b.n	800454a <HardFault_Handler+0x4>

0800454c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004550:	e7fe      	b.n	8004550 <MemManage_Handler+0x4>

08004552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004552:	b480      	push	{r7}
 8004554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004556:	e7fe      	b.n	8004556 <BusFault_Handler+0x4>

08004558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800455c:	e7fe      	b.n	800455c <UsageFault_Handler+0x4>

0800455e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800457e:	bf00      	nop
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800458c:	f000 ff54 	bl	8005438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}

08004594 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	float pulse = 8399;
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <EXTI0_IRQHandler+0x58>)
 800459c:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse);
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <EXTI0_IRQHandler+0x5c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80045a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045aa:	ee17 2a90 	vmov	r2, s15
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
	cambio--;
 80045b0:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <EXTI0_IRQHandler+0x60>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	4a0f      	ldr	r2, [pc, #60]	; (80045f4 <EXTI0_IRQHandler+0x60>)
 80045b8:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 80045ba:	480f      	ldr	r0, [pc, #60]	; (80045f8 <EXTI0_IRQHandler+0x64>)
 80045bc:	f004 fd00 	bl	8008fc0 <HAL_TIM_Base_Start_IT>
	if(cambio == -1){
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <EXTI0_IRQHandler+0x60>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d102      	bne.n	80045d0 <EXTI0_IRQHandler+0x3c>
		cambio = 4;
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <EXTI0_IRQHandler+0x60>)
 80045cc:	2204      	movs	r2, #4
 80045ce:	601a      	str	r2, [r3, #0]
	}
	Menu(cambio, 0);
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <EXTI0_IRQHandler+0x60>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fcaa 	bl	8004f30 <Menu>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80045dc:	2001      	movs	r0, #1
 80045de:	f002 f991 	bl	8006904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	46033c00 	.word	0x46033c00
 80045f0:	20003154 	.word	0x20003154
 80045f4:	20002c04 	.word	0x20002c04
 80045f8:	20002fa0 	.word	0x20002fa0

080045fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	float pulse = 8399;
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <EXTI1_IRQHandler+0x68>)
 8004604:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse);
 8004606:	4b18      	ldr	r3, [pc, #96]	; (8004668 <EXTI1_IRQHandler+0x6c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	edd7 7a00 	vldr	s15, [r7]
 800460e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004612:	ee17 2a90 	vmov	r2, s15
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
	cambio++;
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <EXTI1_IRQHandler+0x70>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	4a13      	ldr	r2, [pc, #76]	; (800466c <EXTI1_IRQHandler+0x70>)
 8004620:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 8004622:	4813      	ldr	r0, [pc, #76]	; (8004670 <EXTI1_IRQHandler+0x74>)
 8004624:	f004 fccc 	bl	8008fc0 <HAL_TIM_Base_Start_IT>
	if(cambio == 5){
 8004628:	4b10      	ldr	r3, [pc, #64]	; (800466c <EXTI1_IRQHandler+0x70>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b05      	cmp	r3, #5
 800462e:	d102      	bne.n	8004636 <EXTI1_IRQHandler+0x3a>
		cambio = 0;
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <EXTI1_IRQHandler+0x70>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
	}
	Menu(cambio, 0);
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <EXTI1_IRQHandler+0x70>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fc77 	bl	8004f30 <Menu>
  for(int i=0;i<500;i++){
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	e002      	b.n	800464e <EXTI1_IRQHandler+0x52>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3301      	adds	r3, #1
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004654:	dbf8      	blt.n	8004648 <EXTI1_IRQHandler+0x4c>
  }
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004656:	2002      	movs	r0, #2
 8004658:	f002 f954 	bl	8006904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	46033c00 	.word	0x46033c00
 8004668:	20003154 	.word	0x20003154
 800466c:	20002c04 	.word	0x20002c04
 8004670:	20002fa0 	.word	0x20002fa0

08004674 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	/*-----------------------Enter----------------
	 * ----------------------Enter----------------
	 * ----------------------Enter----------------
	 */
	fillScreen(BLACK);
 800467a:	2000      	movs	r0, #0
 800467c:	f7fc ff66 	bl	800154c <fillScreen>
	switch (cambio){
 8004680:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <EXTI3_IRQHandler+0x100>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3b01      	subs	r3, #1
 8004686:	2b03      	cmp	r3, #3
 8004688:	d86d      	bhi.n	8004766 <EXTI3_IRQHandler+0xf2>
 800468a:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <EXTI3_IRQHandler+0x1c>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046a1 	.word	0x080046a1
 8004694:	080046a9 	.word	0x080046a9
 8004698:	080046b1 	.word	0x080046b1
 800469c:	080046c3 	.word	0x080046c3
		case(1):
			HAL_TIM_Base_Start_IT(&htim2);
 80046a0:	4835      	ldr	r0, [pc, #212]	; (8004778 <EXTI3_IRQHandler+0x104>)
 80046a2:	f004 fc8d 	bl	8008fc0 <HAL_TIM_Base_Start_IT>
			break;
 80046a6:	e05e      	b.n	8004766 <EXTI3_IRQHandler+0xf2>
		case(2):
			HAL_TIM_Base_Start_IT(&htim2);
 80046a8:	4833      	ldr	r0, [pc, #204]	; (8004778 <EXTI3_IRQHandler+0x104>)
 80046aa:	f004 fc89 	bl	8008fc0 <HAL_TIM_Base_Start_IT>
			break;
 80046ae:	e05a      	b.n	8004766 <EXTI3_IRQHandler+0xf2>
		case(3):
			MPU9250_CalibracionAG();
 80046b0:	f7fd fc7a 	bl	8001fa8 <MPU9250_CalibracionAG>
			Menu(cambio,0);
 80046b4:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <EXTI3_IRQHandler+0x100>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fc38 	bl	8004f30 <Menu>
			break;
 80046c0:	e051      	b.n	8004766 <EXTI3_IRQHandler+0xf2>
		case(4):
			MPU9250_CalibracionMag();
 80046c2:	f7fd ffc5 	bl	8002650 <MPU9250_CalibracionMag>
			if(VarMag != 2){
 80046c6:	4b2d      	ldr	r3, [pc, #180]	; (800477c <EXTI3_IRQHandler+0x108>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d038      	beq.n	8004740 <EXTI3_IRQHandler+0xcc>
				fillScreen(BLACK);
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7fc ff3c 	bl	800154c <fillScreen>
				sprintf(Display_Buff,"Continue?");
 80046d4:	492a      	ldr	r1, [pc, #168]	; (8004780 <EXTI3_IRQHandler+0x10c>)
 80046d6:	482b      	ldr	r0, [pc, #172]	; (8004784 <EXTI3_IRQHandler+0x110>)
 80046d8:	f007 fae0 	bl	800bc9c <siprintf>
				ST7735_WriteString(15 ,30 ,Display_Buff, Font_11x18, WHITE,BLACK);
 80046dc:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <EXTI3_IRQHandler+0x114>)
 80046de:	2200      	movs	r2, #0
 80046e0:	9202      	str	r2, [sp, #8]
 80046e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046e6:	9201      	str	r2, [sp, #4]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	9200      	str	r2, [sp, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a25      	ldr	r2, [pc, #148]	; (8004784 <EXTI3_IRQHandler+0x110>)
 80046f0:	211e      	movs	r1, #30
 80046f2:	200f      	movs	r0, #15
 80046f4:	f7fe fc12 	bl	8002f1c <ST7735_WriteString>
				sprintf(Display_Buff,"Enter: Si");
 80046f8:	4924      	ldr	r1, [pc, #144]	; (800478c <EXTI3_IRQHandler+0x118>)
 80046fa:	4822      	ldr	r0, [pc, #136]	; (8004784 <EXTI3_IRQHandler+0x110>)
 80046fc:	f007 face 	bl	800bc9c <siprintf>
				ST7735_WriteString(15 ,50 ,Display_Buff, Font_11x18, WHITE,BLACK);
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <EXTI3_IRQHandler+0x114>)
 8004702:	2200      	movs	r2, #0
 8004704:	9202      	str	r2, [sp, #8]
 8004706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800470a:	9201      	str	r2, [sp, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	9200      	str	r2, [sp, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <EXTI3_IRQHandler+0x110>)
 8004714:	2132      	movs	r1, #50	; 0x32
 8004716:	200f      	movs	r0, #15
 8004718:	f7fe fc00 	bl	8002f1c <ST7735_WriteString>
				sprintf(Display_Buff,"Back: NO");
 800471c:	491c      	ldr	r1, [pc, #112]	; (8004790 <EXTI3_IRQHandler+0x11c>)
 800471e:	4819      	ldr	r0, [pc, #100]	; (8004784 <EXTI3_IRQHandler+0x110>)
 8004720:	f007 fabc 	bl	800bc9c <siprintf>
				ST7735_WriteString(15 ,70 ,Display_Buff, Font_11x18, WHITE,BLACK);
 8004724:	4b18      	ldr	r3, [pc, #96]	; (8004788 <EXTI3_IRQHandler+0x114>)
 8004726:	2200      	movs	r2, #0
 8004728:	9202      	str	r2, [sp, #8]
 800472a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800472e:	9201      	str	r2, [sp, #4]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	9200      	str	r2, [sp, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a13      	ldr	r2, [pc, #76]	; (8004784 <EXTI3_IRQHandler+0x110>)
 8004738:	2146      	movs	r1, #70	; 0x46
 800473a:	200f      	movs	r0, #15
 800473c:	f7fe fbee 	bl	8002f1c <ST7735_WriteString>
			}
			VarMag++;
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <EXTI3_IRQHandler+0x108>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3301      	adds	r3, #1
 8004746:	4a0d      	ldr	r2, [pc, #52]	; (800477c <EXTI3_IRQHandler+0x108>)
 8004748:	6013      	str	r3, [r2, #0]
			if(VarMag > 2){
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <EXTI3_IRQHandler+0x108>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b02      	cmp	r3, #2
 8004750:	dd08      	ble.n	8004764 <EXTI3_IRQHandler+0xf0>
				VarMag = 0;
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <EXTI3_IRQHandler+0x108>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
				Menu(cambio,0);
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <EXTI3_IRQHandler+0x100>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fbe6 	bl	8004f30 <Menu>
			}
			break;
 8004764:	bf00      	nop
	  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004766:	2008      	movs	r0, #8
 8004768:	f002 f8cc 	bl	8006904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20002c04 	.word	0x20002c04
 8004778:	200031f4 	.word	0x200031f4
 800477c:	20002e84 	.word	0x20002e84
 8004780:	0800f960 	.word	0x0800f960
 8004784:	20002c24 	.word	0x20002c24
 8004788:	200029d8 	.word	0x200029d8
 800478c:	0800f96c 	.word	0x0800f96c
 8004790:	0800f978 	.word	0x0800f978

08004794 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	/*-----------------------Back----------------
	 * ----------------------Back----------------
	 * ----------------------Back----------------
	 */
	HAL_TIM_Base_Stop_IT(&htim2);
 8004798:	4806      	ldr	r0, [pc, #24]	; (80047b4 <EXTI4_IRQHandler+0x20>)
 800479a:	f004 fc73 	bl	8009084 <HAL_TIM_Base_Stop_IT>
	Menu(cambio, 0);
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <EXTI4_IRQHandler+0x24>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fbc3 	bl	8004f30 <Menu>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80047aa:	2010      	movs	r0, #16
 80047ac:	f002 f8aa 	bl	8006904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80047b0:	bf00      	nop
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	200031f4 	.word	0x200031f4
 80047b8:	20002c04 	.word	0x20002c04
 80047bc:	00000000 	.word	0x00000000

080047c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c4:	b09a      	sub	sp, #104	; 0x68
 80047c6:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(cambio == 1){
 80047c8:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <TIM2_IRQHandler+0x174>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 80cf 	bne.w	8004970 <TIM2_IRQHandler+0x1b0>
		MPU9250_Read_Accel();
 80047d2:	f7fd f849 	bl	8001868 <MPU9250_Read_Accel>
		MPU9250_Read_Gyro();
 80047d6:	f7fd f905 	bl	80019e4 <MPU9250_Read_Gyro>
		MPU9250_Read_Mag();
 80047da:	f7fd f9cd 	bl	8001b78 <MPU9250_Read_Mag>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80047de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047e2:	4855      	ldr	r0, [pc, #340]	; (8004938 <TIM2_IRQHandler+0x178>)
 80047e4:	f002 f873 	bl	80068ce <HAL_GPIO_TogglePin>
		DisplayDatosGyro (Gx,Gy,Gz,0,18);
 80047e8:	4b54      	ldr	r3, [pc, #336]	; (800493c <TIM2_IRQHandler+0x17c>)
 80047ea:	edd3 7a00 	vldr	s15, [r3]
 80047ee:	4b54      	ldr	r3, [pc, #336]	; (8004940 <TIM2_IRQHandler+0x180>)
 80047f0:	ed93 7a00 	vldr	s14, [r3]
 80047f4:	4b53      	ldr	r3, [pc, #332]	; (8004944 <TIM2_IRQHandler+0x184>)
 80047f6:	edd3 6a00 	vldr	s13, [r3]
 80047fa:	2112      	movs	r1, #18
 80047fc:	2000      	movs	r0, #0
 80047fe:	eeb0 1a66 	vmov.f32	s2, s13
 8004802:	eef0 0a47 	vmov.f32	s1, s14
 8004806:	eeb0 0a67 	vmov.f32	s0, s15
 800480a:	f000 fa5f 	bl	8004ccc <DisplayDatosGyro>
		DisplayDatosAccel (Ax,Ay,Az,0,50);
 800480e:	4b4e      	ldr	r3, [pc, #312]	; (8004948 <TIM2_IRQHandler+0x188>)
 8004810:	edd3 7a00 	vldr	s15, [r3]
 8004814:	4b4d      	ldr	r3, [pc, #308]	; (800494c <TIM2_IRQHandler+0x18c>)
 8004816:	ed93 7a00 	vldr	s14, [r3]
 800481a:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <TIM2_IRQHandler+0x190>)
 800481c:	edd3 6a00 	vldr	s13, [r3]
 8004820:	2132      	movs	r1, #50	; 0x32
 8004822:	2000      	movs	r0, #0
 8004824:	eeb0 1a66 	vmov.f32	s2, s13
 8004828:	eef0 0a47 	vmov.f32	s1, s14
 800482c:	eeb0 0a67 	vmov.f32	s0, s15
 8004830:	f000 fab2 	bl	8004d98 <DisplayDatosAccel>
		DisplayDatosMag (Mgx,Mgy,Mgz,0,82);
 8004834:	4b47      	ldr	r3, [pc, #284]	; (8004954 <TIM2_IRQHandler+0x194>)
 8004836:	edd3 7a00 	vldr	s15, [r3]
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <TIM2_IRQHandler+0x198>)
 800483c:	ed93 7a00 	vldr	s14, [r3]
 8004840:	4b46      	ldr	r3, [pc, #280]	; (800495c <TIM2_IRQHandler+0x19c>)
 8004842:	edd3 6a00 	vldr	s13, [r3]
 8004846:	2152      	movs	r1, #82	; 0x52
 8004848:	2000      	movs	r0, #0
 800484a:	eeb0 1a66 	vmov.f32	s2, s13
 800484e:	eef0 0a47 	vmov.f32	s1, s14
 8004852:	eeb0 0a67 	vmov.f32	s0, s15
 8004856:	f000 fb05 	bl	8004e64 <DisplayDatosMag>
		if (iniSendUart == 1){
 800485a:	4b41      	ldr	r3, [pc, #260]	; (8004960 <TIM2_IRQHandler+0x1a0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	f040 80d6 	bne.w	8004a10 <TIM2_IRQHandler+0x250>
			sprintf(buff,"%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",Gx,Gy,Gz,Ax,Ay,Az,Mgx,Mgy,Mgz);
 8004864:	4b35      	ldr	r3, [pc, #212]	; (800493c <TIM2_IRQHandler+0x17c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7fb fe75 	bl	8000558 <__aeabi_f2d>
 800486e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8004872:	4b33      	ldr	r3, [pc, #204]	; (8004940 <TIM2_IRQHandler+0x180>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb fe6e 	bl	8000558 <__aeabi_f2d>
 800487c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004880:	4b30      	ldr	r3, [pc, #192]	; (8004944 <TIM2_IRQHandler+0x184>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f7fb fe67 	bl	8000558 <__aeabi_f2d>
 800488a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800488e:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <TIM2_IRQHandler+0x188>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fe60 	bl	8000558 <__aeabi_f2d>
 8004898:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800489c:	4b2b      	ldr	r3, [pc, #172]	; (800494c <TIM2_IRQHandler+0x18c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fb fe59 	bl	8000558 <__aeabi_f2d>
 80048a6:	e9c7 0100 	strd	r0, r1, [r7]
 80048aa:	4b29      	ldr	r3, [pc, #164]	; (8004950 <TIM2_IRQHandler+0x190>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb fe52 	bl	8000558 <__aeabi_f2d>
 80048b4:	4682      	mov	sl, r0
 80048b6:	468b      	mov	fp, r1
 80048b8:	4b26      	ldr	r3, [pc, #152]	; (8004954 <TIM2_IRQHandler+0x194>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fb fe4b 	bl	8000558 <__aeabi_f2d>
 80048c2:	4680      	mov	r8, r0
 80048c4:	4689      	mov	r9, r1
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <TIM2_IRQHandler+0x198>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fb fe44 	bl	8000558 <__aeabi_f2d>
 80048d0:	4604      	mov	r4, r0
 80048d2:	460d      	mov	r5, r1
 80048d4:	4b21      	ldr	r3, [pc, #132]	; (800495c <TIM2_IRQHandler+0x19c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fb fe3d 	bl	8000558 <__aeabi_f2d>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80048e6:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 80048ea:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80048ee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80048f2:	ed97 7b00 	vldr	d7, [r7]
 80048f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80048fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80048fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004902:	ed97 7b04 	vldr	d7, [r7, #16]
 8004906:	ed8d 7b02 	vstr	d7, [sp, #8]
 800490a:	ed97 7b06 	vldr	d7, [r7, #24]
 800490e:	ed8d 7b00 	vstr	d7, [sp]
 8004912:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004916:	4913      	ldr	r1, [pc, #76]	; (8004964 <TIM2_IRQHandler+0x1a4>)
 8004918:	4813      	ldr	r0, [pc, #76]	; (8004968 <TIM2_IRQHandler+0x1a8>)
 800491a:	f007 f9bf 	bl	800bc9c <siprintf>
			HAL_UART_Transmit(&huart1,buff,strlen(buff),10);
 800491e:	4812      	ldr	r0, [pc, #72]	; (8004968 <TIM2_IRQHandler+0x1a8>)
 8004920:	f7fb fc5e 	bl	80001e0 <strlen>
 8004924:	4603      	mov	r3, r0
 8004926:	b29a      	uxth	r2, r3
 8004928:	230a      	movs	r3, #10
 800492a:	490f      	ldr	r1, [pc, #60]	; (8004968 <TIM2_IRQHandler+0x1a8>)
 800492c:	480f      	ldr	r0, [pc, #60]	; (800496c <TIM2_IRQHandler+0x1ac>)
 800492e:	f005 fbee 	bl	800a10e <HAL_UART_Transmit>
 8004932:	e06d      	b.n	8004a10 <TIM2_IRQHandler+0x250>
 8004934:	20002c04 	.word	0x20002c04
 8004938:	40020800 	.word	0x40020800
 800493c:	20002c60 	.word	0x20002c60
 8004940:	20002e7c 	.word	0x20002e7c
 8004944:	20002ed8 	.word	0x20002ed8
 8004948:	20002e90 	.word	0x20002e90
 800494c:	20002e74 	.word	0x20002e74
 8004950:	20002e9c 	.word	0x20002e9c
 8004954:	20002e94 	.word	0x20002e94
 8004958:	20002e8c 	.word	0x20002e8c
 800495c:	20002e78 	.word	0x20002e78
 8004960:	20002c00 	.word	0x20002c00
 8004964:	0800f984 	.word	0x0800f984
 8004968:	20002c6c 	.word	0x20002c6c
 800496c:	200030f0 	.word	0x200030f0
		}
	}
	else if( cambio == 2){
 8004970:	4b5d      	ldr	r3, [pc, #372]	; (8004ae8 <TIM2_IRQHandler+0x328>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d14b      	bne.n	8004a10 <TIM2_IRQHandler+0x250>
		MPU9250_LectureWithFilter();
 8004978:	f7fd f9aa 	bl	8001cd0 <MPU9250_LectureWithFilter>
		sprintf(buff,"%f / %f / %f / %f / %f / %f ",MPU9250Filtered[0],MPU9250Filtered[1],MPU9250Filtered[2],MPU9250Filtered[3],MPU9250Filtered[4], MPU9250Filtered[5]);
 800497c:	4b5b      	ldr	r3, [pc, #364]	; (8004aec <TIM2_IRQHandler+0x32c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f7fb fde9 	bl	8000558 <__aeabi_f2d>
 8004986:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800498a:	4b58      	ldr	r3, [pc, #352]	; (8004aec <TIM2_IRQHandler+0x32c>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fde2 	bl	8000558 <__aeabi_f2d>
 8004994:	4604      	mov	r4, r0
 8004996:	460d      	mov	r5, r1
 8004998:	4b54      	ldr	r3, [pc, #336]	; (8004aec <TIM2_IRQHandler+0x32c>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4618      	mov	r0, r3
 800499e:	f7fb fddb 	bl	8000558 <__aeabi_f2d>
 80049a2:	4680      	mov	r8, r0
 80049a4:	4689      	mov	r9, r1
 80049a6:	4b51      	ldr	r3, [pc, #324]	; (8004aec <TIM2_IRQHandler+0x32c>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fb fdd4 	bl	8000558 <__aeabi_f2d>
 80049b0:	4682      	mov	sl, r0
 80049b2:	468b      	mov	fp, r1
 80049b4:	4b4d      	ldr	r3, [pc, #308]	; (8004aec <TIM2_IRQHandler+0x32c>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fb fdcd 	bl	8000558 <__aeabi_f2d>
 80049be:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80049c2:	4b4a      	ldr	r3, [pc, #296]	; (8004aec <TIM2_IRQHandler+0x32c>)
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fb fdc6 	bl	8000558 <__aeabi_f2d>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80049d8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80049dc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80049e0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80049e4:	e9cd 4500 	strd	r4, r5, [sp]
 80049e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ec:	4940      	ldr	r1, [pc, #256]	; (8004af0 <TIM2_IRQHandler+0x330>)
 80049ee:	4841      	ldr	r0, [pc, #260]	; (8004af4 <TIM2_IRQHandler+0x334>)
 80049f0:	f007 f954 	bl	800bc9c <siprintf>
		ST7735_WriteString(0,20,buff,Font_7x10, WHITE,BLACK);
 80049f4:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <TIM2_IRQHandler+0x338>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	9202      	str	r2, [sp, #8]
 80049fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049fe:	9201      	str	r2, [sp, #4]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	9200      	str	r2, [sp, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a3b      	ldr	r2, [pc, #236]	; (8004af4 <TIM2_IRQHandler+0x334>)
 8004a08:	2114      	movs	r1, #20
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	f7fe fa86 	bl	8002f1c <ST7735_WriteString>
	}
	get_time();
 8004a10:	f7ff f9b4 	bl	8003d7c <get_time>
	MPU9250_Read_Temp();
 8004a14:	f7fd f864 	bl	8001ae0 <MPU9250_Read_Temp>
	HAL_ADC_Start(&hadc1);
 8004a18:	4838      	ldr	r0, [pc, #224]	; (8004afc <TIM2_IRQHandler+0x33c>)
 8004a1a:	f000 fd95 	bl	8005548 <HAL_ADC_Start>
	adc = (HAL_ADC_GetValue(&hadc1)/4096.0*5.0)/3.7*100;
 8004a1e:	4837      	ldr	r0, [pc, #220]	; (8004afc <TIM2_IRQHandler+0x33c>)
 8004a20:	f000 fe79 	bl	8005716 <HAL_ADC_GetValue>
 8004a24:	4603      	mov	r3, r0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fb fd74 	bl	8000514 <__aeabi_ui2d>
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <TIM2_IRQHandler+0x340>)
 8004a32:	f7fb ff13 	bl	800085c <__aeabi_ddiv>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <TIM2_IRQHandler+0x344>)
 8004a44:	f7fb fde0 	bl	8000608 <__aeabi_dmul>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	a323      	add	r3, pc, #140	; (adr r3, 8004ae0 <TIM2_IRQHandler+0x320>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb ff01 	bl	800085c <__aeabi_ddiv>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <TIM2_IRQHandler+0x348>)
 8004a68:	f7fb fdce 	bl	8000608 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fc f8c0 	bl	8000bf8 <__aeabi_d2f>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4a24      	ldr	r2, [pc, #144]	; (8004b0c <TIM2_IRQHandler+0x34c>)
 8004a7c:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8004a7e:	481f      	ldr	r0, [pc, #124]	; (8004afc <TIM2_IRQHandler+0x33c>)
 8004a80:	f000 fe16 	bl	80056b0 <HAL_ADC_Stop>
	sprintf(buff,"/%.1fC/%0.1fB",Temp,adc);
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <TIM2_IRQHandler+0x350>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fb fd65 	bl	8000558 <__aeabi_f2d>
 8004a8e:	4604      	mov	r4, r0
 8004a90:	460d      	mov	r5, r1
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <TIM2_IRQHandler+0x34c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fb fd5e 	bl	8000558 <__aeabi_f2d>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	462b      	mov	r3, r5
 8004aa8:	491a      	ldr	r1, [pc, #104]	; (8004b14 <TIM2_IRQHandler+0x354>)
 8004aaa:	4812      	ldr	r0, [pc, #72]	; (8004af4 <TIM2_IRQHandler+0x334>)
 8004aac:	f007 f8f6 	bl	800bc9c <siprintf>
	ST7735_WriteString(35,0,buff,Font_7x10, WHITE,BLACK);
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <TIM2_IRQHandler+0x338>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	9202      	str	r2, [sp, #8]
 8004ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aba:	9201      	str	r2, [sp, #4]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	9200      	str	r2, [sp, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a0c      	ldr	r2, [pc, #48]	; (8004af4 <TIM2_IRQHandler+0x334>)
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	2023      	movs	r0, #35	; 0x23
 8004ac8:	f7fe fa28 	bl	8002f1c <ST7735_WriteString>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004acc:	4812      	ldr	r0, [pc, #72]	; (8004b18 <TIM2_IRQHandler+0x358>)
 8004ace:	f004 fc75 	bl	80093bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	3728      	adds	r7, #40	; 0x28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004adc:	f3af 8000 	nop.w
 8004ae0:	9999999a 	.word	0x9999999a
 8004ae4:	400d9999 	.word	0x400d9999
 8004ae8:	20002c04 	.word	0x20002c04
 8004aec:	20002eac 	.word	0x20002eac
 8004af0:	0800f9bc 	.word	0x0800f9bc
 8004af4:	20002c6c 	.word	0x20002c6c
 8004af8:	200029d0 	.word	0x200029d0
 8004afc:	20003048 	.word	0x20003048
 8004b00:	40b00000 	.word	0x40b00000
 8004b04:	40140000 	.word	0x40140000
 8004b08:	40590000 	.word	0x40590000
 8004b0c:	20002c14 	.word	0x20002c14
 8004b10:	20002e5c 	.word	0x20002e5c
 8004b14:	0800f9dc 	.word	0x0800f9dc
 8004b18:	200031f4 	.word	0x200031f4

08004b1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	float pulse = 8399;
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <TIM3_IRQHandler+0x5c>)
 8004b24:	607b      	str	r3, [r7, #4]
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8004b26:	2100      	movs	r1, #0
 8004b28:	4814      	ldr	r0, [pc, #80]	; (8004b7c <TIM3_IRQHandler+0x60>)
 8004b2a:	f004 fb33 	bl	8009194 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <TIM3_IRQHandler+0x60>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b3a:	ee17 2a90 	vmov	r2, s15
 8004b3e:	635a      	str	r2, [r3, #52]	; 0x34
	if (VarMot > 4){
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <TIM3_IRQHandler+0x64>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	dd0a      	ble.n	8004b5e <TIM3_IRQHandler+0x42>
		HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8004b48:	2100      	movs	r1, #0
 8004b4a:	480c      	ldr	r0, [pc, #48]	; (8004b7c <TIM3_IRQHandler+0x60>)
 8004b4c:	f004 fbd2 	bl	80092f4 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8004b50:	480c      	ldr	r0, [pc, #48]	; (8004b84 <TIM3_IRQHandler+0x68>)
 8004b52:	f004 fa97 	bl	8009084 <HAL_TIM_Base_Stop_IT>
		VarMot = 0;
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <TIM3_IRQHandler+0x64>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e004      	b.n	8004b68 <TIM3_IRQHandler+0x4c>
	}
	else{
		VarMot++;
 8004b5e:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <TIM3_IRQHandler+0x64>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a06      	ldr	r2, [pc, #24]	; (8004b80 <TIM3_IRQHandler+0x64>)
 8004b66:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004b68:	4806      	ldr	r0, [pc, #24]	; (8004b84 <TIM3_IRQHandler+0x68>)
 8004b6a:	f004 fc27 	bl	80093bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	46033c00 	.word	0x46033c00
 8004b7c:	20003154 	.word	0x20003154
 8004b80:	20002c08 	.word	0x20002c08
 8004b84:	20002fa0 	.word	0x20002fa0

08004b88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (VarSleep > 60 && VarSleep < 80){
 8004b8e:	4b38      	ldr	r3, [pc, #224]	; (8004c70 <TIM4_IRQHandler+0xe8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b3c      	cmp	r3, #60	; 0x3c
 8004b94:	dd4c      	ble.n	8004c30 <TIM4_IRQHandler+0xa8>
 8004b96:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <TIM4_IRQHandler+0xe8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b4f      	cmp	r3, #79	; 0x4f
 8004b9c:	dc48      	bgt.n	8004c30 <TIM4_IRQHandler+0xa8>
		if(Var == 0){
 8004b9e:	4b35      	ldr	r3, [pc, #212]	; (8004c74 <TIM4_IRQHandler+0xec>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d13e      	bne.n	8004c24 <TIM4_IRQHandler+0x9c>
			fillScreen(BLACK);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fc fcd0 	bl	800154c <fillScreen>
			for(int i=0;i<64;i++){
 8004bac:	2300      	movs	r3, #0
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	e01e      	b.n	8004bf0 <TIM4_IRQHandler+0x68>
			  for(int j=0;j<64;j++){
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	e015      	b.n	8004be4 <TIM4_IRQHandler+0x5c>
				 ST7735_DrawPixel(32+i, 50+j, emoji[j][i]);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3320      	adds	r3, #32
 8004bbe:	b298      	uxth	r0, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3332      	adds	r3, #50	; 0x32
 8004bc6:	b299      	uxth	r1, r3
 8004bc8:	4c2b      	ldr	r4, [pc, #172]	; (8004c78 <TIM4_IRQHandler+0xf0>)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	019a      	lsls	r2, r3, #6
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f7fe f8e9 	bl	8002db0 <ST7735_DrawPixel>
			  for(int j=0;j<64;j++){
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	3301      	adds	r3, #1
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b3f      	cmp	r3, #63	; 0x3f
 8004be8:	dde6      	ble.n	8004bb8 <TIM4_IRQHandler+0x30>
			for(int i=0;i<64;i++){
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3301      	adds	r3, #1
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b3f      	cmp	r3, #63	; 0x3f
 8004bf4:	dddd      	ble.n	8004bb2 <TIM4_IRQHandler+0x2a>
			  }
			}
			sprintf(Display_Buff," Sleep... ");
 8004bf6:	4921      	ldr	r1, [pc, #132]	; (8004c7c <TIM4_IRQHandler+0xf4>)
 8004bf8:	4821      	ldr	r0, [pc, #132]	; (8004c80 <TIM4_IRQHandler+0xf8>)
 8004bfa:	f007 f84f 	bl	800bc9c <siprintf>
			ST7735_WriteString(40 ,115,Display_Buff, Font_7x10, WHITE,BLACK);
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <TIM4_IRQHandler+0xfc>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	9202      	str	r2, [sp, #8]
 8004c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c08:	9201      	str	r2, [sp, #4]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	9200      	str	r2, [sp, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <TIM4_IRQHandler+0xf8>)
 8004c12:	2173      	movs	r1, #115	; 0x73
 8004c14:	2028      	movs	r0, #40	; 0x28
 8004c16:	f7fe f981 	bl	8002f1c <ST7735_WriteString>
			Var++;
 8004c1a:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <TIM4_IRQHandler+0xec>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	4a14      	ldr	r2, [pc, #80]	; (8004c74 <TIM4_IRQHandler+0xec>)
 8004c22:	6013      	str	r3, [r2, #0]
		}
		VarSleep++;
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <TIM4_IRQHandler+0xe8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	4a11      	ldr	r2, [pc, #68]	; (8004c70 <TIM4_IRQHandler+0xe8>)
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e016      	b.n	8004c5e <TIM4_IRQHandler+0xd6>
	}
	else if(VarSleep > 80){
 8004c30:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <TIM4_IRQHandler+0xe8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b50      	cmp	r3, #80	; 0x50
 8004c36:	dd0d      	ble.n	8004c54 <TIM4_IRQHandler+0xcc>
		HAL_TIM_Base_Stop_IT(&htim4);
 8004c38:	4813      	ldr	r0, [pc, #76]	; (8004c88 <TIM4_IRQHandler+0x100>)
 8004c3a:	f004 fa23 	bl	8009084 <HAL_TIM_Base_Stop_IT>
		VarSleep = 0;
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <TIM4_IRQHandler+0xe8>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8004c44:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <TIM4_IRQHandler+0x104>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40
		Var = 0;
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <TIM4_IRQHandler+0xec>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e004      	b.n	8004c5e <TIM4_IRQHandler+0xd6>
	}
	else{
		VarSleep++;
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <TIM4_IRQHandler+0xe8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	4a05      	ldr	r2, [pc, #20]	; (8004c70 <TIM4_IRQHandler+0xe8>)
 8004c5c:	6013      	str	r3, [r2, #0]
	}
	Clock_Ecci();
 8004c5e:	f7ff f8f3 	bl	8003e48 <Clock_Ecci>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004c62:	4809      	ldr	r0, [pc, #36]	; (8004c88 <TIM4_IRQHandler+0x100>)
 8004c64:	f004 fbaa 	bl	80093bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd90      	pop	{r4, r7, pc}
 8004c70:	20002c0c 	.word	0x20002c0c
 8004c74:	20002c10 	.word	0x20002c10
 8004c78:	0801fbdc 	.word	0x0801fbdc
 8004c7c:	0800f9ec 	.word	0x0800f9ec
 8004c80:	20002c24 	.word	0x20002c24
 8004c84:	200029d0 	.word	0x200029d0
 8004c88:	20002f00 	.word	0x20002f00
 8004c8c:	20003154 	.word	0x20003154

08004c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c94:	4802      	ldr	r0, [pc, #8]	; (8004ca0 <USART1_IRQHandler+0x10>)
 8004c96:	f005 fafd 	bl	800a294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200030f0 	.word	0x200030f0

08004ca4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004ca8:	4802      	ldr	r0, [pc, #8]	; (8004cb4 <DMA2_Stream2_IRQHandler+0x10>)
 8004caa:	f001 fa09 	bl	80060c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20003090 	.word	0x20003090

08004cb8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004cbc:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <DMA2_Stream7_IRQHandler+0x10>)
 8004cbe:	f001 f9ff 	bl	80060c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20002fe8 	.word	0x20002fe8

08004ccc <DisplayDatosGyro>:

/* USER CODE BEGIN 1 */
void DisplayDatosGyro (float Gyrox, float Gyroy, float Gyroz,uint16_t x, uint16_t y){
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af04      	add	r7, sp, #16
 8004cd2:	ed87 0a03 	vstr	s0, [r7, #12]
 8004cd6:	edc7 0a02 	vstr	s1, [r7, #8]
 8004cda:	ed87 1a01 	vstr	s2, [r7, #4]
 8004cde:	4603      	mov	r3, r0
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	807b      	strh	r3, [r7, #2]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	803b      	strh	r3, [r7, #0]
	sprintf(Display_Buff,"Gx=%.3f deg/s   ",Gyrox);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7fb fc35 	bl	8000558 <__aeabi_f2d>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4924      	ldr	r1, [pc, #144]	; (8004d84 <DisplayDatosGyro+0xb8>)
 8004cf4:	4824      	ldr	r0, [pc, #144]	; (8004d88 <DisplayDatosGyro+0xbc>)
 8004cf6:	f006 ffd1 	bl	800bc9c <siprintf>
	ST7735_WriteString(x,y,Display_Buff, Font_7x10, WHITE,BLACK);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <DisplayDatosGyro+0xc0>)
 8004cfc:	8839      	ldrh	r1, [r7, #0]
 8004cfe:	8878      	ldrh	r0, [r7, #2]
 8004d00:	2200      	movs	r2, #0
 8004d02:	9202      	str	r2, [sp, #8]
 8004d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d08:	9201      	str	r2, [sp, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	9200      	str	r2, [sp, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <DisplayDatosGyro+0xbc>)
 8004d12:	f7fe f903 	bl	8002f1c <ST7735_WriteString>
	sprintf(Display_Buff,"GY=%.3f deg/s   ",Gyroy);
 8004d16:	68b8      	ldr	r0, [r7, #8]
 8004d18:	f7fb fc1e 	bl	8000558 <__aeabi_f2d>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	491b      	ldr	r1, [pc, #108]	; (8004d90 <DisplayDatosGyro+0xc4>)
 8004d22:	4819      	ldr	r0, [pc, #100]	; (8004d88 <DisplayDatosGyro+0xbc>)
 8004d24:	f006 ffba 	bl	800bc9c <siprintf>
	ST7735_WriteString(x,y+10,Display_Buff, Font_7x10, WHITE,BLACK);
 8004d28:	883b      	ldrh	r3, [r7, #0]
 8004d2a:	330a      	adds	r3, #10
 8004d2c:	b299      	uxth	r1, r3
 8004d2e:	4b17      	ldr	r3, [pc, #92]	; (8004d8c <DisplayDatosGyro+0xc0>)
 8004d30:	8878      	ldrh	r0, [r7, #2]
 8004d32:	2200      	movs	r2, #0
 8004d34:	9202      	str	r2, [sp, #8]
 8004d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d3a:	9201      	str	r2, [sp, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	9200      	str	r2, [sp, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a11      	ldr	r2, [pc, #68]	; (8004d88 <DisplayDatosGyro+0xbc>)
 8004d44:	f7fe f8ea 	bl	8002f1c <ST7735_WriteString>
	sprintf(Display_Buff,"GZ=%.3f deg/s   ",Gyroz);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fb fc05 	bl	8000558 <__aeabi_f2d>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4910      	ldr	r1, [pc, #64]	; (8004d94 <DisplayDatosGyro+0xc8>)
 8004d54:	480c      	ldr	r0, [pc, #48]	; (8004d88 <DisplayDatosGyro+0xbc>)
 8004d56:	f006 ffa1 	bl	800bc9c <siprintf>
	ST7735_WriteString(x,y+20,Display_Buff, Font_7x10, WHITE,BLACK);
 8004d5a:	883b      	ldrh	r3, [r7, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	b299      	uxth	r1, r3
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <DisplayDatosGyro+0xc0>)
 8004d62:	8878      	ldrh	r0, [r7, #2]
 8004d64:	2200      	movs	r2, #0
 8004d66:	9202      	str	r2, [sp, #8]
 8004d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d6c:	9201      	str	r2, [sp, #4]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	9200      	str	r2, [sp, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a04      	ldr	r2, [pc, #16]	; (8004d88 <DisplayDatosGyro+0xbc>)
 8004d76:	f7fe f8d1 	bl	8002f1c <ST7735_WriteString>
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	0800f9f8 	.word	0x0800f9f8
 8004d88:	20002c24 	.word	0x20002c24
 8004d8c:	200029d0 	.word	0x200029d0
 8004d90:	0800fa0c 	.word	0x0800fa0c
 8004d94:	0800fa20 	.word	0x0800fa20

08004d98 <DisplayDatosAccel>:

void DisplayDatosAccel (float Ax, float Ay, float Az,uint16_t x, uint16_t y){
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af04      	add	r7, sp, #16
 8004d9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004da2:	edc7 0a02 	vstr	s1, [r7, #8]
 8004da6:	ed87 1a01 	vstr	s2, [r7, #4]
 8004daa:	4603      	mov	r3, r0
 8004dac:	460a      	mov	r2, r1
 8004dae:	807b      	strh	r3, [r7, #2]
 8004db0:	4613      	mov	r3, r2
 8004db2:	803b      	strh	r3, [r7, #0]
	sprintf(Display_Buff,"Ax=%.3f m/s^2   ",Ax);
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7fb fbcf 	bl	8000558 <__aeabi_f2d>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4924      	ldr	r1, [pc, #144]	; (8004e50 <DisplayDatosAccel+0xb8>)
 8004dc0:	4824      	ldr	r0, [pc, #144]	; (8004e54 <DisplayDatosAccel+0xbc>)
 8004dc2:	f006 ff6b 	bl	800bc9c <siprintf>
	ST7735_WriteString(x,y,Display_Buff, Font_7x10, WHITE,BLACK);
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <DisplayDatosAccel+0xc0>)
 8004dc8:	8839      	ldrh	r1, [r7, #0]
 8004dca:	8878      	ldrh	r0, [r7, #2]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	9202      	str	r2, [sp, #8]
 8004dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dd4:	9201      	str	r2, [sp, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	9200      	str	r2, [sp, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1d      	ldr	r2, [pc, #116]	; (8004e54 <DisplayDatosAccel+0xbc>)
 8004dde:	f7fe f89d 	bl	8002f1c <ST7735_WriteString>
	sprintf(Display_Buff,"Ay=%.3f m/s^2   ",Ay);
 8004de2:	68b8      	ldr	r0, [r7, #8]
 8004de4:	f7fb fbb8 	bl	8000558 <__aeabi_f2d>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	491b      	ldr	r1, [pc, #108]	; (8004e5c <DisplayDatosAccel+0xc4>)
 8004dee:	4819      	ldr	r0, [pc, #100]	; (8004e54 <DisplayDatosAccel+0xbc>)
 8004df0:	f006 ff54 	bl	800bc9c <siprintf>
	ST7735_WriteString(x,y+10,Display_Buff, Font_7x10, WHITE,BLACK);
 8004df4:	883b      	ldrh	r3, [r7, #0]
 8004df6:	330a      	adds	r3, #10
 8004df8:	b299      	uxth	r1, r3
 8004dfa:	4b17      	ldr	r3, [pc, #92]	; (8004e58 <DisplayDatosAccel+0xc0>)
 8004dfc:	8878      	ldrh	r0, [r7, #2]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	9202      	str	r2, [sp, #8]
 8004e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e06:	9201      	str	r2, [sp, #4]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	9200      	str	r2, [sp, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a11      	ldr	r2, [pc, #68]	; (8004e54 <DisplayDatosAccel+0xbc>)
 8004e10:	f7fe f884 	bl	8002f1c <ST7735_WriteString>
	sprintf(Display_Buff,"Az=%.3f m/s^2   ",Az);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7fb fb9f 	bl	8000558 <__aeabi_f2d>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4910      	ldr	r1, [pc, #64]	; (8004e60 <DisplayDatosAccel+0xc8>)
 8004e20:	480c      	ldr	r0, [pc, #48]	; (8004e54 <DisplayDatosAccel+0xbc>)
 8004e22:	f006 ff3b 	bl	800bc9c <siprintf>
	ST7735_WriteString(x,y+20,Display_Buff, Font_7x10, WHITE,BLACK);
 8004e26:	883b      	ldrh	r3, [r7, #0]
 8004e28:	3314      	adds	r3, #20
 8004e2a:	b299      	uxth	r1, r3
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <DisplayDatosAccel+0xc0>)
 8004e2e:	8878      	ldrh	r0, [r7, #2]
 8004e30:	2200      	movs	r2, #0
 8004e32:	9202      	str	r2, [sp, #8]
 8004e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e38:	9201      	str	r2, [sp, #4]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	9200      	str	r2, [sp, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <DisplayDatosAccel+0xbc>)
 8004e42:	f7fe f86b 	bl	8002f1c <ST7735_WriteString>
}
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	0800fa34 	.word	0x0800fa34
 8004e54:	20002c24 	.word	0x20002c24
 8004e58:	200029d0 	.word	0x200029d0
 8004e5c:	0800fa48 	.word	0x0800fa48
 8004e60:	0800fa5c 	.word	0x0800fa5c

08004e64 <DisplayDatosMag>:

void DisplayDatosMag (float Mx, float My, float Mz, uint16_t x, uint16_t y){
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af04      	add	r7, sp, #16
 8004e6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e72:	ed87 1a01 	vstr	s2, [r7, #4]
 8004e76:	4603      	mov	r3, r0
 8004e78:	460a      	mov	r2, r1
 8004e7a:	807b      	strh	r3, [r7, #2]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	803b      	strh	r3, [r7, #0]
	sprintf(Display_Buff,"Mx=%.3f uT   ",Mx);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7fb fb69 	bl	8000558 <__aeabi_f2d>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4924      	ldr	r1, [pc, #144]	; (8004f1c <DisplayDatosMag+0xb8>)
 8004e8c:	4824      	ldr	r0, [pc, #144]	; (8004f20 <DisplayDatosMag+0xbc>)
 8004e8e:	f006 ff05 	bl	800bc9c <siprintf>
	ST7735_WriteString(x,y,Display_Buff, Font_7x10, WHITE,BLACK);
 8004e92:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <DisplayDatosMag+0xc0>)
 8004e94:	8839      	ldrh	r1, [r7, #0]
 8004e96:	8878      	ldrh	r0, [r7, #2]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	9202      	str	r2, [sp, #8]
 8004e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ea0:	9201      	str	r2, [sp, #4]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	9200      	str	r2, [sp, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <DisplayDatosMag+0xbc>)
 8004eaa:	f7fe f837 	bl	8002f1c <ST7735_WriteString>
	sprintf(Display_Buff,"My=%.3f uT   ",My);
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f7fb fb52 	bl	8000558 <__aeabi_f2d>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	491b      	ldr	r1, [pc, #108]	; (8004f28 <DisplayDatosMag+0xc4>)
 8004eba:	4819      	ldr	r0, [pc, #100]	; (8004f20 <DisplayDatosMag+0xbc>)
 8004ebc:	f006 feee 	bl	800bc9c <siprintf>
	ST7735_WriteString(x,y+10,Display_Buff, Font_7x10, WHITE,BLACK);
 8004ec0:	883b      	ldrh	r3, [r7, #0]
 8004ec2:	330a      	adds	r3, #10
 8004ec4:	b299      	uxth	r1, r3
 8004ec6:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <DisplayDatosMag+0xc0>)
 8004ec8:	8878      	ldrh	r0, [r7, #2]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	9202      	str	r2, [sp, #8]
 8004ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ed2:	9201      	str	r2, [sp, #4]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	9200      	str	r2, [sp, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <DisplayDatosMag+0xbc>)
 8004edc:	f7fe f81e 	bl	8002f1c <ST7735_WriteString>
	sprintf(Display_Buff,"Mz=%.3f uT   ",Mz);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fb fb39 	bl	8000558 <__aeabi_f2d>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4910      	ldr	r1, [pc, #64]	; (8004f2c <DisplayDatosMag+0xc8>)
 8004eec:	480c      	ldr	r0, [pc, #48]	; (8004f20 <DisplayDatosMag+0xbc>)
 8004eee:	f006 fed5 	bl	800bc9c <siprintf>
	ST7735_WriteString(x,y+20,Display_Buff, Font_7x10, WHITE,BLACK);
 8004ef2:	883b      	ldrh	r3, [r7, #0]
 8004ef4:	3314      	adds	r3, #20
 8004ef6:	b299      	uxth	r1, r3
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <DisplayDatosMag+0xc0>)
 8004efa:	8878      	ldrh	r0, [r7, #2]
 8004efc:	2200      	movs	r2, #0
 8004efe:	9202      	str	r2, [sp, #8]
 8004f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f04:	9201      	str	r2, [sp, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	9200      	str	r2, [sp, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <DisplayDatosMag+0xbc>)
 8004f0e:	f7fe f805 	bl	8002f1c <ST7735_WriteString>
}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	0800fa70 	.word	0x0800fa70
 8004f20:	20002c24 	.word	0x20002c24
 8004f24:	200029d0 	.word	0x200029d0
 8004f28:	0800fa80 	.word	0x0800fa80
 8004f2c:	0800fa90 	.word	0x0800fa90

08004f30 <Menu>:
	ST7735_WriteString(x,y+18,Display_Buff, Font_11x18, WHITE,BLACK);
	sprintf(Display_Buff,"Z=%.3f",DistanceZ);
	ST7735_WriteString(x,y+36,Display_Buff, Font_11x18, WHITE,BLACK);
}

void Menu(int cambio, int variable){
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b091      	sub	sp, #68	; 0x44
 8004f34:	af04      	add	r7, sp, #16
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
	int x =32, y=15;
 8004f3a:	2320      	movs	r3, #32
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	230f      	movs	r3, #15
 8004f40:	60bb      	str	r3, [r7, #8]
	fillScreen(BLACK);
 8004f42:	2000      	movs	r0, #0
 8004f44:	f7fc fb02 	bl	800154c <fillScreen>
	HAL_TIM_Base_Stop_IT(&htim4);
 8004f48:	4885      	ldr	r0, [pc, #532]	; (8005160 <Menu+0x230>)
 8004f4a:	f004 f89b 	bl	8009084 <HAL_TIM_Base_Stop_IT>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	f200 8100 	bhi.w	8005156 <Menu+0x226>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <Menu+0x2c>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f71 	.word	0x08004f71
 8004f60:	08004f77 	.word	0x08004f77
 8004f64:	08004fef 	.word	0x08004fef
 8004f68:	08005067 	.word	0x08005067
 8004f6c:	080050df 	.word	0x080050df
	switch (cambio){
		case(0):
			Logo_Ecci();
 8004f70:	f7fe fd9e 	bl	8003ab0 <Logo_Ecci>
			break;
 8004f74:	e0ef      	b.n	8005156 <Menu+0x226>
		case(1):
			for(int i=0;i<64;i++){
 8004f76:	2300      	movs	r3, #0
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7a:	e022      	b.n	8004fc2 <Menu+0x92>
			  for(int j=0;j<64;j++){
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f80:	e019      	b.n	8004fb6 <Menu+0x86>
				  ST7735_DrawPixel(x+i, y+j, mpu[j][i]);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	b298      	uxth	r0, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	b299      	uxth	r1, r3
 8004f9a:	4c72      	ldr	r4, [pc, #456]	; (8005164 <Menu+0x234>)
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	019a      	lsls	r2, r3, #6
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	f7fd ff00 	bl	8002db0 <ST7735_DrawPixel>
			  for(int j=0;j<64;j++){
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	2b3f      	cmp	r3, #63	; 0x3f
 8004fba:	dde2      	ble.n	8004f82 <Menu+0x52>
			for(int i=0;i<64;i++){
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	2b3f      	cmp	r3, #63	; 0x3f
 8004fc6:	ddd9      	ble.n	8004f7c <Menu+0x4c>
			  }
			}
			sprintf(Display_Buff," Datos MPU");
 8004fc8:	4967      	ldr	r1, [pc, #412]	; (8005168 <Menu+0x238>)
 8004fca:	4868      	ldr	r0, [pc, #416]	; (800516c <Menu+0x23c>)
 8004fcc:	f006 fe66 	bl	800bc9c <siprintf>
			ST7735_WriteString(7 ,90 ,Display_Buff, Font_11x18, WHITE,BLACK);
 8004fd0:	4b67      	ldr	r3, [pc, #412]	; (8005170 <Menu+0x240>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	9202      	str	r2, [sp, #8]
 8004fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fda:	9201      	str	r2, [sp, #4]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	9200      	str	r2, [sp, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a62      	ldr	r2, [pc, #392]	; (800516c <Menu+0x23c>)
 8004fe4:	215a      	movs	r1, #90	; 0x5a
 8004fe6:	2007      	movs	r0, #7
 8004fe8:	f7fd ff98 	bl	8002f1c <ST7735_WriteString>
			break;
 8004fec:	e0b3      	b.n	8005156 <Menu+0x226>
		case(2):
			for(int i=0;i<64;i++){
 8004fee:	2300      	movs	r3, #0
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff2:	e022      	b.n	800503a <Menu+0x10a>
			  for(int j=0;j<64;j++){
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	e019      	b.n	800502e <Menu+0xfe>
				 ST7735_DrawPixel(x+i, y+j, EULER[j][i]);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	b29b      	uxth	r3, r3
 8005002:	4413      	add	r3, r2
 8005004:	b298      	uxth	r0, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	b29a      	uxth	r2, r3
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	b29b      	uxth	r3, r3
 800500e:	4413      	add	r3, r2
 8005010:	b299      	uxth	r1, r3
 8005012:	4c58      	ldr	r4, [pc, #352]	; (8005174 <Menu+0x244>)
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	019a      	lsls	r2, r3, #6
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	4413      	add	r3, r2
 800501c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	f7fd fec4 	bl	8002db0 <ST7735_DrawPixel>
			  for(int j=0;j<64;j++){
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	3301      	adds	r3, #1
 800502c:	623b      	str	r3, [r7, #32]
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	2b3f      	cmp	r3, #63	; 0x3f
 8005032:	dde2      	ble.n	8004ffa <Menu+0xca>
			for(int i=0;i<64;i++){
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	3301      	adds	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	2b3f      	cmp	r3, #63	; 0x3f
 800503e:	ddd9      	ble.n	8004ff4 <Menu+0xc4>
			  }
			}
			sprintf(Display_Buff," Desplazamiento y        Angulos");
 8005040:	494d      	ldr	r1, [pc, #308]	; (8005178 <Menu+0x248>)
 8005042:	484a      	ldr	r0, [pc, #296]	; (800516c <Menu+0x23c>)
 8005044:	f006 fe2a 	bl	800bc9c <siprintf>
			ST7735_WriteString(0 ,90,Display_Buff, Font_7x10, WHITE,BLACK);
 8005048:	4b4c      	ldr	r3, [pc, #304]	; (800517c <Menu+0x24c>)
 800504a:	2200      	movs	r2, #0
 800504c:	9202      	str	r2, [sp, #8]
 800504e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005052:	9201      	str	r2, [sp, #4]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	9200      	str	r2, [sp, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a44      	ldr	r2, [pc, #272]	; (800516c <Menu+0x23c>)
 800505c:	215a      	movs	r1, #90	; 0x5a
 800505e:	2000      	movs	r0, #0
 8005060:	f7fd ff5c 	bl	8002f1c <ST7735_WriteString>
			break;
 8005064:	e077      	b.n	8005156 <Menu+0x226>
		case(3):
			for(int i=0;i<64;i++){
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
 800506a:	e022      	b.n	80050b2 <Menu+0x182>
			  for(int j=0;j<64;j++){
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	e019      	b.n	80050a6 <Menu+0x176>
				 ST7735_DrawPixel(x+i, y+j, calAG[j][i]);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	b29a      	uxth	r2, r3
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	b29b      	uxth	r3, r3
 800507a:	4413      	add	r3, r2
 800507c:	b298      	uxth	r0, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	b29a      	uxth	r2, r3
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	b29b      	uxth	r3, r3
 8005086:	4413      	add	r3, r2
 8005088:	b299      	uxth	r1, r3
 800508a:	4c3d      	ldr	r4, [pc, #244]	; (8005180 <Menu+0x250>)
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	019a      	lsls	r2, r3, #6
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005098:	b29b      	uxth	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	f7fd fe88 	bl	8002db0 <ST7735_DrawPixel>
			  for(int j=0;j<64;j++){
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	3301      	adds	r3, #1
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b3f      	cmp	r3, #63	; 0x3f
 80050aa:	dde2      	ble.n	8005072 <Menu+0x142>
			for(int i=0;i<64;i++){
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	3301      	adds	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	2b3f      	cmp	r3, #63	; 0x3f
 80050b6:	ddd9      	ble.n	800506c <Menu+0x13c>
			  }
			}
			sprintf(Display_Buff,"    Calibracion      Acelerometro  y      Giroscopio");
 80050b8:	4932      	ldr	r1, [pc, #200]	; (8005184 <Menu+0x254>)
 80050ba:	482c      	ldr	r0, [pc, #176]	; (800516c <Menu+0x23c>)
 80050bc:	f006 fdee 	bl	800bc9c <siprintf>
			ST7735_WriteString(0 ,90 ,Display_Buff, Font_7x10, WHITE,BLACK);
 80050c0:	4b2e      	ldr	r3, [pc, #184]	; (800517c <Menu+0x24c>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	9202      	str	r2, [sp, #8]
 80050c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050ca:	9201      	str	r2, [sp, #4]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	9200      	str	r2, [sp, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a26      	ldr	r2, [pc, #152]	; (800516c <Menu+0x23c>)
 80050d4:	215a      	movs	r1, #90	; 0x5a
 80050d6:	2000      	movs	r0, #0
 80050d8:	f7fd ff20 	bl	8002f1c <ST7735_WriteString>
			break;
 80050dc:	e03b      	b.n	8005156 <Menu+0x226>
		case(4):
			for(int i=0;i<64;i++){
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	e022      	b.n	800512a <Menu+0x1fa>
			  for(int j=0;j<64;j++){
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	e019      	b.n	800511e <Menu+0x1ee>
				 ST7735_DrawPixel(x+i, y+j, calMag[j][i]);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	4413      	add	r3, r2
 80050f4:	b298      	uxth	r0, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4413      	add	r3, r2
 8005100:	b299      	uxth	r1, r3
 8005102:	4c21      	ldr	r4, [pc, #132]	; (8005188 <Menu+0x258>)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	019a      	lsls	r2, r3, #6
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	4413      	add	r3, r2
 800510c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005110:	b29b      	uxth	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	f7fd fe4c 	bl	8002db0 <ST7735_DrawPixel>
			  for(int j=0;j<64;j++){
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	3301      	adds	r3, #1
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b3f      	cmp	r3, #63	; 0x3f
 8005122:	dde2      	ble.n	80050ea <Menu+0x1ba>
			for(int i=0;i<64;i++){
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	3301      	adds	r3, #1
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b3f      	cmp	r3, #63	; 0x3f
 800512e:	ddd9      	ble.n	80050e4 <Menu+0x1b4>
			  }
			}
			sprintf(Display_Buff,"    Calibracion       Magnetrometro");
 8005130:	4916      	ldr	r1, [pc, #88]	; (800518c <Menu+0x25c>)
 8005132:	480e      	ldr	r0, [pc, #56]	; (800516c <Menu+0x23c>)
 8005134:	f006 fdb2 	bl	800bc9c <siprintf>
			ST7735_WriteString(0 ,90 ,Display_Buff, Font_7x10, WHITE,BLACK);
 8005138:	4b10      	ldr	r3, [pc, #64]	; (800517c <Menu+0x24c>)
 800513a:	2200      	movs	r2, #0
 800513c:	9202      	str	r2, [sp, #8]
 800513e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005142:	9201      	str	r2, [sp, #4]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	9200      	str	r2, [sp, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a08      	ldr	r2, [pc, #32]	; (800516c <Menu+0x23c>)
 800514c:	215a      	movs	r1, #90	; 0x5a
 800514e:	2000      	movs	r0, #0
 8005150:	f7fd fee4 	bl	8002f1c <ST7735_WriteString>
			break;
 8005154:	bf00      	nop
	  }
}
 8005156:	bf00      	nop
 8005158:	3734      	adds	r7, #52	; 0x34
 800515a:	46bd      	mov	sp, r7
 800515c:	bd90      	pop	{r4, r7, pc}
 800515e:	bf00      	nop
 8005160:	20002f00 	.word	0x20002f00
 8005164:	0800fbdc 	.word	0x0800fbdc
 8005168:	0800fadc 	.word	0x0800fadc
 800516c:	20002c24 	.word	0x20002c24
 8005170:	200029d8 	.word	0x200029d8
 8005174:	08013bdc 	.word	0x08013bdc
 8005178:	0800fae8 	.word	0x0800fae8
 800517c:	200029d0 	.word	0x200029d0
 8005180:	08017bdc 	.word	0x08017bdc
 8005184:	0800fb0c 	.word	0x0800fb0c
 8005188:	0801bbdc 	.word	0x0801bbdc
 800518c:	0800fb44 	.word	0x0800fb44

08005190 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
	return 1;
 8005194:	2301      	movs	r3, #1
}
 8005196:	4618      	mov	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <_kill>:

int _kill(int pid, int sig)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80051aa:	f005 fec5 	bl	800af38 <__errno>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2216      	movs	r2, #22
 80051b2:	601a      	str	r2, [r3, #0]
	return -1;
 80051b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <_exit>:

void _exit (int status)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051c8:	f04f 31ff 	mov.w	r1, #4294967295
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ffe7 	bl	80051a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80051d2:	e7fe      	b.n	80051d2 <_exit+0x12>

080051d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e00a      	b.n	80051fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051e6:	f3af 8000 	nop.w
 80051ea:	4601      	mov	r1, r0
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	60ba      	str	r2, [r7, #8]
 80051f2:	b2ca      	uxtb	r2, r1
 80051f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3301      	adds	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	dbf0      	blt.n	80051e6 <_read+0x12>
	}

return len;
 8005204:	687b      	ldr	r3, [r7, #4]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	e009      	b.n	8005234 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	60ba      	str	r2, [r7, #8]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	3301      	adds	r3, #1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	dbf1      	blt.n	8005220 <_write+0x12>
	}
	return len;
 800523c:	687b      	ldr	r3, [r7, #4]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <_close>:

int _close(int file)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
	return -1;
 800524e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800526e:	605a      	str	r2, [r3, #4]
	return 0;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <_isatty>:

int _isatty(int file)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
	return 1;
 8005286:	2301      	movs	r3, #1
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
	return 0;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <_sbrk+0x5c>)
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <_sbrk+0x60>)
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052c4:	4b13      	ldr	r3, [pc, #76]	; (8005314 <_sbrk+0x64>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <_sbrk+0x64>)
 80052ce:	4a12      	ldr	r2, [pc, #72]	; (8005318 <_sbrk+0x68>)
 80052d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <_sbrk+0x64>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d207      	bcs.n	80052f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052e0:	f005 fe2a 	bl	800af38 <__errno>
 80052e4:	4603      	mov	r3, r0
 80052e6:	220c      	movs	r2, #12
 80052e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	e009      	b.n	8005304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052f0:	4b08      	ldr	r3, [pc, #32]	; (8005314 <_sbrk+0x64>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <_sbrk+0x64>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	4a05      	ldr	r2, [pc, #20]	; (8005314 <_sbrk+0x64>)
 8005300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20010000 	.word	0x20010000
 8005310:	00000400 	.word	0x00000400
 8005314:	20002c18 	.word	0x20002c18
 8005318:	20003288 	.word	0x20003288

0800531c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <SystemInit+0x20>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	4a05      	ldr	r2, [pc, #20]	; (800533c <SystemInit+0x20>)
 8005328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800532c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005330:	bf00      	nop
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	e000ed00 	.word	0xe000ed00

08005340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005378 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005344:	480d      	ldr	r0, [pc, #52]	; (800537c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005346:	490e      	ldr	r1, [pc, #56]	; (8005380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005348:	4a0e      	ldr	r2, [pc, #56]	; (8005384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800534a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800534c:	e002      	b.n	8005354 <LoopCopyDataInit>

0800534e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800534e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005352:	3304      	adds	r3, #4

08005354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005358:	d3f9      	bcc.n	800534e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800535a:	4a0b      	ldr	r2, [pc, #44]	; (8005388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800535c:	4c0b      	ldr	r4, [pc, #44]	; (800538c <LoopFillZerobss+0x26>)
  movs r3, #0
 800535e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005360:	e001      	b.n	8005366 <LoopFillZerobss>

08005362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005364:	3204      	adds	r2, #4

08005366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005368:	d3fb      	bcc.n	8005362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800536a:	f7ff ffd7 	bl	800531c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800536e:	f005 fde9 	bl	800af44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005372:	f7fd fed5 	bl	8003120 <main>
  bx  lr    
 8005376:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005378:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800537c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005380:	20002bcc 	.word	0x20002bcc
  ldr r2, =_sidata
 8005384:	080240c4 	.word	0x080240c4
  ldr r2, =_sbss
 8005388:	20002bcc 	.word	0x20002bcc
  ldr r4, =_ebss
 800538c:	20003284 	.word	0x20003284

08005390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005390:	e7fe      	b.n	8005390 <ADC_IRQHandler>
	...

08005394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <HAL_Init+0x40>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a0d      	ldr	r2, [pc, #52]	; (80053d4 <HAL_Init+0x40>)
 800539e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_Init+0x40>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a0a      	ldr	r2, [pc, #40]	; (80053d4 <HAL_Init+0x40>)
 80053aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <HAL_Init+0x40>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <HAL_Init+0x40>)
 80053b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053bc:	2003      	movs	r0, #3
 80053be:	f000 fca5 	bl	8005d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053c2:	2000      	movs	r0, #0
 80053c4:	f000 f808 	bl	80053d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053c8:	f7fe fe40 	bl	800404c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023c00 	.word	0x40023c00

080053d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053e0:	4b12      	ldr	r3, [pc, #72]	; (800542c <HAL_InitTick+0x54>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_InitTick+0x58>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	4619      	mov	r1, r3
 80053ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fcbd 	bl	8005d76 <HAL_SYSTICK_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e00e      	b.n	8005424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b0f      	cmp	r3, #15
 800540a:	d80a      	bhi.n	8005422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800540c:	2200      	movs	r2, #0
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	f000 fc85 	bl	8005d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005418:	4a06      	ldr	r2, [pc, #24]	; (8005434 <HAL_InitTick+0x5c>)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	200029ec 	.word	0x200029ec
 8005430:	200029f4 	.word	0x200029f4
 8005434:	200029f0 	.word	0x200029f0

08005438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <HAL_IncTick+0x20>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	4b06      	ldr	r3, [pc, #24]	; (800545c <HAL_IncTick+0x24>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4413      	add	r3, r2
 8005448:	4a04      	ldr	r2, [pc, #16]	; (800545c <HAL_IncTick+0x24>)
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	200029f4 	.word	0x200029f4
 800545c:	20003270 	.word	0x20003270

08005460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  return uwTick;
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <HAL_GetTick+0x14>)
 8005466:	681b      	ldr	r3, [r3, #0]
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20003270 	.word	0x20003270

08005478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005480:	f7ff ffee 	bl	8005460 <HAL_GetTick>
 8005484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d005      	beq.n	800549e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <HAL_Delay+0x44>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800549e:	bf00      	nop
 80054a0:	f7ff ffde 	bl	8005460 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d8f7      	bhi.n	80054a0 <HAL_Delay+0x28>
  {
  }
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	200029f4 	.word	0x200029f4

080054c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e033      	b.n	800553e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fe fddc 	bl	800409c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005506:	f023 0302 	bic.w	r3, r3, #2
 800550a:	f043 0202 	orr.w	r2, r3, #2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa2e 	bl	8005974 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
 800552e:	e001      	b.n	8005534 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_ADC_Start+0x1a>
 800555e:	2302      	movs	r3, #2
 8005560:	e097      	b.n	8005692 <HAL_ADC_Start+0x14a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b01      	cmp	r3, #1
 8005576:	d018      	beq.n	80055aa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005588:	4b45      	ldr	r3, [pc, #276]	; (80056a0 <HAL_ADC_Start+0x158>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a45      	ldr	r2, [pc, #276]	; (80056a4 <HAL_ADC_Start+0x15c>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0c9a      	lsrs	r2, r3, #18
 8005594:	4613      	mov	r3, r2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	4413      	add	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800559c:	e002      	b.n	80055a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f9      	bne.n	800559e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d15f      	bne.n	8005678 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80055c0:	f023 0301 	bic.w	r3, r3, #1
 80055c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	d106      	bne.n	8005606 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fc:	f023 0206 	bic.w	r2, r3, #6
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	645a      	str	r2, [r3, #68]	; 0x44
 8005604:	e002      	b.n	800560c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <HAL_ADC_Start+0x160>)
 8005616:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005620:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d129      	bne.n	8005690 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800564a:	609a      	str	r2, [r3, #8]
 800564c:	e020      	b.n	8005690 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a16      	ldr	r2, [pc, #88]	; (80056ac <HAL_ADC_Start+0x164>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d11b      	bne.n	8005690 <HAL_ADC_Start+0x148>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d114      	bne.n	8005690 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005674:	609a      	str	r2, [r3, #8]
 8005676:	e00b      	b.n	8005690 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f043 0210 	orr.w	r2, r3, #16
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	f043 0201 	orr.w	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	200029ec 	.word	0x200029ec
 80056a4:	431bde83 	.word	0x431bde83
 80056a8:	40012300 	.word	0x40012300
 80056ac:	40012000 	.word	0x40012000

080056b0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_ADC_Stop+0x16>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e021      	b.n	800570a <HAL_ADC_Stop+0x5a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0201 	bic.w	r2, r2, #1
 80056dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	f043 0201 	orr.w	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_ADC_ConfigChannel+0x1c>
 8005748:	2302      	movs	r3, #2
 800574a:	e105      	b.n	8005958 <HAL_ADC_ConfigChannel+0x228>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b09      	cmp	r3, #9
 800575a:	d925      	bls.n	80057a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68d9      	ldr	r1, [r3, #12]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	4613      	mov	r3, r2
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	4413      	add	r3, r2
 8005770:	3b1e      	subs	r3, #30
 8005772:	2207      	movs	r2, #7
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43da      	mvns	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	400a      	ands	r2, r1
 8005780:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68d9      	ldr	r1, [r3, #12]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	4618      	mov	r0, r3
 8005794:	4603      	mov	r3, r0
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4403      	add	r3, r0
 800579a:	3b1e      	subs	r3, #30
 800579c:	409a      	lsls	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	e022      	b.n	80057ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6919      	ldr	r1, [r3, #16]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	4613      	mov	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4413      	add	r3, r2
 80057bc:	2207      	movs	r2, #7
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43da      	mvns	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	400a      	ands	r2, r1
 80057ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6919      	ldr	r1, [r3, #16]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	4618      	mov	r0, r3
 80057de:	4603      	mov	r3, r0
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4403      	add	r3, r0
 80057e4:	409a      	lsls	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b06      	cmp	r3, #6
 80057f4:	d824      	bhi.n	8005840 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	3b05      	subs	r3, #5
 8005808:	221f      	movs	r2, #31
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	43da      	mvns	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	400a      	ands	r2, r1
 8005816:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	4618      	mov	r0, r3
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	3b05      	subs	r3, #5
 8005832:	fa00 f203 	lsl.w	r2, r0, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	635a      	str	r2, [r3, #52]	; 0x34
 800583e:	e04c      	b.n	80058da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b0c      	cmp	r3, #12
 8005846:	d824      	bhi.n	8005892 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	3b23      	subs	r3, #35	; 0x23
 800585a:	221f      	movs	r2, #31
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43da      	mvns	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	400a      	ands	r2, r1
 8005868:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	4618      	mov	r0, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	3b23      	subs	r3, #35	; 0x23
 8005884:	fa00 f203 	lsl.w	r2, r0, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
 8005890:	e023      	b.n	80058da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	3b41      	subs	r3, #65	; 0x41
 80058a4:	221f      	movs	r2, #31
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43da      	mvns	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	400a      	ands	r2, r1
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	4618      	mov	r0, r3
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	3b41      	subs	r3, #65	; 0x41
 80058ce:	fa00 f203 	lsl.w	r2, r0, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058da:	4b22      	ldr	r3, [pc, #136]	; (8005964 <HAL_ADC_ConfigChannel+0x234>)
 80058dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a21      	ldr	r2, [pc, #132]	; (8005968 <HAL_ADC_ConfigChannel+0x238>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d109      	bne.n	80058fc <HAL_ADC_ConfigChannel+0x1cc>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b12      	cmp	r3, #18
 80058ee:	d105      	bne.n	80058fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a19      	ldr	r2, [pc, #100]	; (8005968 <HAL_ADC_ConfigChannel+0x238>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d123      	bne.n	800594e <HAL_ADC_ConfigChannel+0x21e>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b10      	cmp	r3, #16
 800590c:	d003      	beq.n	8005916 <HAL_ADC_ConfigChannel+0x1e6>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b11      	cmp	r3, #17
 8005914:	d11b      	bne.n	800594e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b10      	cmp	r3, #16
 8005928:	d111      	bne.n	800594e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800592a:	4b10      	ldr	r3, [pc, #64]	; (800596c <HAL_ADC_ConfigChannel+0x23c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a10      	ldr	r2, [pc, #64]	; (8005970 <HAL_ADC_ConfigChannel+0x240>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	0c9a      	lsrs	r2, r3, #18
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005940:	e002      	b.n	8005948 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	3b01      	subs	r3, #1
 8005946:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f9      	bne.n	8005942 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40012300 	.word	0x40012300
 8005968:	40012000 	.word	0x40012000
 800596c:	200029ec 	.word	0x200029ec
 8005970:	431bde83 	.word	0x431bde83

08005974 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800597c:	4b79      	ldr	r3, [pc, #484]	; (8005b64 <ADC_Init+0x1f0>)
 800597e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	431a      	orrs	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	021a      	lsls	r2, r3, #8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80059cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6859      	ldr	r1, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6899      	ldr	r1, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	4a58      	ldr	r2, [pc, #352]	; (8005b68 <ADC_Init+0x1f4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d022      	beq.n	8005a52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6899      	ldr	r1, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6899      	ldr	r1, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	e00f      	b.n	8005a72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0202 	bic.w	r2, r2, #2
 8005a80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6899      	ldr	r1, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	7e1b      	ldrb	r3, [r3, #24]
 8005a8c:	005a      	lsls	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01b      	beq.n	8005ad8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005abe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	3b01      	subs	r3, #1
 8005acc:	035a      	lsls	r2, r3, #13
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
 8005ad6:	e007      	b.n	8005ae8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	051a      	lsls	r2, r3, #20
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6899      	ldr	r1, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b2a:	025a      	lsls	r2, r3, #9
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6899      	ldr	r1, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	029a      	lsls	r2, r3, #10
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	609a      	str	r2, [r3, #8]
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40012300 	.word	0x40012300
 8005b68:	0f000001 	.word	0x0f000001

08005b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b9e:	4a04      	ldr	r2, [pc, #16]	; (8005bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	60d3      	str	r3, [r2, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	e000ed00 	.word	0xe000ed00

08005bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <__NVIC_GetPriorityGrouping+0x18>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	f003 0307 	and.w	r3, r3, #7
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	db0b      	blt.n	8005bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	f003 021f 	and.w	r2, r3, #31
 8005be8:	4907      	ldr	r1, [pc, #28]	; (8005c08 <__NVIC_EnableIRQ+0x38>)
 8005bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e000e100 	.word	0xe000e100

08005c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	db0a      	blt.n	8005c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	490c      	ldr	r1, [pc, #48]	; (8005c58 <__NVIC_SetPriority+0x4c>)
 8005c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2a:	0112      	lsls	r2, r2, #4
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	440b      	add	r3, r1
 8005c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c34:	e00a      	b.n	8005c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	4908      	ldr	r1, [pc, #32]	; (8005c5c <__NVIC_SetPriority+0x50>)
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	3b04      	subs	r3, #4
 8005c44:	0112      	lsls	r2, r2, #4
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	440b      	add	r3, r1
 8005c4a:	761a      	strb	r2, [r3, #24]
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	e000e100 	.word	0xe000e100
 8005c5c:	e000ed00 	.word	0xe000ed00

08005c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b089      	sub	sp, #36	; 0x24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f1c3 0307 	rsb	r3, r3, #7
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	bf28      	it	cs
 8005c7e:	2304      	movcs	r3, #4
 8005c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3304      	adds	r3, #4
 8005c86:	2b06      	cmp	r3, #6
 8005c88:	d902      	bls.n	8005c90 <NVIC_EncodePriority+0x30>
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3b03      	subs	r3, #3
 8005c8e:	e000      	b.n	8005c92 <NVIC_EncodePriority+0x32>
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43da      	mvns	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb2:	43d9      	mvns	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cb8:	4313      	orrs	r3, r2
         );
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3724      	adds	r7, #36	; 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cd8:	d301      	bcc.n	8005cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e00f      	b.n	8005cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <SysTick_Config+0x40>)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ce6:	210f      	movs	r1, #15
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	f7ff ff8e 	bl	8005c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <SysTick_Config+0x40>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cf6:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <SysTick_Config+0x40>)
 8005cf8:	2207      	movs	r2, #7
 8005cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	e000e010 	.word	0xe000e010

08005d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ff29 	bl	8005b6c <__NVIC_SetPriorityGrouping>
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b086      	sub	sp, #24
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	4603      	mov	r3, r0
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
 8005d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d34:	f7ff ff3e 	bl	8005bb4 <__NVIC_GetPriorityGrouping>
 8005d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	6978      	ldr	r0, [r7, #20]
 8005d40:	f7ff ff8e 	bl	8005c60 <NVIC_EncodePriority>
 8005d44:	4602      	mov	r2, r0
 8005d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ff5d 	bl	8005c0c <__NVIC_SetPriority>
}
 8005d52:	bf00      	nop
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4603      	mov	r3, r0
 8005d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff ff31 	bl	8005bd0 <__NVIC_EnableIRQ>
}
 8005d6e:	bf00      	nop
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff ffa2 	bl	8005cc8 <SysTick_Config>
 8005d84:	4603      	mov	r3, r0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d9c:	f7ff fb60 	bl	8005460 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e099      	b.n	8005ee0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dcc:	e00f      	b.n	8005dee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dce:	f7ff fb47 	bl	8005460 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b05      	cmp	r3, #5
 8005dda:	d908      	bls.n	8005dee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2203      	movs	r2, #3
 8005de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e078      	b.n	8005ee0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e8      	bne.n	8005dce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4b38      	ldr	r3, [pc, #224]	; (8005ee8 <HAL_DMA_Init+0x158>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d107      	bne.n	8005e58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	4313      	orrs	r3, r2
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 0307 	bic.w	r3, r3, #7
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d117      	bne.n	8005eb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00e      	beq.n	8005eb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fb01 	bl	800649c <DMA_CheckFifoParam>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2240      	movs	r2, #64	; 0x40
 8005ea4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e016      	b.n	8005ee0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fab8 	bl	8006430 <DMA_CalcBaseAndBitshift>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec8:	223f      	movs	r2, #63	; 0x3f
 8005eca:	409a      	lsls	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	f010803f 	.word	0xf010803f

08005eec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_DMA_Start_IT+0x26>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e040      	b.n	8005f94 <HAL_DMA_Start_IT+0xa8>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d12f      	bne.n	8005f86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fa4a 	bl	80063d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f44:	223f      	movs	r2, #63	; 0x3f
 8005f46:	409a      	lsls	r2, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0216 	orr.w	r2, r2, #22
 8005f5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0208 	orr.w	r2, r2, #8
 8005f72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e005      	b.n	8005f92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005faa:	f7ff fa59 	bl	8005460 <HAL_GetTick>
 8005fae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d008      	beq.n	8005fce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2280      	movs	r2, #128	; 0x80
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e052      	b.n	8006074 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0216 	bic.w	r2, r2, #22
 8005fdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <HAL_DMA_Abort+0x62>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0208 	bic.w	r2, r2, #8
 800600c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0201 	bic.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800601e:	e013      	b.n	8006048 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006020:	f7ff fa1e 	bl	8005460 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b05      	cmp	r3, #5
 800602c:	d90c      	bls.n	8006048 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2203      	movs	r2, #3
 8006040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e015      	b.n	8006074 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e4      	bne.n	8006020 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605a:	223f      	movs	r2, #63	; 0x3f
 800605c:	409a      	lsls	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d004      	beq.n	800609a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2280      	movs	r2, #128	; 0x80
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e00c      	b.n	80060b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2205      	movs	r2, #5
 800609e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060cc:	4b92      	ldr	r3, [pc, #584]	; (8006318 <HAL_DMA_IRQHandler+0x258>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a92      	ldr	r2, [pc, #584]	; (800631c <HAL_DMA_IRQHandler+0x25c>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0a9b      	lsrs	r3, r3, #10
 80060d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ea:	2208      	movs	r2, #8
 80060ec:	409a      	lsls	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01a      	beq.n	800612c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d013      	beq.n	800612c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0204 	bic.w	r2, r2, #4
 8006112:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006118:	2208      	movs	r2, #8
 800611a:	409a      	lsls	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006130:	2201      	movs	r2, #1
 8006132:	409a      	lsls	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4013      	ands	r3, r2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d012      	beq.n	8006162 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614e:	2201      	movs	r2, #1
 8006150:	409a      	lsls	r2, r3
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	f043 0202 	orr.w	r2, r3, #2
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006166:	2204      	movs	r2, #4
 8006168:	409a      	lsls	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4013      	ands	r3, r2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d012      	beq.n	8006198 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006184:	2204      	movs	r2, #4
 8006186:	409a      	lsls	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	f043 0204 	orr.w	r2, r3, #4
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619c:	2210      	movs	r2, #16
 800619e:	409a      	lsls	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4013      	ands	r3, r2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d043      	beq.n	8006230 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d03c      	beq.n	8006230 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ba:	2210      	movs	r2, #16
 80061bc:	409a      	lsls	r2, r3
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d018      	beq.n	8006202 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d108      	bne.n	80061f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d024      	beq.n	8006230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	4798      	blx	r3
 80061ee:	e01f      	b.n	8006230 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01b      	beq.n	8006230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	4798      	blx	r3
 8006200:	e016      	b.n	8006230 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	d107      	bne.n	8006220 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0208 	bic.w	r2, r2, #8
 800621e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	2220      	movs	r2, #32
 8006236:	409a      	lsls	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 808e 	beq.w	800635e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8086 	beq.w	800635e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006256:	2220      	movs	r2, #32
 8006258:	409a      	lsls	r2, r3
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b05      	cmp	r3, #5
 8006268:	d136      	bne.n	80062d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0216 	bic.w	r2, r2, #22
 8006278:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006288:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <HAL_DMA_IRQHandler+0x1da>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0208 	bic.w	r2, r2, #8
 80062a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ae:	223f      	movs	r2, #63	; 0x3f
 80062b0:	409a      	lsls	r2, r3
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d07d      	beq.n	80063ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
        }
        return;
 80062d6:	e078      	b.n	80063ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01c      	beq.n	8006320 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d108      	bne.n	8006306 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d030      	beq.n	800635e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
 8006304:	e02b      	b.n	800635e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d027      	beq.n	800635e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
 8006316:	e022      	b.n	800635e <HAL_DMA_IRQHandler+0x29e>
 8006318:	200029ec 	.word	0x200029ec
 800631c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10f      	bne.n	800634e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0210 	bic.w	r2, r2, #16
 800633c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	2b00      	cmp	r3, #0
 8006364:	d032      	beq.n	80063cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d022      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2205      	movs	r2, #5
 8006376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0201 	bic.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	3301      	adds	r3, #1
 800638e:	60bb      	str	r3, [r7, #8]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	429a      	cmp	r2, r3
 8006394:	d307      	bcc.n	80063a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f2      	bne.n	800638a <HAL_DMA_IRQHandler+0x2ca>
 80063a4:	e000      	b.n	80063a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80063a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
 80063c8:	e000      	b.n	80063cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80063ca:	bf00      	nop
    }
  }
}
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop

080063d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d108      	bne.n	8006414 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006412:	e007      	b.n	8006424 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	60da      	str	r2, [r3, #12]
}
 8006424:	bf00      	nop
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	3b10      	subs	r3, #16
 8006440:	4a14      	ldr	r2, [pc, #80]	; (8006494 <DMA_CalcBaseAndBitshift+0x64>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800644a:	4a13      	ldr	r2, [pc, #76]	; (8006498 <DMA_CalcBaseAndBitshift+0x68>)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d909      	bls.n	8006472 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	659a      	str	r2, [r3, #88]	; 0x58
 8006470:	e007      	b.n	8006482 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800647a:	f023 0303 	bic.w	r3, r3, #3
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	aaaaaaab 	.word	0xaaaaaaab
 8006498:	08023bf4 	.word	0x08023bf4

0800649c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d11f      	bne.n	80064f6 <DMA_CheckFifoParam+0x5a>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d856      	bhi.n	800656a <DMA_CheckFifoParam+0xce>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <DMA_CheckFifoParam+0x28>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064e7 	.word	0x080064e7
 80064cc:	080064d5 	.word	0x080064d5
 80064d0:	0800656b 	.word	0x0800656b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d046      	beq.n	800656e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064e4:	e043      	b.n	800656e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064ee:	d140      	bne.n	8006572 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064f4:	e03d      	b.n	8006572 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064fe:	d121      	bne.n	8006544 <DMA_CheckFifoParam+0xa8>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b03      	cmp	r3, #3
 8006504:	d837      	bhi.n	8006576 <DMA_CheckFifoParam+0xda>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <DMA_CheckFifoParam+0x70>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	0800651d 	.word	0x0800651d
 8006510:	08006523 	.word	0x08006523
 8006514:	0800651d 	.word	0x0800651d
 8006518:	08006535 	.word	0x08006535
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
      break;
 8006520:	e030      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d025      	beq.n	800657a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006532:	e022      	b.n	800657a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800653c:	d11f      	bne.n	800657e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006542:	e01c      	b.n	800657e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d903      	bls.n	8006552 <DMA_CheckFifoParam+0xb6>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d003      	beq.n	8006558 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006550:	e018      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
      break;
 8006556:	e015      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
      break;
 8006568:	e00b      	b.n	8006582 <DMA_CheckFifoParam+0xe6>
      break;
 800656a:	bf00      	nop
 800656c:	e00a      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
      break;
 800656e:	bf00      	nop
 8006570:	e008      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
      break;
 8006572:	bf00      	nop
 8006574:	e006      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
      break;
 8006576:	bf00      	nop
 8006578:	e004      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
      break;
 800657a:	bf00      	nop
 800657c:	e002      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
      break;   
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <DMA_CheckFifoParam+0xe8>
      break;
 8006582:	bf00      	nop
    }
  } 
  
  return status; 
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop

08006594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006594:	b480      	push	{r7}
 8006596:	b089      	sub	sp, #36	; 0x24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	e159      	b.n	8006864 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065b0:	2201      	movs	r2, #1
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4013      	ands	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	f040 8148 	bne.w	800685e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d005      	beq.n	80065e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d130      	bne.n	8006648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	2203      	movs	r2, #3
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4013      	ands	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	4313      	orrs	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800661c:	2201      	movs	r2, #1
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	4013      	ands	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	091b      	lsrs	r3, r3, #4
 8006632:	f003 0201 	and.w	r2, r3, #1
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4313      	orrs	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	2b03      	cmp	r3, #3
 8006652:	d017      	beq.n	8006684 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	2203      	movs	r2, #3
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	fa02 f303 	lsl.w	r3, r2, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	4313      	orrs	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d123      	bne.n	80066d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	08da      	lsrs	r2, r3, #3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3208      	adds	r2, #8
 8006698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	220f      	movs	r2, #15
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	43db      	mvns	r3, r3
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	4013      	ands	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	08da      	lsrs	r2, r3, #3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3208      	adds	r2, #8
 80066d2:	69b9      	ldr	r1, [r7, #24]
 80066d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	2203      	movs	r2, #3
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	43db      	mvns	r3, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4013      	ands	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 0203 	and.w	r2, r3, #3
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	4313      	orrs	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80a2 	beq.w	800685e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	4b57      	ldr	r3, [pc, #348]	; (800687c <HAL_GPIO_Init+0x2e8>)
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	4a56      	ldr	r2, [pc, #344]	; (800687c <HAL_GPIO_Init+0x2e8>)
 8006724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006728:	6453      	str	r3, [r2, #68]	; 0x44
 800672a:	4b54      	ldr	r3, [pc, #336]	; (800687c <HAL_GPIO_Init+0x2e8>)
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006736:	4a52      	ldr	r2, [pc, #328]	; (8006880 <HAL_GPIO_Init+0x2ec>)
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	089b      	lsrs	r3, r3, #2
 800673c:	3302      	adds	r3, #2
 800673e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	220f      	movs	r2, #15
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	4013      	ands	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a49      	ldr	r2, [pc, #292]	; (8006884 <HAL_GPIO_Init+0x2f0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d019      	beq.n	8006796 <HAL_GPIO_Init+0x202>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a48      	ldr	r2, [pc, #288]	; (8006888 <HAL_GPIO_Init+0x2f4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <HAL_GPIO_Init+0x1fe>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a47      	ldr	r2, [pc, #284]	; (800688c <HAL_GPIO_Init+0x2f8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00d      	beq.n	800678e <HAL_GPIO_Init+0x1fa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a46      	ldr	r2, [pc, #280]	; (8006890 <HAL_GPIO_Init+0x2fc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <HAL_GPIO_Init+0x1f6>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a45      	ldr	r2, [pc, #276]	; (8006894 <HAL_GPIO_Init+0x300>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d101      	bne.n	8006786 <HAL_GPIO_Init+0x1f2>
 8006782:	2304      	movs	r3, #4
 8006784:	e008      	b.n	8006798 <HAL_GPIO_Init+0x204>
 8006786:	2307      	movs	r3, #7
 8006788:	e006      	b.n	8006798 <HAL_GPIO_Init+0x204>
 800678a:	2303      	movs	r3, #3
 800678c:	e004      	b.n	8006798 <HAL_GPIO_Init+0x204>
 800678e:	2302      	movs	r3, #2
 8006790:	e002      	b.n	8006798 <HAL_GPIO_Init+0x204>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <HAL_GPIO_Init+0x204>
 8006796:	2300      	movs	r3, #0
 8006798:	69fa      	ldr	r2, [r7, #28]
 800679a:	f002 0203 	and.w	r2, r2, #3
 800679e:	0092      	lsls	r2, r2, #2
 80067a0:	4093      	lsls	r3, r2
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067a8:	4935      	ldr	r1, [pc, #212]	; (8006880 <HAL_GPIO_Init+0x2ec>)
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	089b      	lsrs	r3, r3, #2
 80067ae:	3302      	adds	r3, #2
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067b6:	4b38      	ldr	r3, [pc, #224]	; (8006898 <HAL_GPIO_Init+0x304>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	43db      	mvns	r3, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4013      	ands	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067da:	4a2f      	ldr	r2, [pc, #188]	; (8006898 <HAL_GPIO_Init+0x304>)
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80067e0:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <HAL_GPIO_Init+0x304>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4013      	ands	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006804:	4a24      	ldr	r2, [pc, #144]	; (8006898 <HAL_GPIO_Init+0x304>)
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800680a:	4b23      	ldr	r3, [pc, #140]	; (8006898 <HAL_GPIO_Init+0x304>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	43db      	mvns	r3, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4013      	ands	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800682e:	4a1a      	ldr	r2, [pc, #104]	; (8006898 <HAL_GPIO_Init+0x304>)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006834:	4b18      	ldr	r3, [pc, #96]	; (8006898 <HAL_GPIO_Init+0x304>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	43db      	mvns	r3, r3
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	4013      	ands	r3, r2
 8006842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006858:	4a0f      	ldr	r2, [pc, #60]	; (8006898 <HAL_GPIO_Init+0x304>)
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	3301      	adds	r3, #1
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2b0f      	cmp	r3, #15
 8006868:	f67f aea2 	bls.w	80065b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	3724      	adds	r7, #36	; 0x24
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40023800 	.word	0x40023800
 8006880:	40013800 	.word	0x40013800
 8006884:	40020000 	.word	0x40020000
 8006888:	40020400 	.word	0x40020400
 800688c:	40020800 	.word	0x40020800
 8006890:	40020c00 	.word	0x40020c00
 8006894:	40021000 	.word	0x40021000
 8006898:	40013c00 	.word	0x40013c00

0800689c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
 80068a8:	4613      	mov	r3, r2
 80068aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068ac:	787b      	ldrb	r3, [r7, #1]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068b2:	887a      	ldrh	r2, [r7, #2]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068b8:	e003      	b.n	80068c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068ba:	887b      	ldrh	r3, [r7, #2]
 80068bc:	041a      	lsls	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	619a      	str	r2, [r3, #24]
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068e0:	887a      	ldrh	r2, [r7, #2]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4013      	ands	r3, r2
 80068e6:	041a      	lsls	r2, r3, #16
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	43d9      	mvns	r1, r3
 80068ec:	887b      	ldrh	r3, [r7, #2]
 80068ee:	400b      	ands	r3, r1
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	619a      	str	r2, [r3, #24]
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	4603      	mov	r3, r0
 800690c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800690e:	4b08      	ldr	r3, [pc, #32]	; (8006930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	88fb      	ldrh	r3, [r7, #6]
 8006914:	4013      	ands	r3, r2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d006      	beq.n	8006928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800691a:	4a05      	ldr	r2, [pc, #20]	; (8006930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 f806 	bl	8006934 <HAL_GPIO_EXTI_Callback>
  }
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40013c00 	.word	0x40013c00

08006934 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
	...

0800694c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e12b      	b.n	8006bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fd fbd6 	bl	8004124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2224      	movs	r2, #36	; 0x24
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0201 	bic.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800699e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069b0:	f001 fbac 	bl	800810c <HAL_RCC_GetPCLK1Freq>
 80069b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	4a81      	ldr	r2, [pc, #516]	; (8006bc0 <HAL_I2C_Init+0x274>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d807      	bhi.n	80069d0 <HAL_I2C_Init+0x84>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4a80      	ldr	r2, [pc, #512]	; (8006bc4 <HAL_I2C_Init+0x278>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	bf94      	ite	ls
 80069c8:	2301      	movls	r3, #1
 80069ca:	2300      	movhi	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e006      	b.n	80069de <HAL_I2C_Init+0x92>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a7d      	ldr	r2, [pc, #500]	; (8006bc8 <HAL_I2C_Init+0x27c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	bf94      	ite	ls
 80069d8:	2301      	movls	r3, #1
 80069da:	2300      	movhi	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e0e7      	b.n	8006bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4a78      	ldr	r2, [pc, #480]	; (8006bcc <HAL_I2C_Init+0x280>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	0c9b      	lsrs	r3, r3, #18
 80069f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4a6a      	ldr	r2, [pc, #424]	; (8006bc0 <HAL_I2C_Init+0x274>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d802      	bhi.n	8006a20 <HAL_I2C_Init+0xd4>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	e009      	b.n	8006a34 <HAL_I2C_Init+0xe8>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	4a69      	ldr	r2, [pc, #420]	; (8006bd0 <HAL_I2C_Init+0x284>)
 8006a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a30:	099b      	lsrs	r3, r3, #6
 8006a32:	3301      	adds	r3, #1
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	495c      	ldr	r1, [pc, #368]	; (8006bc0 <HAL_I2C_Init+0x274>)
 8006a50:	428b      	cmp	r3, r1
 8006a52:	d819      	bhi.n	8006a88 <HAL_I2C_Init+0x13c>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	1e59      	subs	r1, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a68:	400b      	ands	r3, r1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <HAL_I2C_Init+0x138>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1e59      	subs	r1, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a82:	e051      	b.n	8006b28 <HAL_I2C_Init+0x1dc>
 8006a84:	2304      	movs	r3, #4
 8006a86:	e04f      	b.n	8006b28 <HAL_I2C_Init+0x1dc>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d111      	bne.n	8006ab4 <HAL_I2C_Init+0x168>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	1e58      	subs	r0, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6859      	ldr	r1, [r3, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	440b      	add	r3, r1
 8006a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	e012      	b.n	8006ada <HAL_I2C_Init+0x18e>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	1e58      	subs	r0, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6859      	ldr	r1, [r3, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	0099      	lsls	r1, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aca:	3301      	adds	r3, #1
 8006acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf0c      	ite	eq
 8006ad4:	2301      	moveq	r3, #1
 8006ad6:	2300      	movne	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_I2C_Init+0x196>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e022      	b.n	8006b28 <HAL_I2C_Init+0x1dc>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10e      	bne.n	8006b08 <HAL_I2C_Init+0x1bc>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	1e58      	subs	r0, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6859      	ldr	r1, [r3, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	440b      	add	r3, r1
 8006af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006afc:	3301      	adds	r3, #1
 8006afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b06:	e00f      	b.n	8006b28 <HAL_I2C_Init+0x1dc>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	1e58      	subs	r0, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6859      	ldr	r1, [r3, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	0099      	lsls	r1, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b1e:	3301      	adds	r3, #1
 8006b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	6809      	ldr	r1, [r1, #0]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69da      	ldr	r2, [r3, #28]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6911      	ldr	r1, [r2, #16]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	68d2      	ldr	r2, [r2, #12]
 8006b62:	4311      	orrs	r1, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6812      	ldr	r2, [r2, #0]
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	000186a0 	.word	0x000186a0
 8006bc4:	001e847f 	.word	0x001e847f
 8006bc8:	003d08ff 	.word	0x003d08ff
 8006bcc:	431bde83 	.word	0x431bde83
 8006bd0:	10624dd3 	.word	0x10624dd3

08006bd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	4608      	mov	r0, r1
 8006bde:	4611      	mov	r1, r2
 8006be0:	461a      	mov	r2, r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	817b      	strh	r3, [r7, #10]
 8006be6:	460b      	mov	r3, r1
 8006be8:	813b      	strh	r3, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bee:	f7fe fc37 	bl	8005460 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	f040 80d9 	bne.w	8006db4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2319      	movs	r3, #25
 8006c08:	2201      	movs	r2, #1
 8006c0a:	496d      	ldr	r1, [pc, #436]	; (8006dc0 <HAL_I2C_Mem_Write+0x1ec>)
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fc7f 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e0cc      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_I2C_Mem_Write+0x56>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e0c5      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d007      	beq.n	8006c50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2221      	movs	r2, #33	; 0x21
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2240      	movs	r2, #64	; 0x40
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a3a      	ldr	r2, [r7, #32]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a4d      	ldr	r2, [pc, #308]	; (8006dc4 <HAL_I2C_Mem_Write+0x1f0>)
 8006c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c92:	88f8      	ldrh	r0, [r7, #6]
 8006c94:	893a      	ldrh	r2, [r7, #8]
 8006c96:	8979      	ldrh	r1, [r7, #10]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fab6 	bl	8007214 <I2C_RequestMemoryWrite>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d052      	beq.n	8006d54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e081      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fd00 	bl	80076bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00d      	beq.n	8006cde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d107      	bne.n	8006cda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e06b      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	781a      	ldrb	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d11b      	bne.n	8006d54 <HAL_I2C_Mem_Write+0x180>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d017      	beq.n	8006d54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1aa      	bne.n	8006cb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fcec 	bl	800773e <I2C_WaitOnBTFFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00d      	beq.n	8006d88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d107      	bne.n	8006d84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e016      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	00100002 	.word	0x00100002
 8006dc4:	ffff0000 	.word	0xffff0000

08006dc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08c      	sub	sp, #48	; 0x30
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	817b      	strh	r3, [r7, #10]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	813b      	strh	r3, [r7, #8]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006de2:	f7fe fb3d 	bl	8005460 <HAL_GetTick>
 8006de6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	f040 8208 	bne.w	8007206 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	2319      	movs	r3, #25
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	497b      	ldr	r1, [pc, #492]	; (8006fec <HAL_I2C_Mem_Read+0x224>)
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fb85 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e1fb      	b.n	8007208 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_I2C_Mem_Read+0x56>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e1f4      	b.n	8007208 <HAL_I2C_Mem_Read+0x440>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d007      	beq.n	8006e44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2222      	movs	r2, #34	; 0x22
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2240      	movs	r2, #64	; 0x40
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4a5b      	ldr	r2, [pc, #364]	; (8006ff0 <HAL_I2C_Mem_Read+0x228>)
 8006e84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e86:	88f8      	ldrh	r0, [r7, #6]
 8006e88:	893a      	ldrh	r2, [r7, #8]
 8006e8a:	8979      	ldrh	r1, [r7, #10]
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	4603      	mov	r3, r0
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fa52 	bl	8007340 <I2C_RequestMemoryRead>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e1b0      	b.n	8007208 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d113      	bne.n	8006ed6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eae:	2300      	movs	r3, #0
 8006eb0:	623b      	str	r3, [r7, #32]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	623b      	str	r3, [r7, #32]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	623b      	str	r3, [r7, #32]
 8006ec2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e184      	b.n	80071e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d11b      	bne.n	8006f16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	61fb      	str	r3, [r7, #28]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	61fb      	str	r3, [r7, #28]
 8006f02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e164      	b.n	80071e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d11b      	bne.n	8006f56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	e144      	b.n	80071e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f6c:	e138      	b.n	80071e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	f200 80f1 	bhi.w	800715a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d123      	bne.n	8006fc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fc1b 	bl	80077c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e139      	b.n	8007208 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fc6:	e10b      	b.n	80071e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d14e      	bne.n	800706e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	4906      	ldr	r1, [pc, #24]	; (8006ff4 <HAL_I2C_Mem_Read+0x22c>)
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 fa98 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d008      	beq.n	8006ff8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e10e      	b.n	8007208 <HAL_I2C_Mem_Read+0x440>
 8006fea:	bf00      	nop
 8006fec:	00100002 	.word	0x00100002
 8006ff0:	ffff0000 	.word	0xffff0000
 8006ff4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691a      	ldr	r2, [r3, #16]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007056:	3b01      	subs	r3, #1
 8007058:	b29a      	uxth	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007062:	b29b      	uxth	r3, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800706c:	e0b8      	b.n	80071e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	2200      	movs	r2, #0
 8007076:	4966      	ldr	r1, [pc, #408]	; (8007210 <HAL_I2C_Mem_Read+0x448>)
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fa49 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e0bf      	b.n	8007208 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691a      	ldr	r2, [r3, #16]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	2200      	movs	r2, #0
 80070d2:	494f      	ldr	r1, [pc, #316]	; (8007210 <HAL_I2C_Mem_Read+0x448>)
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fa1b 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e091      	b.n	8007208 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714e:	b29b      	uxth	r3, r3
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007158:	e042      	b.n	80071e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800715a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 fb2e 	bl	80077c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e04c      	b.n	8007208 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691a      	ldr	r2, [r3, #16]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d118      	bne.n	80071e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f47f aec2 	bne.w	8006f6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	e000      	b.n	8007208 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007206:	2302      	movs	r3, #2
  }
}
 8007208:	4618      	mov	r0, r3
 800720a:	3728      	adds	r7, #40	; 0x28
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	00010004 	.word	0x00010004

08007214 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	461a      	mov	r2, r3
 8007222:	4603      	mov	r3, r0
 8007224:	817b      	strh	r3, [r7, #10]
 8007226:	460b      	mov	r3, r1
 8007228:	813b      	strh	r3, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800723c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	2200      	movs	r2, #0
 8007246:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f960 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00d      	beq.n	8007272 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007264:	d103      	bne.n	800726e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800726c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e05f      	b.n	8007332 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007272:	897b      	ldrh	r3, [r7, #10]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007280:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	6a3a      	ldr	r2, [r7, #32]
 8007286:	492d      	ldr	r1, [pc, #180]	; (800733c <I2C_RequestMemoryWrite+0x128>)
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f998 	bl	80075be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e04c      	b.n	8007332 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b0:	6a39      	ldr	r1, [r7, #32]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 fa02 	bl	80076bc <I2C_WaitOnTXEFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00d      	beq.n	80072da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d107      	bne.n	80072d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e02b      	b.n	8007332 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d105      	bne.n	80072ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	611a      	str	r2, [r3, #16]
 80072ea:	e021      	b.n	8007330 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072ec:	893b      	ldrh	r3, [r7, #8]
 80072ee:	0a1b      	lsrs	r3, r3, #8
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fc:	6a39      	ldr	r1, [r7, #32]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f9dc 	bl	80076bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00d      	beq.n	8007326 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	2b04      	cmp	r3, #4
 8007310:	d107      	bne.n	8007322 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007320:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e005      	b.n	8007332 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007326:	893b      	ldrh	r3, [r7, #8]
 8007328:	b2da      	uxtb	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	00010002 	.word	0x00010002

08007340 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	4608      	mov	r0, r1
 800734a:	4611      	mov	r1, r2
 800734c:	461a      	mov	r2, r3
 800734e:	4603      	mov	r3, r0
 8007350:	817b      	strh	r3, [r7, #10]
 8007352:	460b      	mov	r3, r1
 8007354:	813b      	strh	r3, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007368:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007378:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	2200      	movs	r2, #0
 8007382:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 f8c2 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00d      	beq.n	80073ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a0:	d103      	bne.n	80073aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e0aa      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073ae:	897b      	ldrh	r3, [r7, #10]
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	6a3a      	ldr	r2, [r7, #32]
 80073c2:	4952      	ldr	r1, [pc, #328]	; (800750c <I2C_RequestMemoryRead+0x1cc>)
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f8fa 	bl	80075be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e097      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073d4:	2300      	movs	r3, #0
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ec:	6a39      	ldr	r1, [r7, #32]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f964 	bl	80076bc <I2C_WaitOnTXEFlagUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00d      	beq.n	8007416 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d107      	bne.n	8007412 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007410:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e076      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d105      	bne.n	8007428 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800741c:	893b      	ldrh	r3, [r7, #8]
 800741e:	b2da      	uxtb	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	611a      	str	r2, [r3, #16]
 8007426:	e021      	b.n	800746c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007428:	893b      	ldrh	r3, [r7, #8]
 800742a:	0a1b      	lsrs	r3, r3, #8
 800742c:	b29b      	uxth	r3, r3
 800742e:	b2da      	uxtb	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007438:	6a39      	ldr	r1, [r7, #32]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f93e 	bl	80076bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00d      	beq.n	8007462 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2b04      	cmp	r3, #4
 800744c:	d107      	bne.n	800745e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e050      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007462:	893b      	ldrh	r3, [r7, #8]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800746c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746e:	6a39      	ldr	r1, [r7, #32]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f923 	bl	80076bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00d      	beq.n	8007498 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	2b04      	cmp	r3, #4
 8007482:	d107      	bne.n	8007494 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007492:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e035      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f82b 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00d      	beq.n	80074dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ce:	d103      	bne.n	80074d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e013      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074dc:	897b      	ldrh	r3, [r7, #10]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	6a3a      	ldr	r2, [r7, #32]
 80074f0:	4906      	ldr	r1, [pc, #24]	; (800750c <I2C_RequestMemoryRead+0x1cc>)
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f863 	bl	80075be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e000      	b.n	8007504 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	00010002 	.word	0x00010002

08007510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	4613      	mov	r3, r2
 800751e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007520:	e025      	b.n	800756e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007528:	d021      	beq.n	800756e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800752a:	f7fd ff99 	bl	8005460 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d302      	bcc.n	8007540 <I2C_WaitOnFlagUntilTimeout+0x30>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d116      	bne.n	800756e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2220      	movs	r2, #32
 800754a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f043 0220 	orr.w	r2, r3, #32
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e023      	b.n	80075b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	0c1b      	lsrs	r3, r3, #16
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	d10d      	bne.n	8007594 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	43da      	mvns	r2, r3
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	4013      	ands	r3, r2
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	bf0c      	ite	eq
 800758a:	2301      	moveq	r3, #1
 800758c:	2300      	movne	r3, #0
 800758e:	b2db      	uxtb	r3, r3
 8007590:	461a      	mov	r2, r3
 8007592:	e00c      	b.n	80075ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	43da      	mvns	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4013      	ands	r3, r2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bf0c      	ite	eq
 80075a6:	2301      	moveq	r3, #1
 80075a8:	2300      	movne	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d0b6      	beq.n	8007522 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075cc:	e051      	b.n	8007672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075dc:	d123      	bne.n	8007626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f043 0204 	orr.w	r2, r3, #4
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e046      	b.n	80076b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d021      	beq.n	8007672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800762e:	f7fd ff17 	bl	8005460 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	429a      	cmp	r2, r3
 800763c:	d302      	bcc.n	8007644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d116      	bne.n	8007672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f043 0220 	orr.w	r2, r3, #32
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e020      	b.n	80076b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	0c1b      	lsrs	r3, r3, #16
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	d10c      	bne.n	8007696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	43da      	mvns	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4013      	ands	r3, r2
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	e00b      	b.n	80076ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	43da      	mvns	r2, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	4013      	ands	r3, r2
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d18d      	bne.n	80075ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076c8:	e02d      	b.n	8007726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f8ce 	bl	800786c <I2C_IsAcknowledgeFailed>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e02d      	b.n	8007736 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e0:	d021      	beq.n	8007726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e2:	f7fd febd 	bl	8005460 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d302      	bcc.n	80076f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d116      	bne.n	8007726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f043 0220 	orr.w	r2, r3, #32
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e007      	b.n	8007736 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007730:	2b80      	cmp	r3, #128	; 0x80
 8007732:	d1ca      	bne.n	80076ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800774a:	e02d      	b.n	80077a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f88d 	bl	800786c <I2C_IsAcknowledgeFailed>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e02d      	b.n	80077b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d021      	beq.n	80077a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007764:	f7fd fe7c 	bl	8005460 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	d302      	bcc.n	800777a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d116      	bne.n	80077a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e007      	b.n	80077b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d1ca      	bne.n	800774c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077cc:	e042      	b.n	8007854 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	f003 0310 	and.w	r3, r3, #16
 80077d8:	2b10      	cmp	r3, #16
 80077da:	d119      	bne.n	8007810 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0210 	mvn.w	r2, #16
 80077e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e029      	b.n	8007864 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007810:	f7fd fe26 	bl	8005460 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	429a      	cmp	r2, r3
 800781e:	d302      	bcc.n	8007826 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d116      	bne.n	8007854 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	f043 0220 	orr.w	r2, r3, #32
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e007      	b.n	8007864 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d1b5      	bne.n	80077ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800787e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007882:	d11b      	bne.n	80078bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800788c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	f043 0204 	orr.w	r2, r3, #4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e264      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d075      	beq.n	80079d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078ea:	4ba3      	ldr	r3, [pc, #652]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 030c 	and.w	r3, r3, #12
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d00c      	beq.n	8007910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078f6:	4ba0      	ldr	r3, [pc, #640]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d112      	bne.n	8007928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007902:	4b9d      	ldr	r3, [pc, #628]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790e:	d10b      	bne.n	8007928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007910:	4b99      	ldr	r3, [pc, #612]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d05b      	beq.n	80079d4 <HAL_RCC_OscConfig+0x108>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d157      	bne.n	80079d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e23f      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007930:	d106      	bne.n	8007940 <HAL_RCC_OscConfig+0x74>
 8007932:	4b91      	ldr	r3, [pc, #580]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a90      	ldr	r2, [pc, #576]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	e01d      	b.n	800797c <HAL_RCC_OscConfig+0xb0>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007948:	d10c      	bne.n	8007964 <HAL_RCC_OscConfig+0x98>
 800794a:	4b8b      	ldr	r3, [pc, #556]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a8a      	ldr	r2, [pc, #552]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	4b88      	ldr	r3, [pc, #544]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a87      	ldr	r2, [pc, #540]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 800795c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	e00b      	b.n	800797c <HAL_RCC_OscConfig+0xb0>
 8007964:	4b84      	ldr	r3, [pc, #528]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a83      	ldr	r2, [pc, #524]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 800796a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	4b81      	ldr	r3, [pc, #516]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a80      	ldr	r2, [pc, #512]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800797a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d013      	beq.n	80079ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007984:	f7fd fd6c 	bl	8005460 <HAL_GetTick>
 8007988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800798c:	f7fd fd68 	bl	8005460 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b64      	cmp	r3, #100	; 0x64
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e204      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800799e:	4b76      	ldr	r3, [pc, #472]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0f0      	beq.n	800798c <HAL_RCC_OscConfig+0xc0>
 80079aa:	e014      	b.n	80079d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ac:	f7fd fd58 	bl	8005460 <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079b4:	f7fd fd54 	bl	8005460 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b64      	cmp	r3, #100	; 0x64
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e1f0      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079c6:	4b6c      	ldr	r3, [pc, #432]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f0      	bne.n	80079b4 <HAL_RCC_OscConfig+0xe8>
 80079d2:	e000      	b.n	80079d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d063      	beq.n	8007aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079e2:	4b65      	ldr	r3, [pc, #404]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 030c 	and.w	r3, r3, #12
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ee:	4b62      	ldr	r3, [pc, #392]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d11c      	bne.n	8007a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079fa:	4b5f      	ldr	r3, [pc, #380]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d116      	bne.n	8007a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a06:	4b5c      	ldr	r3, [pc, #368]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_RCC_OscConfig+0x152>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d001      	beq.n	8007a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e1c4      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a1e:	4b56      	ldr	r3, [pc, #344]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4952      	ldr	r1, [pc, #328]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a32:	e03a      	b.n	8007aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d020      	beq.n	8007a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a3c:	4b4f      	ldr	r3, [pc, #316]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a42:	f7fd fd0d 	bl	8005460 <HAL_GetTick>
 8007a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a48:	e008      	b.n	8007a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a4a:	f7fd fd09 	bl	8005460 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e1a5      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a5c:	4b46      	ldr	r3, [pc, #280]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0f0      	beq.n	8007a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a68:	4b43      	ldr	r3, [pc, #268]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	4940      	ldr	r1, [pc, #256]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	600b      	str	r3, [r1, #0]
 8007a7c:	e015      	b.n	8007aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a7e:	4b3f      	ldr	r3, [pc, #252]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a84:	f7fd fcec 	bl	8005460 <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a8c:	f7fd fce8 	bl	8005460 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e184      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a9e:	4b36      	ldr	r3, [pc, #216]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1f0      	bne.n	8007a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d030      	beq.n	8007b18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d016      	beq.n	8007aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007abe:	4b30      	ldr	r3, [pc, #192]	; (8007b80 <HAL_RCC_OscConfig+0x2b4>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac4:	f7fd fccc 	bl	8005460 <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007acc:	f7fd fcc8 	bl	8005460 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e164      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ade:	4b26      	ldr	r3, [pc, #152]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f0      	beq.n	8007acc <HAL_RCC_OscConfig+0x200>
 8007aea:	e015      	b.n	8007b18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007aec:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <HAL_RCC_OscConfig+0x2b4>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007af2:	f7fd fcb5 	bl	8005460 <HAL_GetTick>
 8007af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007af8:	e008      	b.n	8007b0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007afa:	f7fd fcb1 	bl	8005460 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e14d      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1f0      	bne.n	8007afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 80a0 	beq.w	8007c66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b26:	2300      	movs	r3, #0
 8007b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b2a:	4b13      	ldr	r3, [pc, #76]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10f      	bne.n	8007b56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b44:	6413      	str	r3, [r2, #64]	; 0x40
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <HAL_RCC_OscConfig+0x2ac>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b4e:	60bb      	str	r3, [r7, #8]
 8007b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b52:	2301      	movs	r3, #1
 8007b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <HAL_RCC_OscConfig+0x2b8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d121      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b62:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <HAL_RCC_OscConfig+0x2b8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a07      	ldr	r2, [pc, #28]	; (8007b84 <HAL_RCC_OscConfig+0x2b8>)
 8007b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b6e:	f7fd fc77 	bl	8005460 <HAL_GetTick>
 8007b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b74:	e011      	b.n	8007b9a <HAL_RCC_OscConfig+0x2ce>
 8007b76:	bf00      	nop
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	42470000 	.word	0x42470000
 8007b80:	42470e80 	.word	0x42470e80
 8007b84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b88:	f7fd fc6a 	bl	8005460 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e106      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b9a:	4b85      	ldr	r3, [pc, #532]	; (8007db0 <HAL_RCC_OscConfig+0x4e4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d106      	bne.n	8007bbc <HAL_RCC_OscConfig+0x2f0>
 8007bae:	4b81      	ldr	r3, [pc, #516]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb2:	4a80      	ldr	r2, [pc, #512]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007bb4:	f043 0301 	orr.w	r3, r3, #1
 8007bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8007bba:	e01c      	b.n	8007bf6 <HAL_RCC_OscConfig+0x32a>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b05      	cmp	r3, #5
 8007bc2:	d10c      	bne.n	8007bde <HAL_RCC_OscConfig+0x312>
 8007bc4:	4b7b      	ldr	r3, [pc, #492]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc8:	4a7a      	ldr	r2, [pc, #488]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007bca:	f043 0304 	orr.w	r3, r3, #4
 8007bce:	6713      	str	r3, [r2, #112]	; 0x70
 8007bd0:	4b78      	ldr	r3, [pc, #480]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd4:	4a77      	ldr	r2, [pc, #476]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	6713      	str	r3, [r2, #112]	; 0x70
 8007bdc:	e00b      	b.n	8007bf6 <HAL_RCC_OscConfig+0x32a>
 8007bde:	4b75      	ldr	r3, [pc, #468]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be2:	4a74      	ldr	r2, [pc, #464]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	6713      	str	r3, [r2, #112]	; 0x70
 8007bea:	4b72      	ldr	r3, [pc, #456]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bee:	4a71      	ldr	r2, [pc, #452]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007bf0:	f023 0304 	bic.w	r3, r3, #4
 8007bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d015      	beq.n	8007c2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bfe:	f7fd fc2f 	bl	8005460 <HAL_GetTick>
 8007c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c04:	e00a      	b.n	8007c1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c06:	f7fd fc2b 	bl	8005460 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d901      	bls.n	8007c1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e0c5      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c1c:	4b65      	ldr	r3, [pc, #404]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0ee      	beq.n	8007c06 <HAL_RCC_OscConfig+0x33a>
 8007c28:	e014      	b.n	8007c54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c2a:	f7fd fc19 	bl	8005460 <HAL_GetTick>
 8007c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c30:	e00a      	b.n	8007c48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c32:	f7fd fc15 	bl	8005460 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d901      	bls.n	8007c48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e0af      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c48:	4b5a      	ldr	r3, [pc, #360]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1ee      	bne.n	8007c32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d105      	bne.n	8007c66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c5a:	4b56      	ldr	r3, [pc, #344]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	4a55      	ldr	r2, [pc, #340]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 809b 	beq.w	8007da6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c70:	4b50      	ldr	r3, [pc, #320]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 030c 	and.w	r3, r3, #12
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d05c      	beq.n	8007d36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d141      	bne.n	8007d08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c84:	4b4c      	ldr	r3, [pc, #304]	; (8007db8 <HAL_RCC_OscConfig+0x4ec>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c8a:	f7fd fbe9 	bl	8005460 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c92:	f7fd fbe5 	bl	8005460 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e081      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ca4:	4b43      	ldr	r3, [pc, #268]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1f0      	bne.n	8007c92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	019b      	lsls	r3, r3, #6
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	061b      	lsls	r3, r3, #24
 8007cd4:	4937      	ldr	r1, [pc, #220]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cda:	4b37      	ldr	r3, [pc, #220]	; (8007db8 <HAL_RCC_OscConfig+0x4ec>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce0:	f7fd fbbe 	bl	8005460 <HAL_GetTick>
 8007ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ce8:	f7fd fbba 	bl	8005460 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e056      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cfa:	4b2e      	ldr	r3, [pc, #184]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f0      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x41c>
 8007d06:	e04e      	b.n	8007da6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d08:	4b2b      	ldr	r3, [pc, #172]	; (8007db8 <HAL_RCC_OscConfig+0x4ec>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d0e:	f7fd fba7 	bl	8005460 <HAL_GetTick>
 8007d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d14:	e008      	b.n	8007d28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d16:	f7fd fba3 	bl	8005460 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e03f      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d28:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1f0      	bne.n	8007d16 <HAL_RCC_OscConfig+0x44a>
 8007d34:	e037      	b.n	8007da6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d101      	bne.n	8007d42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e032      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d42:	4b1c      	ldr	r3, [pc, #112]	; (8007db4 <HAL_RCC_OscConfig+0x4e8>)
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d028      	beq.n	8007da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d121      	bne.n	8007da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d11a      	bne.n	8007da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d72:	4013      	ands	r3, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d111      	bne.n	8007da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d107      	bne.n	8007da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d001      	beq.n	8007da6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	40007000 	.word	0x40007000
 8007db4:	40023800 	.word	0x40023800
 8007db8:	42470060 	.word	0x42470060

08007dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0cc      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dd0:	4b68      	ldr	r3, [pc, #416]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d90c      	bls.n	8007df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dde:	4b65      	ldr	r3, [pc, #404]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007de6:	4b63      	ldr	r3, [pc, #396]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d001      	beq.n	8007df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e0b8      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d020      	beq.n	8007e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e10:	4b59      	ldr	r3, [pc, #356]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	4a58      	ldr	r2, [pc, #352]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e28:	4b53      	ldr	r3, [pc, #332]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	4a52      	ldr	r2, [pc, #328]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e34:	4b50      	ldr	r3, [pc, #320]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	494d      	ldr	r1, [pc, #308]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d044      	beq.n	8007edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d107      	bne.n	8007e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e5a:	4b47      	ldr	r3, [pc, #284]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d119      	bne.n	8007e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e07f      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d003      	beq.n	8007e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d107      	bne.n	8007e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e7a:	4b3f      	ldr	r3, [pc, #252]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e06f      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e8a:	4b3b      	ldr	r3, [pc, #236]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e067      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e9a:	4b37      	ldr	r3, [pc, #220]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f023 0203 	bic.w	r2, r3, #3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	4934      	ldr	r1, [pc, #208]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007eac:	f7fd fad8 	bl	8005460 <HAL_GetTick>
 8007eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eb2:	e00a      	b.n	8007eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eb4:	f7fd fad4 	bl	8005460 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e04f      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eca:	4b2b      	ldr	r3, [pc, #172]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 020c 	and.w	r2, r3, #12
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d1eb      	bne.n	8007eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007edc:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d20c      	bcs.n	8007f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eea:	4b22      	ldr	r3, [pc, #136]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ef2:	4b20      	ldr	r3, [pc, #128]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d001      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e032      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f10:	4b19      	ldr	r3, [pc, #100]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	4916      	ldr	r1, [pc, #88]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d009      	beq.n	8007f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	490e      	ldr	r1, [pc, #56]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f42:	f000 f821 	bl	8007f88 <HAL_RCC_GetSysClockFreq>
 8007f46:	4602      	mov	r2, r0
 8007f48:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	091b      	lsrs	r3, r3, #4
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	490a      	ldr	r1, [pc, #40]	; (8007f7c <HAL_RCC_ClockConfig+0x1c0>)
 8007f54:	5ccb      	ldrb	r3, [r1, r3]
 8007f56:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5a:	4a09      	ldr	r2, [pc, #36]	; (8007f80 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <HAL_RCC_ClockConfig+0x1c8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd fa38 	bl	80053d8 <HAL_InitTick>

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	40023c00 	.word	0x40023c00
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	08023bdc 	.word	0x08023bdc
 8007f80:	200029ec 	.word	0x200029ec
 8007f84:	200029f0 	.word	0x200029f0

08007f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f88:	b5b0      	push	{r4, r5, r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f8e:	2100      	movs	r1, #0
 8007f90:	6079      	str	r1, [r7, #4]
 8007f92:	2100      	movs	r1, #0
 8007f94:	60f9      	str	r1, [r7, #12]
 8007f96:	2100      	movs	r1, #0
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f9e:	4952      	ldr	r1, [pc, #328]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007fa0:	6889      	ldr	r1, [r1, #8]
 8007fa2:	f001 010c 	and.w	r1, r1, #12
 8007fa6:	2908      	cmp	r1, #8
 8007fa8:	d00d      	beq.n	8007fc6 <HAL_RCC_GetSysClockFreq+0x3e>
 8007faa:	2908      	cmp	r1, #8
 8007fac:	f200 8094 	bhi.w	80080d8 <HAL_RCC_GetSysClockFreq+0x150>
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_RCC_GetSysClockFreq+0x32>
 8007fb4:	2904      	cmp	r1, #4
 8007fb6:	d003      	beq.n	8007fc0 <HAL_RCC_GetSysClockFreq+0x38>
 8007fb8:	e08e      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fba:	4b4c      	ldr	r3, [pc, #304]	; (80080ec <HAL_RCC_GetSysClockFreq+0x164>)
 8007fbc:	60bb      	str	r3, [r7, #8]
       break;
 8007fbe:	e08e      	b.n	80080de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fc0:	4b4b      	ldr	r3, [pc, #300]	; (80080f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007fc2:	60bb      	str	r3, [r7, #8]
      break;
 8007fc4:	e08b      	b.n	80080de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fc6:	4948      	ldr	r1, [pc, #288]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007fc8:	6849      	ldr	r1, [r1, #4]
 8007fca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007fce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fd0:	4945      	ldr	r1, [pc, #276]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007fd2:	6849      	ldr	r1, [r1, #4]
 8007fd4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007fd8:	2900      	cmp	r1, #0
 8007fda:	d024      	beq.n	8008026 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fdc:	4942      	ldr	r1, [pc, #264]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007fde:	6849      	ldr	r1, [r1, #4]
 8007fe0:	0989      	lsrs	r1, r1, #6
 8007fe2:	4608      	mov	r0, r1
 8007fe4:	f04f 0100 	mov.w	r1, #0
 8007fe8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007fec:	f04f 0500 	mov.w	r5, #0
 8007ff0:	ea00 0204 	and.w	r2, r0, r4
 8007ff4:	ea01 0305 	and.w	r3, r1, r5
 8007ff8:	493d      	ldr	r1, [pc, #244]	; (80080f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007ffa:	fb01 f003 	mul.w	r0, r1, r3
 8007ffe:	2100      	movs	r1, #0
 8008000:	fb01 f102 	mul.w	r1, r1, r2
 8008004:	1844      	adds	r4, r0, r1
 8008006:	493a      	ldr	r1, [pc, #232]	; (80080f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8008008:	fba2 0101 	umull	r0, r1, r2, r1
 800800c:	1863      	adds	r3, r4, r1
 800800e:	4619      	mov	r1, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	461a      	mov	r2, r3
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	f7f8 fe3e 	bl	8000c98 <__aeabi_uldivmod>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4613      	mov	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e04a      	b.n	80080bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008026:	4b30      	ldr	r3, [pc, #192]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	099b      	lsrs	r3, r3, #6
 800802c:	461a      	mov	r2, r3
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008036:	f04f 0100 	mov.w	r1, #0
 800803a:	ea02 0400 	and.w	r4, r2, r0
 800803e:	ea03 0501 	and.w	r5, r3, r1
 8008042:	4620      	mov	r0, r4
 8008044:	4629      	mov	r1, r5
 8008046:	f04f 0200 	mov.w	r2, #0
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	014b      	lsls	r3, r1, #5
 8008050:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008054:	0142      	lsls	r2, r0, #5
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	1b00      	subs	r0, r0, r4
 800805c:	eb61 0105 	sbc.w	r1, r1, r5
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	018b      	lsls	r3, r1, #6
 800806a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800806e:	0182      	lsls	r2, r0, #6
 8008070:	1a12      	subs	r2, r2, r0
 8008072:	eb63 0301 	sbc.w	r3, r3, r1
 8008076:	f04f 0000 	mov.w	r0, #0
 800807a:	f04f 0100 	mov.w	r1, #0
 800807e:	00d9      	lsls	r1, r3, #3
 8008080:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008084:	00d0      	lsls	r0, r2, #3
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	1912      	adds	r2, r2, r4
 800808c:	eb45 0303 	adc.w	r3, r5, r3
 8008090:	f04f 0000 	mov.w	r0, #0
 8008094:	f04f 0100 	mov.w	r1, #0
 8008098:	0299      	lsls	r1, r3, #10
 800809a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800809e:	0290      	lsls	r0, r2, #10
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4610      	mov	r0, r2
 80080a6:	4619      	mov	r1, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f04f 0300 	mov.w	r3, #0
 80080b0:	f7f8 fdf2 	bl	8000c98 <__aeabi_uldivmod>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4613      	mov	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	0c1b      	lsrs	r3, r3, #16
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	3301      	adds	r3, #1
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d4:	60bb      	str	r3, [r7, #8]
      break;
 80080d6:	e002      	b.n	80080de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080d8:	4b04      	ldr	r3, [pc, #16]	; (80080ec <HAL_RCC_GetSysClockFreq+0x164>)
 80080da:	60bb      	str	r3, [r7, #8]
      break;
 80080dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080de:	68bb      	ldr	r3, [r7, #8]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bdb0      	pop	{r4, r5, r7, pc}
 80080e8:	40023800 	.word	0x40023800
 80080ec:	00f42400 	.word	0x00f42400
 80080f0:	017d7840 	.word	0x017d7840

080080f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080f8:	4b03      	ldr	r3, [pc, #12]	; (8008108 <HAL_RCC_GetHCLKFreq+0x14>)
 80080fa:	681b      	ldr	r3, [r3, #0]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	200029ec 	.word	0x200029ec

0800810c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008110:	f7ff fff0 	bl	80080f4 <HAL_RCC_GetHCLKFreq>
 8008114:	4602      	mov	r2, r0
 8008116:	4b05      	ldr	r3, [pc, #20]	; (800812c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	0a9b      	lsrs	r3, r3, #10
 800811c:	f003 0307 	and.w	r3, r3, #7
 8008120:	4903      	ldr	r1, [pc, #12]	; (8008130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008122:	5ccb      	ldrb	r3, [r1, r3]
 8008124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008128:	4618      	mov	r0, r3
 800812a:	bd80      	pop	{r7, pc}
 800812c:	40023800 	.word	0x40023800
 8008130:	08023bec 	.word	0x08023bec

08008134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008138:	f7ff ffdc 	bl	80080f4 <HAL_RCC_GetHCLKFreq>
 800813c:	4602      	mov	r2, r0
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	0b5b      	lsrs	r3, r3, #13
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	4903      	ldr	r1, [pc, #12]	; (8008158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800814a:	5ccb      	ldrb	r3, [r1, r3]
 800814c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008150:	4618      	mov	r0, r3
 8008152:	bd80      	pop	{r7, pc}
 8008154:	40023800 	.word	0x40023800
 8008158:	08023bec 	.word	0x08023bec

0800815c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d105      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008180:	2b00      	cmp	r3, #0
 8008182:	d035      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008184:	4b67      	ldr	r3, [pc, #412]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008186:	2200      	movs	r2, #0
 8008188:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800818a:	f7fd f969 	bl	8005460 <HAL_GetTick>
 800818e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008190:	e008      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008192:	f7fd f965 	bl	8005460 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e0ba      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081a4:	4b60      	ldr	r3, [pc, #384]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f0      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	019a      	lsls	r2, r3, #6
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	071b      	lsls	r3, r3, #28
 80081bc:	495a      	ldr	r1, [pc, #360]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081c4:	4b57      	ldr	r3, [pc, #348]	; (8008324 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081ca:	f7fd f949 	bl	8005460 <HAL_GetTick>
 80081ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081d0:	e008      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081d2:	f7fd f945 	bl	8005460 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d901      	bls.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e09a      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081e4:	4b50      	ldr	r3, [pc, #320]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0f0      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8083 	beq.w	8008304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	4b49      	ldr	r3, [pc, #292]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	4a48      	ldr	r2, [pc, #288]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800820c:	6413      	str	r3, [r2, #64]	; 0x40
 800820e:	4b46      	ldr	r3, [pc, #280]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800821a:	4b44      	ldr	r3, [pc, #272]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a43      	ldr	r2, [pc, #268]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008224:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008226:	f7fd f91b 	bl	8005460 <HAL_GetTick>
 800822a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800822e:	f7fd f917 	bl	8005460 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e06c      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008240:	4b3a      	ldr	r3, [pc, #232]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0f0      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800824c:	4b36      	ldr	r3, [pc, #216]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800824e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008254:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d02f      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	429a      	cmp	r2, r3
 8008268:	d028      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800826a:	4b2f      	ldr	r3, [pc, #188]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008272:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008274:	4b2e      	ldr	r3, [pc, #184]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800827a:	4b2d      	ldr	r3, [pc, #180]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800827c:	2200      	movs	r2, #0
 800827e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008280:	4a29      	ldr	r2, [pc, #164]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008286:	4b28      	ldr	r3, [pc, #160]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b01      	cmp	r3, #1
 8008290:	d114      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008292:	f7fd f8e5 	bl	8005460 <HAL_GetTick>
 8008296:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008298:	e00a      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800829a:	f7fd f8e1 	bl	8005460 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e034      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082b0:	4b1d      	ldr	r3, [pc, #116]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80082b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0ee      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082c8:	d10d      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80082ca:	4b17      	ldr	r3, [pc, #92]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80082da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082de:	4912      	ldr	r1, [pc, #72]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	608b      	str	r3, [r1, #8]
 80082e4:	e005      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80082e6:	4b10      	ldr	r3, [pc, #64]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	4a0f      	ldr	r2, [pc, #60]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80082ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80082f0:	6093      	str	r3, [r2, #8]
 80082f2:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80082f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082fe:	490a      	ldr	r1, [pc, #40]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008300:	4313      	orrs	r3, r2
 8008302:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	7c1a      	ldrb	r2, [r3, #16]
 8008314:	4b07      	ldr	r3, [pc, #28]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008316:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	42470068 	.word	0x42470068
 8008328:	40023800 	.word	0x40023800
 800832c:	40007000 	.word	0x40007000
 8008330:	42470e40 	.word	0x42470e40
 8008334:	424711e0 	.word	0x424711e0

08008338 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e083      	b.n	8008452 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	7f5b      	ldrb	r3, [r3, #29]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d105      	bne.n	8008360 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fb ff2a 	bl	80041b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	22ca      	movs	r2, #202	; 0xca
 800836c:	625a      	str	r2, [r3, #36]	; 0x24
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2253      	movs	r2, #83	; 0x53
 8008374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 faa8 	bl	80088cc <RTC_EnterInitMode>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	22ff      	movs	r2, #255	; 0xff
 8008388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2204      	movs	r2, #4
 800838e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e05e      	b.n	8008452 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6899      	ldr	r1, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	431a      	orrs	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	68d2      	ldr	r2, [r2, #12]
 80083ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6919      	ldr	r1, [r3, #16]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	041a      	lsls	r2, r3, #16
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10e      	bne.n	8008420 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa3a 	bl	800887c <HAL_RTC_WaitForSynchro>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d008      	beq.n	8008420 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	22ff      	movs	r2, #255	; 0xff
 8008414:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2204      	movs	r2, #4
 800841a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e018      	b.n	8008452 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800842e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	22ff      	movs	r2, #255	; 0xff
 8008448:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008450:	2300      	movs	r3, #0
  }
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800845a:	b590      	push	{r4, r7, lr}
 800845c:	b087      	sub	sp, #28
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	7f1b      	ldrb	r3, [r3, #28]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_RTC_SetTime+0x1c>
 8008472:	2302      	movs	r3, #2
 8008474:	e0aa      	b.n	80085cc <HAL_RTC_SetTime+0x172>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2202      	movs	r2, #2
 8008480:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d126      	bne.n	80084d6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d102      	bne.n	800849c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2200      	movs	r2, #0
 800849a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fa3f 	bl	8008924 <RTC_ByteToBcd2>
 80084a6:	4603      	mov	r3, r0
 80084a8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fa38 	bl	8008924 <RTC_ByteToBcd2>
 80084b4:	4603      	mov	r3, r0
 80084b6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80084b8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	789b      	ldrb	r3, [r3, #2]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fa30 	bl	8008924 <RTC_ByteToBcd2>
 80084c4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80084c6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	78db      	ldrb	r3, [r3, #3]
 80084ce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80084d0:	4313      	orrs	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	e018      	b.n	8008508 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2200      	movs	r2, #0
 80084e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80084f6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80084fc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	78db      	ldrb	r3, [r3, #3]
 8008502:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008504:	4313      	orrs	r3, r2
 8008506:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	22ca      	movs	r2, #202	; 0xca
 800850e:	625a      	str	r2, [r3, #36]	; 0x24
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2253      	movs	r2, #83	; 0x53
 8008516:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f9d7 	bl	80088cc <RTC_EnterInitMode>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00b      	beq.n	800853c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	22ff      	movs	r2, #255	; 0xff
 800852a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2204      	movs	r2, #4
 8008530:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e047      	b.n	80085cc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008546:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800854a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800855a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6899      	ldr	r1, [r3, #8]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	431a      	orrs	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008582:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b00      	cmp	r3, #0
 8008590:	d111      	bne.n	80085b6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f972 	bl	800887c <HAL_RTC_WaitForSynchro>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00b      	beq.n	80085b6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	22ff      	movs	r2, #255	; 0xff
 80085a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2204      	movs	r2, #4
 80085aa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e00a      	b.n	80085cc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	22ff      	movs	r2, #255	; 0xff
 80085bc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2201      	movs	r2, #1
 80085c2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80085ca:	2300      	movs	r3, #0
  }
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	371c      	adds	r7, #28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd90      	pop	{r4, r7, pc}

080085d4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008606:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800860a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	0c1b      	lsrs	r3, r3, #16
 8008610:	b2db      	uxtb	r3, r3
 8008612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008616:	b2da      	uxtb	r2, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008626:	b2da      	uxtb	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008634:	b2da      	uxtb	r2, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	0c1b      	lsrs	r3, r3, #16
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d11a      	bne.n	8008686 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f983 	bl	8008960 <RTC_Bcd2ToByte>
 800865a:	4603      	mov	r3, r0
 800865c:	461a      	mov	r2, r3
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f97a 	bl	8008960 <RTC_Bcd2ToByte>
 800866c:	4603      	mov	r3, r0
 800866e:	461a      	mov	r2, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	789b      	ldrb	r3, [r3, #2]
 8008678:	4618      	mov	r0, r3
 800867a:	f000 f971 	bl	8008960 <RTC_Bcd2ToByte>
 800867e:	4603      	mov	r3, r0
 8008680:	461a      	mov	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	7f1b      	ldrb	r3, [r3, #28]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d101      	bne.n	80086ac <HAL_RTC_SetDate+0x1c>
 80086a8:	2302      	movs	r3, #2
 80086aa:	e094      	b.n	80087d6 <HAL_RTC_SetDate+0x146>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2201      	movs	r2, #1
 80086b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2202      	movs	r2, #2
 80086b6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10e      	bne.n	80086dc <HAL_RTC_SetDate+0x4c>
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	f003 0310 	and.w	r3, r3, #16
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d008      	beq.n	80086dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	f023 0310 	bic.w	r3, r3, #16
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	330a      	adds	r3, #10
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d11c      	bne.n	800871c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	78db      	ldrb	r3, [r3, #3]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 f91c 	bl	8008924 <RTC_ByteToBcd2>
 80086ec:	4603      	mov	r3, r0
 80086ee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	785b      	ldrb	r3, [r3, #1]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f915 	bl	8008924 <RTC_ByteToBcd2>
 80086fa:	4603      	mov	r3, r0
 80086fc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80086fe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	789b      	ldrb	r3, [r3, #2]
 8008704:	4618      	mov	r0, r3
 8008706:	f000 f90d 	bl	8008924 <RTC_ByteToBcd2>
 800870a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800870c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008716:	4313      	orrs	r3, r2
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	e00e      	b.n	800873a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	78db      	ldrb	r3, [r3, #3]
 8008720:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	785b      	ldrb	r3, [r3, #1]
 8008726:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008728:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800872e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	22ca      	movs	r2, #202	; 0xca
 8008740:	625a      	str	r2, [r3, #36]	; 0x24
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2253      	movs	r2, #83	; 0x53
 8008748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 f8be 	bl	80088cc <RTC_EnterInitMode>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	22ff      	movs	r2, #255	; 0xff
 800875c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2204      	movs	r2, #4
 8008762:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e033      	b.n	80087d6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008778:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800877c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68da      	ldr	r2, [r3, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800878c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 0320 	and.w	r3, r3, #32
 8008798:	2b00      	cmp	r3, #0
 800879a:	d111      	bne.n	80087c0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 f86d 	bl	800887c <HAL_RTC_WaitForSynchro>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	22ff      	movs	r2, #255	; 0xff
 80087ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2204      	movs	r2, #4
 80087b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e00a      	b.n	80087d6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	22ff      	movs	r2, #255	; 0xff
 80087c6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80087d4:	2300      	movs	r3, #0
  }
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	371c      	adds	r7, #28
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd90      	pop	{r4, r7, pc}

080087de <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80087f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	0c1b      	lsrs	r3, r3, #16
 8008802:	b2da      	uxtb	r2, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	b2da      	uxtb	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008820:	b2da      	uxtb	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	0b5b      	lsrs	r3, r3, #13
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 0307 	and.w	r3, r3, #7
 8008830:	b2da      	uxtb	r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d11a      	bne.n	8008872 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	78db      	ldrb	r3, [r3, #3]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 f88d 	bl	8008960 <RTC_Bcd2ToByte>
 8008846:	4603      	mov	r3, r0
 8008848:	461a      	mov	r2, r3
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f884 	bl	8008960 <RTC_Bcd2ToByte>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	789b      	ldrb	r3, [r3, #2]
 8008864:	4618      	mov	r0, r3
 8008866:	f000 f87b 	bl	8008960 <RTC_Bcd2ToByte>
 800886a:	4603      	mov	r3, r0
 800886c:	461a      	mov	r2, r3
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008896:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008898:	f7fc fde2 	bl	8005460 <HAL_GetTick>
 800889c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800889e:	e009      	b.n	80088b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088a0:	f7fc fdde 	bl	8005460 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088ae:	d901      	bls.n	80088b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e007      	b.n	80088c4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0ee      	beq.n	80088a0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d119      	bne.n	800891a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f04f 32ff 	mov.w	r2, #4294967295
 80088ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088f0:	f7fc fdb6 	bl	8005460 <HAL_GetTick>
 80088f4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088f6:	e009      	b.n	800890c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088f8:	f7fc fdb2 	bl	8005460 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008906:	d901      	bls.n	800890c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e007      	b.n	800891c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0ee      	beq.n	80088f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	4603      	mov	r3, r0
 800892c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008932:	e005      	b.n	8008940 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3301      	adds	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	3b0a      	subs	r3, #10
 800893e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	2b09      	cmp	r3, #9
 8008944:	d8f6      	bhi.n	8008934 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	b2da      	uxtb	r2, r3
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	4313      	orrs	r3, r2
 8008952:	b2db      	uxtb	r3, r3
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	091b      	lsrs	r3, r3, #4
 8008972:	b2db      	uxtb	r3, r3
 8008974:	461a      	mov	r2, r3
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	b2da      	uxtb	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	4413      	add	r3, r2
 800898e:	b2db      	uxtb	r3, r3
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3350      	adds	r3, #80	; 0x50
 80089b2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4413      	add	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	601a      	str	r2, [r3, #0]
}
 80089c4:	bf00      	nop
 80089c6:	371c      	adds	r7, #28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3350      	adds	r3, #80	; 0x50
 80089e4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4413      	add	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e07b      	b.n	8008b0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d108      	bne.n	8008a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a22:	d009      	beq.n	8008a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	61da      	str	r2, [r3, #28]
 8008a2a:	e005      	b.n	8008a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d106      	bne.n	8008a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fb fbc4 	bl	80041e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a80:	431a      	orrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	431a      	orrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008abc:	ea42 0103 	orr.w	r1, r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	0c1b      	lsrs	r3, r3, #16
 8008ad6:	f003 0104 	and.w	r1, r3, #4
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	f003 0210 	and.w	r2, r3, #16
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	69da      	ldr	r2, [r3, #28]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b088      	sub	sp, #32
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d101      	bne.n	8008b34 <HAL_SPI_Transmit+0x22>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e126      	b.n	8008d82 <HAL_SPI_Transmit+0x270>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b3c:	f7fc fc90 	bl	8005460 <HAL_GetTick>
 8008b40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008b42:	88fb      	ldrh	r3, [r7, #6]
 8008b44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d002      	beq.n	8008b58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008b52:	2302      	movs	r3, #2
 8008b54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b56:	e10b      	b.n	8008d70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_SPI_Transmit+0x52>
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b68:	e102      	b.n	8008d70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	88fa      	ldrh	r2, [r7, #6]
 8008b82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	88fa      	ldrh	r2, [r7, #6]
 8008b88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb0:	d10f      	bne.n	8008bd2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bdc:	2b40      	cmp	r3, #64	; 0x40
 8008bde:	d007      	beq.n	8008bf0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bf8:	d14b      	bne.n	8008c92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <HAL_SPI_Transmit+0xf6>
 8008c02:	8afb      	ldrh	r3, [r7, #22]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d13e      	bne.n	8008c86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0c:	881a      	ldrh	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c18:	1c9a      	adds	r2, r3, #2
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c2c:	e02b      	b.n	8008c86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f003 0302 	and.w	r3, r3, #2
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d112      	bne.n	8008c62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c40:	881a      	ldrh	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4c:	1c9a      	adds	r2, r3, #2
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c60:	e011      	b.n	8008c86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c62:	f7fc fbfd 	bl	8005460 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d803      	bhi.n	8008c7a <HAL_SPI_Transmit+0x168>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c78:	d102      	bne.n	8008c80 <HAL_SPI_Transmit+0x16e>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d102      	bne.n	8008c86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c84:	e074      	b.n	8008d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1ce      	bne.n	8008c2e <HAL_SPI_Transmit+0x11c>
 8008c90:	e04c      	b.n	8008d2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <HAL_SPI_Transmit+0x18e>
 8008c9a:	8afb      	ldrh	r3, [r7, #22]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d140      	bne.n	8008d22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	330c      	adds	r3, #12
 8008caa:	7812      	ldrb	r2, [r2, #0]
 8008cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008cc6:	e02c      	b.n	8008d22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d113      	bne.n	8008cfe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	330c      	adds	r3, #12
 8008ce0:	7812      	ldrb	r2, [r2, #0]
 8008ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8008cfc:	e011      	b.n	8008d22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cfe:	f7fc fbaf 	bl	8005460 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d803      	bhi.n	8008d16 <HAL_SPI_Transmit+0x204>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d102      	bne.n	8008d1c <HAL_SPI_Transmit+0x20a>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d20:	e026      	b.n	8008d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1cd      	bne.n	8008cc8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f8b3 	bl	8008e9c <SPI_EndRxTxTransaction>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10a      	bne.n	8008d60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	613b      	str	r3, [r7, #16]
 8008d5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	77fb      	strb	r3, [r7, #31]
 8008d6c:	e000      	b.n	8008d70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3720      	adds	r7, #32
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d9c:	f7fc fb60 	bl	8005460 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	4413      	add	r3, r2
 8008daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008dac:	f7fc fb58 	bl	8005460 <HAL_GetTick>
 8008db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008db2:	4b39      	ldr	r3, [pc, #228]	; (8008e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	015b      	lsls	r3, r3, #5
 8008db8:	0d1b      	lsrs	r3, r3, #20
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	fb02 f303 	mul.w	r3, r2, r3
 8008dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dc2:	e054      	b.n	8008e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dca:	d050      	beq.n	8008e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dcc:	f7fc fb48 	bl	8005460 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d902      	bls.n	8008de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d13d      	bne.n	8008e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dfa:	d111      	bne.n	8008e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e04:	d004      	beq.n	8008e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e0e:	d107      	bne.n	8008e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e28:	d10f      	bne.n	8008e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e017      	b.n	8008e8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4013      	ands	r3, r2
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	bf0c      	ite	eq
 8008e7e:	2301      	moveq	r3, #1
 8008e80:	2300      	movne	r3, #0
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	461a      	mov	r2, r3
 8008e86:	79fb      	ldrb	r3, [r7, #7]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d19b      	bne.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3720      	adds	r7, #32
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	200029ec 	.word	0x200029ec

08008e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ea8:	4b1b      	ldr	r3, [pc, #108]	; (8008f18 <SPI_EndRxTxTransaction+0x7c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1b      	ldr	r2, [pc, #108]	; (8008f1c <SPI_EndRxTxTransaction+0x80>)
 8008eae:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb2:	0d5b      	lsrs	r3, r3, #21
 8008eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008eb8:	fb02 f303 	mul.w	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ec6:	d112      	bne.n	8008eee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2180      	movs	r1, #128	; 0x80
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f7ff ff5a 	bl	8008d8c <SPI_WaitFlagStateUntilTimeout>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d016      	beq.n	8008f0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee2:	f043 0220 	orr.w	r2, r3, #32
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e00f      	b.n	8008f0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00a      	beq.n	8008f0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f04:	2b80      	cmp	r3, #128	; 0x80
 8008f06:	d0f2      	beq.n	8008eee <SPI_EndRxTxTransaction+0x52>
 8008f08:	e000      	b.n	8008f0c <SPI_EndRxTxTransaction+0x70>
        break;
 8008f0a:	bf00      	nop
  }

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	200029ec 	.word	0x200029ec
 8008f1c:	165e9f81 	.word	0x165e9f81

08008f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e041      	b.n	8008fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7fb f992 	bl	8004270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	f000 fce8 	bl	8009934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d001      	beq.n	8008fd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e044      	b.n	8009062 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a1e      	ldr	r2, [pc, #120]	; (8009070 <HAL_TIM_Base_Start_IT+0xb0>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d018      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x6c>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009002:	d013      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x6c>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1a      	ldr	r2, [pc, #104]	; (8009074 <HAL_TIM_Base_Start_IT+0xb4>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d00e      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x6c>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a19      	ldr	r2, [pc, #100]	; (8009078 <HAL_TIM_Base_Start_IT+0xb8>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d009      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x6c>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a17      	ldr	r2, [pc, #92]	; (800907c <HAL_TIM_Base_Start_IT+0xbc>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d004      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x6c>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a16      	ldr	r2, [pc, #88]	; (8009080 <HAL_TIM_Base_Start_IT+0xc0>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d111      	bne.n	8009050 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b06      	cmp	r3, #6
 800903c:	d010      	beq.n	8009060 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f042 0201 	orr.w	r2, r2, #1
 800904c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800904e:	e007      	b.n	8009060 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0201 	orr.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	40010000 	.word	0x40010000
 8009074:	40000400 	.word	0x40000400
 8009078:	40000800 	.word	0x40000800
 800907c:	40000c00 	.word	0x40000c00
 8009080:	40014000 	.word	0x40014000

08009084 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0201 	bic.w	r2, r2, #1
 800909a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6a1a      	ldr	r2, [r3, #32]
 80090a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80090a6:	4013      	ands	r3, r2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10f      	bne.n	80090cc <HAL_TIM_Base_Stop_IT+0x48>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6a1a      	ldr	r2, [r3, #32]
 80090b2:	f240 4344 	movw	r3, #1092	; 0x444
 80090b6:	4013      	ands	r3, r2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d107      	bne.n	80090cc <HAL_TIM_Base_Stop_IT+0x48>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0201 	bic.w	r2, r2, #1
 80090ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e041      	b.n	8009178 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d106      	bne.n	800910e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f839 	bl	8009180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3304      	adds	r3, #4
 800911e:	4619      	mov	r1, r3
 8009120:	4610      	mov	r0, r2
 8009122:	f000 fc07 	bl	8009934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d109      	bne.n	80091b8 <HAL_TIM_PWM_Start+0x24>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	bf14      	ite	ne
 80091b0:	2301      	movne	r3, #1
 80091b2:	2300      	moveq	r3, #0
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	e022      	b.n	80091fe <HAL_TIM_PWM_Start+0x6a>
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d109      	bne.n	80091d2 <HAL_TIM_PWM_Start+0x3e>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	bf14      	ite	ne
 80091ca:	2301      	movne	r3, #1
 80091cc:	2300      	moveq	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	e015      	b.n	80091fe <HAL_TIM_PWM_Start+0x6a>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d109      	bne.n	80091ec <HAL_TIM_PWM_Start+0x58>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	bf14      	ite	ne
 80091e4:	2301      	movne	r3, #1
 80091e6:	2300      	moveq	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	e008      	b.n	80091fe <HAL_TIM_PWM_Start+0x6a>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	bf14      	ite	ne
 80091f8:	2301      	movne	r3, #1
 80091fa:	2300      	moveq	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e068      	b.n	80092d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d104      	bne.n	8009216 <HAL_TIM_PWM_Start+0x82>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009214:	e013      	b.n	800923e <HAL_TIM_PWM_Start+0xaa>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b04      	cmp	r3, #4
 800921a:	d104      	bne.n	8009226 <HAL_TIM_PWM_Start+0x92>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009224:	e00b      	b.n	800923e <HAL_TIM_PWM_Start+0xaa>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b08      	cmp	r3, #8
 800922a:	d104      	bne.n	8009236 <HAL_TIM_PWM_Start+0xa2>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2202      	movs	r2, #2
 8009230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009234:	e003      	b.n	800923e <HAL_TIM_PWM_Start+0xaa>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2202      	movs	r2, #2
 800923a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2201      	movs	r2, #1
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fe1a 	bl	8009e80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a23      	ldr	r2, [pc, #140]	; (80092e0 <HAL_TIM_PWM_Start+0x14c>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d107      	bne.n	8009266 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a1d      	ldr	r2, [pc, #116]	; (80092e0 <HAL_TIM_PWM_Start+0x14c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d018      	beq.n	80092a2 <HAL_TIM_PWM_Start+0x10e>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009278:	d013      	beq.n	80092a2 <HAL_TIM_PWM_Start+0x10e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a19      	ldr	r2, [pc, #100]	; (80092e4 <HAL_TIM_PWM_Start+0x150>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d00e      	beq.n	80092a2 <HAL_TIM_PWM_Start+0x10e>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a17      	ldr	r2, [pc, #92]	; (80092e8 <HAL_TIM_PWM_Start+0x154>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d009      	beq.n	80092a2 <HAL_TIM_PWM_Start+0x10e>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a16      	ldr	r2, [pc, #88]	; (80092ec <HAL_TIM_PWM_Start+0x158>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d004      	beq.n	80092a2 <HAL_TIM_PWM_Start+0x10e>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a14      	ldr	r2, [pc, #80]	; (80092f0 <HAL_TIM_PWM_Start+0x15c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d111      	bne.n	80092c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b06      	cmp	r3, #6
 80092b2:	d010      	beq.n	80092d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c4:	e007      	b.n	80092d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0201 	orr.w	r2, r2, #1
 80092d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	40010000 	.word	0x40010000
 80092e4:	40000400 	.word	0x40000400
 80092e8:	40000800 	.word	0x40000800
 80092ec:	40000c00 	.word	0x40000c00
 80092f0:	40014000 	.word	0x40014000

080092f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2200      	movs	r2, #0
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fdba 	bl	8009e80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a29      	ldr	r2, [pc, #164]	; (80093b8 <HAL_TIM_PWM_Stop+0xc4>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d117      	bne.n	8009346 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6a1a      	ldr	r2, [r3, #32]
 800931c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009320:	4013      	ands	r3, r2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10f      	bne.n	8009346 <HAL_TIM_PWM_Stop+0x52>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6a1a      	ldr	r2, [r3, #32]
 800932c:	f240 4344 	movw	r3, #1092	; 0x444
 8009330:	4013      	ands	r3, r2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d107      	bne.n	8009346 <HAL_TIM_PWM_Stop+0x52>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009344:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6a1a      	ldr	r2, [r3, #32]
 800934c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009350:	4013      	ands	r3, r2
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10f      	bne.n	8009376 <HAL_TIM_PWM_Stop+0x82>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6a1a      	ldr	r2, [r3, #32]
 800935c:	f240 4344 	movw	r3, #1092	; 0x444
 8009360:	4013      	ands	r3, r2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d107      	bne.n	8009376 <HAL_TIM_PWM_Stop+0x82>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0201 	bic.w	r2, r2, #1
 8009374:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d104      	bne.n	8009386 <HAL_TIM_PWM_Stop+0x92>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009384:	e013      	b.n	80093ae <HAL_TIM_PWM_Stop+0xba>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b04      	cmp	r3, #4
 800938a:	d104      	bne.n	8009396 <HAL_TIM_PWM_Stop+0xa2>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009394:	e00b      	b.n	80093ae <HAL_TIM_PWM_Stop+0xba>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b08      	cmp	r3, #8
 800939a:	d104      	bne.n	80093a6 <HAL_TIM_PWM_Stop+0xb2>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093a4:	e003      	b.n	80093ae <HAL_TIM_PWM_Stop+0xba>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	40010000 	.word	0x40010000

080093bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d122      	bne.n	8009418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d11b      	bne.n	8009418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0202 	mvn.w	r2, #2
 80093e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fa7a 	bl	80098f8 <HAL_TIM_IC_CaptureCallback>
 8009404:	e005      	b.n	8009412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fa6c 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fa7d 	bl	800990c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b04      	cmp	r3, #4
 8009424:	d122      	bne.n	800946c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b04      	cmp	r3, #4
 8009432:	d11b      	bne.n	800946c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f06f 0204 	mvn.w	r2, #4
 800943c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fa50 	bl	80098f8 <HAL_TIM_IC_CaptureCallback>
 8009458:	e005      	b.n	8009466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fa42 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa53 	bl	800990c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0308 	and.w	r3, r3, #8
 8009476:	2b08      	cmp	r3, #8
 8009478:	d122      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	2b08      	cmp	r3, #8
 8009486:	d11b      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0208 	mvn.w	r2, #8
 8009490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2204      	movs	r2, #4
 8009496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	f003 0303 	and.w	r3, r3, #3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fa26 	bl	80098f8 <HAL_TIM_IC_CaptureCallback>
 80094ac:	e005      	b.n	80094ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fa18 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fa29 	bl	800990c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	2b10      	cmp	r3, #16
 80094cc:	d122      	bne.n	8009514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f003 0310 	and.w	r3, r3, #16
 80094d8:	2b10      	cmp	r3, #16
 80094da:	d11b      	bne.n	8009514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f06f 0210 	mvn.w	r2, #16
 80094e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2208      	movs	r2, #8
 80094ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f9fc 	bl	80098f8 <HAL_TIM_IC_CaptureCallback>
 8009500:	e005      	b.n	800950e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f9ee 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f9ff 	bl	800990c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b01      	cmp	r3, #1
 8009520:	d10e      	bne.n	8009540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b01      	cmp	r3, #1
 800952e:	d107      	bne.n	8009540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0201 	mvn.w	r2, #1
 8009538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f9c8 	bl	80098d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954a:	2b80      	cmp	r3, #128	; 0x80
 800954c:	d10e      	bne.n	800956c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009558:	2b80      	cmp	r3, #128	; 0x80
 800955a:	d107      	bne.n	800956c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fd7a 	bl	800a060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009576:	2b40      	cmp	r3, #64	; 0x40
 8009578:	d10e      	bne.n	8009598 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009584:	2b40      	cmp	r3, #64	; 0x40
 8009586:	d107      	bne.n	8009598 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f9c4 	bl	8009920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d10e      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f003 0320 	and.w	r3, r3, #32
 80095b0:	2b20      	cmp	r3, #32
 80095b2:	d107      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f06f 0220 	mvn.w	r2, #32
 80095bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fd44 	bl	800a04c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095c4:	bf00      	nop
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d101      	bne.n	80095e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80095e2:	2302      	movs	r3, #2
 80095e4:	e0ac      	b.n	8009740 <HAL_TIM_PWM_ConfigChannel+0x174>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b0c      	cmp	r3, #12
 80095f2:	f200 809f 	bhi.w	8009734 <HAL_TIM_PWM_ConfigChannel+0x168>
 80095f6:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	08009631 	.word	0x08009631
 8009600:	08009735 	.word	0x08009735
 8009604:	08009735 	.word	0x08009735
 8009608:	08009735 	.word	0x08009735
 800960c:	08009671 	.word	0x08009671
 8009610:	08009735 	.word	0x08009735
 8009614:	08009735 	.word	0x08009735
 8009618:	08009735 	.word	0x08009735
 800961c:	080096b3 	.word	0x080096b3
 8009620:	08009735 	.word	0x08009735
 8009624:	08009735 	.word	0x08009735
 8009628:	08009735 	.word	0x08009735
 800962c:	080096f3 	.word	0x080096f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68b9      	ldr	r1, [r7, #8]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f9fc 	bl	8009a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f042 0208 	orr.w	r2, r2, #8
 800964a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699a      	ldr	r2, [r3, #24]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 0204 	bic.w	r2, r2, #4
 800965a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6999      	ldr	r1, [r3, #24]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	691a      	ldr	r2, [r3, #16]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	619a      	str	r2, [r3, #24]
      break;
 800966e:	e062      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68b9      	ldr	r1, [r7, #8]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 fa42 	bl	8009b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800968a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800969a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6999      	ldr	r1, [r3, #24]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	021a      	lsls	r2, r3, #8
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	619a      	str	r2, [r3, #24]
      break;
 80096b0:	e041      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68b9      	ldr	r1, [r7, #8]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 fa8d 	bl	8009bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69da      	ldr	r2, [r3, #28]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f042 0208 	orr.w	r2, r2, #8
 80096cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69da      	ldr	r2, [r3, #28]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0204 	bic.w	r2, r2, #4
 80096dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69d9      	ldr	r1, [r3, #28]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	691a      	ldr	r2, [r3, #16]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	61da      	str	r2, [r3, #28]
      break;
 80096f0:	e021      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68b9      	ldr	r1, [r7, #8]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fad7 	bl	8009cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69da      	ldr	r2, [r3, #28]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800970c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69da      	ldr	r2, [r3, #28]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800971c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69d9      	ldr	r1, [r3, #28]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	021a      	lsls	r2, r3, #8
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	61da      	str	r2, [r3, #28]
      break;
 8009732:	e000      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_TIM_ConfigClockSource+0x18>
 800975c:	2302      	movs	r3, #2
 800975e:	e0b3      	b.n	80098c8 <HAL_TIM_ConfigClockSource+0x180>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800977e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009786:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009798:	d03e      	beq.n	8009818 <HAL_TIM_ConfigClockSource+0xd0>
 800979a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800979e:	f200 8087 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x168>
 80097a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a6:	f000 8085 	beq.w	80098b4 <HAL_TIM_ConfigClockSource+0x16c>
 80097aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ae:	d87f      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x168>
 80097b0:	2b70      	cmp	r3, #112	; 0x70
 80097b2:	d01a      	beq.n	80097ea <HAL_TIM_ConfigClockSource+0xa2>
 80097b4:	2b70      	cmp	r3, #112	; 0x70
 80097b6:	d87b      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x168>
 80097b8:	2b60      	cmp	r3, #96	; 0x60
 80097ba:	d050      	beq.n	800985e <HAL_TIM_ConfigClockSource+0x116>
 80097bc:	2b60      	cmp	r3, #96	; 0x60
 80097be:	d877      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x168>
 80097c0:	2b50      	cmp	r3, #80	; 0x50
 80097c2:	d03c      	beq.n	800983e <HAL_TIM_ConfigClockSource+0xf6>
 80097c4:	2b50      	cmp	r3, #80	; 0x50
 80097c6:	d873      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x168>
 80097c8:	2b40      	cmp	r3, #64	; 0x40
 80097ca:	d058      	beq.n	800987e <HAL_TIM_ConfigClockSource+0x136>
 80097cc:	2b40      	cmp	r3, #64	; 0x40
 80097ce:	d86f      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x168>
 80097d0:	2b30      	cmp	r3, #48	; 0x30
 80097d2:	d064      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x156>
 80097d4:	2b30      	cmp	r3, #48	; 0x30
 80097d6:	d86b      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x168>
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d060      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x156>
 80097dc:	2b20      	cmp	r3, #32
 80097de:	d867      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x168>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d05c      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x156>
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	d05a      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80097e8:	e062      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	6899      	ldr	r1, [r3, #8]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	f000 fb21 	bl	8009e40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800980c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	609a      	str	r2, [r3, #8]
      break;
 8009816:	e04e      	b.n	80098b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	6899      	ldr	r1, [r3, #8]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f000 fb0a 	bl	8009e40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800983a:	609a      	str	r2, [r3, #8]
      break;
 800983c:	e03b      	b.n	80098b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	6859      	ldr	r1, [r3, #4]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	461a      	mov	r2, r3
 800984c:	f000 fa7e 	bl	8009d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2150      	movs	r1, #80	; 0x50
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fad7 	bl	8009e0a <TIM_ITRx_SetConfig>
      break;
 800985c:	e02b      	b.n	80098b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6818      	ldr	r0, [r3, #0]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	6859      	ldr	r1, [r3, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	461a      	mov	r2, r3
 800986c:	f000 fa9d 	bl	8009daa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2160      	movs	r1, #96	; 0x60
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fac7 	bl	8009e0a <TIM_ITRx_SetConfig>
      break;
 800987c:	e01b      	b.n	80098b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	6859      	ldr	r1, [r3, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	461a      	mov	r2, r3
 800988c:	f000 fa5e 	bl	8009d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2140      	movs	r1, #64	; 0x40
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fab7 	bl	8009e0a <TIM_ITRx_SetConfig>
      break;
 800989c:	e00b      	b.n	80098b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4619      	mov	r1, r3
 80098a8:	4610      	mov	r0, r2
 80098aa:	f000 faae 	bl	8009e0a <TIM_ITRx_SetConfig>
        break;
 80098ae:	e002      	b.n	80098b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80098b0:	bf00      	nop
 80098b2:	e000      	b.n	80098b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80098b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a34      	ldr	r2, [pc, #208]	; (8009a18 <TIM_Base_SetConfig+0xe4>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00f      	beq.n	800996c <TIM_Base_SetConfig+0x38>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009952:	d00b      	beq.n	800996c <TIM_Base_SetConfig+0x38>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a31      	ldr	r2, [pc, #196]	; (8009a1c <TIM_Base_SetConfig+0xe8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d007      	beq.n	800996c <TIM_Base_SetConfig+0x38>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a30      	ldr	r2, [pc, #192]	; (8009a20 <TIM_Base_SetConfig+0xec>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d003      	beq.n	800996c <TIM_Base_SetConfig+0x38>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a2f      	ldr	r2, [pc, #188]	; (8009a24 <TIM_Base_SetConfig+0xf0>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d108      	bne.n	800997e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a25      	ldr	r2, [pc, #148]	; (8009a18 <TIM_Base_SetConfig+0xe4>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d01b      	beq.n	80099be <TIM_Base_SetConfig+0x8a>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800998c:	d017      	beq.n	80099be <TIM_Base_SetConfig+0x8a>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a22      	ldr	r2, [pc, #136]	; (8009a1c <TIM_Base_SetConfig+0xe8>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d013      	beq.n	80099be <TIM_Base_SetConfig+0x8a>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a21      	ldr	r2, [pc, #132]	; (8009a20 <TIM_Base_SetConfig+0xec>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00f      	beq.n	80099be <TIM_Base_SetConfig+0x8a>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a20      	ldr	r2, [pc, #128]	; (8009a24 <TIM_Base_SetConfig+0xf0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00b      	beq.n	80099be <TIM_Base_SetConfig+0x8a>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a1f      	ldr	r2, [pc, #124]	; (8009a28 <TIM_Base_SetConfig+0xf4>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d007      	beq.n	80099be <TIM_Base_SetConfig+0x8a>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a1e      	ldr	r2, [pc, #120]	; (8009a2c <TIM_Base_SetConfig+0xf8>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d003      	beq.n	80099be <TIM_Base_SetConfig+0x8a>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a1d      	ldr	r2, [pc, #116]	; (8009a30 <TIM_Base_SetConfig+0xfc>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d108      	bne.n	80099d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	4313      	orrs	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a08      	ldr	r2, [pc, #32]	; (8009a18 <TIM_Base_SetConfig+0xe4>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d103      	bne.n	8009a04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	615a      	str	r2, [r3, #20]
}
 8009a0a:	bf00      	nop
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40000400 	.word	0x40000400
 8009a20:	40000800 	.word	0x40000800
 8009a24:	40000c00 	.word	0x40000c00
 8009a28:	40014000 	.word	0x40014000
 8009a2c:	40014400 	.word	0x40014400
 8009a30:	40014800 	.word	0x40014800

08009a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	f023 0201 	bic.w	r2, r3, #1
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f023 0303 	bic.w	r3, r3, #3
 8009a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f023 0302 	bic.w	r3, r3, #2
 8009a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a1c      	ldr	r2, [pc, #112]	; (8009afc <TIM_OC1_SetConfig+0xc8>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d10c      	bne.n	8009aaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f023 0308 	bic.w	r3, r3, #8
 8009a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f023 0304 	bic.w	r3, r3, #4
 8009aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a13      	ldr	r2, [pc, #76]	; (8009afc <TIM_OC1_SetConfig+0xc8>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d111      	bne.n	8009ad6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	621a      	str	r2, [r3, #32]
}
 8009af0:	bf00      	nop
 8009af2:	371c      	adds	r7, #28
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	40010000 	.word	0x40010000

08009b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	f023 0210 	bic.w	r2, r3, #16
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	021b      	lsls	r3, r3, #8
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f023 0320 	bic.w	r3, r3, #32
 8009b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	011b      	lsls	r3, r3, #4
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a1e      	ldr	r2, [pc, #120]	; (8009bd4 <TIM_OC2_SetConfig+0xd4>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d10d      	bne.n	8009b7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	011b      	lsls	r3, r3, #4
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a15      	ldr	r2, [pc, #84]	; (8009bd4 <TIM_OC2_SetConfig+0xd4>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d113      	bne.n	8009bac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	621a      	str	r2, [r3, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40010000 	.word	0x40010000

08009bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	021b      	lsls	r3, r3, #8
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a1d      	ldr	r2, [pc, #116]	; (8009ca8 <TIM_OC3_SetConfig+0xd0>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d10d      	bne.n	8009c52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	021b      	lsls	r3, r3, #8
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a14      	ldr	r2, [pc, #80]	; (8009ca8 <TIM_OC3_SetConfig+0xd0>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d113      	bne.n	8009c82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	011b      	lsls	r3, r3, #4
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	011b      	lsls	r3, r3, #4
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	621a      	str	r2, [r3, #32]
}
 8009c9c:	bf00      	nop
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	40010000 	.word	0x40010000

08009cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	021b      	lsls	r3, r3, #8
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	031b      	lsls	r3, r3, #12
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a10      	ldr	r2, [pc, #64]	; (8009d48 <TIM_OC4_SetConfig+0x9c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d109      	bne.n	8009d20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	019b      	lsls	r3, r3, #6
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	621a      	str	r2, [r3, #32]
}
 8009d3a:	bf00      	nop
 8009d3c:	371c      	adds	r7, #28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	40010000 	.word	0x40010000

08009d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	f023 0201 	bic.w	r2, r3, #1
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	011b      	lsls	r3, r3, #4
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f023 030a 	bic.w	r3, r3, #10
 8009d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	621a      	str	r2, [r3, #32]
}
 8009d9e:	bf00      	nop
 8009da0:	371c      	adds	r7, #28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b087      	sub	sp, #28
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	f023 0210 	bic.w	r2, r3, #16
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6a1b      	ldr	r3, [r3, #32]
 8009dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	031b      	lsls	r3, r3, #12
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009de6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	011b      	lsls	r3, r3, #4
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	621a      	str	r2, [r3, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	f043 0307 	orr.w	r3, r3, #7
 8009e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	609a      	str	r2, [r3, #8]
}
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	021a      	lsls	r2, r3, #8
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	431a      	orrs	r2, r3
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	609a      	str	r2, [r3, #8]
}
 8009e74:	bf00      	nop
 8009e76:	371c      	adds	r7, #28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f003 031f 	and.w	r3, r3, #31
 8009e92:	2201      	movs	r2, #1
 8009e94:	fa02 f303 	lsl.w	r3, r2, r3
 8009e98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a1a      	ldr	r2, [r3, #32]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	401a      	ands	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6a1a      	ldr	r2, [r3, #32]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f003 031f 	and.w	r3, r3, #31
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb8:	431a      	orrs	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	621a      	str	r2, [r3, #32]
}
 8009ebe:	bf00      	nop
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e050      	b.n	8009f86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a1c      	ldr	r2, [pc, #112]	; (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d018      	beq.n	8009f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f30:	d013      	beq.n	8009f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a18      	ldr	r2, [pc, #96]	; (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d00e      	beq.n	8009f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a16      	ldr	r2, [pc, #88]	; (8009f9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d009      	beq.n	8009f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a15      	ldr	r2, [pc, #84]	; (8009fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d004      	beq.n	8009f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a13      	ldr	r2, [pc, #76]	; (8009fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d10c      	bne.n	8009f74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	40010000 	.word	0x40010000
 8009f98:	40000400 	.word	0x40000400
 8009f9c:	40000800 	.word	0x40000800
 8009fa0:	40000c00 	.word	0x40000c00
 8009fa4:	40014000 	.word	0x40014000

08009fa8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e03d      	b.n	800a040 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4313      	orrs	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e03f      	b.n	800a106 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d106      	bne.n	800a0a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7fa f99a 	bl	80043d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2224      	movs	r2, #36	; 0x24
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fd75 	bl	800aba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	695a      	ldr	r2, [r3, #20]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b08a      	sub	sp, #40	; 0x28
 800a112:	af02      	add	r7, sp, #8
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	603b      	str	r3, [r7, #0]
 800a11a:	4613      	mov	r3, r2
 800a11c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b20      	cmp	r3, #32
 800a12c:	d17c      	bne.n	800a228 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <HAL_UART_Transmit+0x2c>
 800a134:	88fb      	ldrh	r3, [r7, #6]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e075      	b.n	800a22a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a144:	2b01      	cmp	r3, #1
 800a146:	d101      	bne.n	800a14c <HAL_UART_Transmit+0x3e>
 800a148:	2302      	movs	r3, #2
 800a14a:	e06e      	b.n	800a22a <HAL_UART_Transmit+0x11c>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2221      	movs	r2, #33	; 0x21
 800a15e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a162:	f7fb f97d 	bl	8005460 <HAL_GetTick>
 800a166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	88fa      	ldrh	r2, [r7, #6]
 800a16c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	88fa      	ldrh	r2, [r7, #6]
 800a172:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a17c:	d108      	bne.n	800a190 <HAL_UART_Transmit+0x82>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d104      	bne.n	800a190 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	e003      	b.n	800a198 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a1a0:	e02a      	b.n	800a1f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2180      	movs	r1, #128	; 0x80
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 faf7 	bl	800a7a0 <UART_WaitOnFlagUntilTimeout>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e036      	b.n	800a22a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10b      	bne.n	800a1da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	3302      	adds	r3, #2
 800a1d6:	61bb      	str	r3, [r7, #24]
 800a1d8:	e007      	b.n	800a1ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	781a      	ldrb	r2, [r3, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1cf      	bne.n	800a1a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2200      	movs	r2, #0
 800a20a:	2140      	movs	r1, #64	; 0x40
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 fac7 	bl	800a7a0 <UART_WaitOnFlagUntilTimeout>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e006      	b.n	800a22a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2220      	movs	r2, #32
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	e000      	b.n	800a22a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a228:	2302      	movs	r3, #2
  }
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	4613      	mov	r3, r2
 800a23e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b20      	cmp	r3, #32
 800a24a:	d11d      	bne.n	800a288 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <HAL_UART_Receive_DMA+0x26>
 800a252:	88fb      	ldrh	r3, [r7, #6]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	e016      	b.n	800a28a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a262:	2b01      	cmp	r3, #1
 800a264:	d101      	bne.n	800a26a <HAL_UART_Receive_DMA+0x38>
 800a266:	2302      	movs	r3, #2
 800a268:	e00f      	b.n	800a28a <HAL_UART_Receive_DMA+0x58>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800a278:	88fb      	ldrh	r3, [r7, #6]
 800a27a:	461a      	mov	r2, r3
 800a27c:	68b9      	ldr	r1, [r7, #8]
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 fad8 	bl	800a834 <UART_Start_Receive_DMA>
 800a284:	4603      	mov	r3, r0
 800a286:	e000      	b.n	800a28a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a288:	2302      	movs	r3, #2
  }
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	; 0x28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	f003 030f 	and.w	r3, r3, #15
 800a2c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10d      	bne.n	800a2e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	f003 0320 	and.w	r3, r3, #32
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d008      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x52>
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	f003 0320 	and.w	r3, r3, #32
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fbcb 	bl	800aa7a <UART_Receive_IT>
      return;
 800a2e4:	e17c      	b.n	800a5e0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 80b1 	beq.w	800a450 <HAL_UART_IRQHandler+0x1bc>
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d105      	bne.n	800a304 <HAL_UART_IRQHandler+0x70>
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 80a6 	beq.w	800a450 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <HAL_UART_IRQHandler+0x90>
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	f043 0201 	orr.w	r2, r3, #1
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <HAL_UART_IRQHandler+0xb0>
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	d005      	beq.n	800a344 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33c:	f043 0202 	orr.w	r2, r3, #2
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00a      	beq.n	800a364 <HAL_UART_IRQHandler+0xd0>
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d005      	beq.n	800a364 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35c:	f043 0204 	orr.w	r2, r3, #4
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00f      	beq.n	800a38e <HAL_UART_IRQHandler+0xfa>
 800a36e:	6a3b      	ldr	r3, [r7, #32]
 800a370:	f003 0320 	and.w	r3, r3, #32
 800a374:	2b00      	cmp	r3, #0
 800a376:	d104      	bne.n	800a382 <HAL_UART_IRQHandler+0xee>
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d005      	beq.n	800a38e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a386:	f043 0208 	orr.w	r2, r3, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 811f 	beq.w	800a5d6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d007      	beq.n	800a3b2 <HAL_UART_IRQHandler+0x11e>
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	f003 0320 	and.w	r3, r3, #32
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fb64 	bl	800aa7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	695b      	ldr	r3, [r3, #20]
 800a3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3bc:	2b40      	cmp	r3, #64	; 0x40
 800a3be:	bf0c      	ite	eq
 800a3c0:	2301      	moveq	r3, #1
 800a3c2:	2300      	movne	r3, #0
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3cc:	f003 0308 	and.w	r3, r3, #8
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d102      	bne.n	800a3da <HAL_UART_IRQHandler+0x146>
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d031      	beq.n	800a43e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 faa4 	bl	800a928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ea:	2b40      	cmp	r3, #64	; 0x40
 800a3ec:	d123      	bne.n	800a436 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	695a      	ldr	r2, [r3, #20]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a402:	2b00      	cmp	r3, #0
 800a404:	d013      	beq.n	800a42e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40a:	4a77      	ldr	r2, [pc, #476]	; (800a5e8 <HAL_UART_IRQHandler+0x354>)
 800a40c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a412:	4618      	mov	r0, r3
 800a414:	f7fb fe32 	bl	800607c <HAL_DMA_Abort_IT>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d016      	beq.n	800a44c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a428:	4610      	mov	r0, r2
 800a42a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a42c:	e00e      	b.n	800a44c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f8f0 	bl	800a614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a434:	e00a      	b.n	800a44c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f8ec 	bl	800a614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a43c:	e006      	b.n	800a44c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f8e8 	bl	800a614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a44a:	e0c4      	b.n	800a5d6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a44c:	bf00      	nop
    return;
 800a44e:	e0c2      	b.n	800a5d6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a454:	2b01      	cmp	r3, #1
 800a456:	f040 80a2 	bne.w	800a59e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 809c 	beq.w	800a59e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	f003 0310 	and.w	r3, r3, #16
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 8096 	beq.w	800a59e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a492:	2b40      	cmp	r3, #64	; 0x40
 800a494:	d14f      	bne.n	800a536 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a4a0:	8a3b      	ldrh	r3, [r7, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 8099 	beq.w	800a5da <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4ac:	8a3a      	ldrh	r2, [r7, #16]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	f080 8093 	bcs.w	800a5da <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	8a3a      	ldrh	r2, [r7, #16]
 800a4b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c4:	d02b      	beq.n	800a51e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68da      	ldr	r2, [r3, #12]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4d4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	695a      	ldr	r2, [r3, #20]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f022 0201 	bic.w	r2, r2, #1
 800a4e4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	695a      	ldr	r2, [r3, #20]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4f4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f022 0210 	bic.w	r2, r2, #16
 800a512:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fb fd3f 	bl	8005f9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a526:	b29b      	uxth	r3, r3
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f87a 	bl	800a628 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a534:	e051      	b.n	800a5da <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a53e:	b29b      	uxth	r3, r3
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a548:	b29b      	uxth	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d047      	beq.n	800a5de <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800a54e:	8a7b      	ldrh	r3, [r7, #18]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d044      	beq.n	800a5de <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a562:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695a      	ldr	r2, [r3, #20]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 0201 	bic.w	r2, r2, #1
 800a572:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2220      	movs	r2, #32
 800a578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68da      	ldr	r2, [r3, #12]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f022 0210 	bic.w	r2, r2, #16
 800a590:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a592:	8a7b      	ldrh	r3, [r7, #18]
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f846 	bl	800a628 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a59c:	e01f      	b.n	800a5de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d008      	beq.n	800a5ba <HAL_UART_IRQHandler+0x326>
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f9f9 	bl	800a9aa <UART_Transmit_IT>
    return;
 800a5b8:	e012      	b.n	800a5e0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00d      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x34c>
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d008      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa3b 	bl	800aa4a <UART_EndTransmit_IT>
    return;
 800a5d4:	e004      	b.n	800a5e0 <HAL_UART_IRQHandler+0x34c>
    return;
 800a5d6:	bf00      	nop
 800a5d8:	e002      	b.n	800a5e0 <HAL_UART_IRQHandler+0x34c>
      return;
 800a5da:	bf00      	nop
 800a5dc:	e000      	b.n	800a5e0 <HAL_UART_IRQHandler+0x34c>
      return;
 800a5de:	bf00      	nop
  }
}
 800a5e0:	3728      	adds	r7, #40	; 0x28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	0800a983 	.word	0x0800a983

0800a5ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d12a      	bne.n	800a6b2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68da      	ldr	r2, [r3, #12]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a670:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	695a      	ldr	r2, [r3, #20]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 0201 	bic.w	r2, r2, #1
 800a680:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	695a      	ldr	r2, [r3, #20]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a690:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2220      	movs	r2, #32
 800a696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d107      	bne.n	800a6b2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68da      	ldr	r2, [r3, #12]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0210 	bic.w	r2, r2, #16
 800a6b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d106      	bne.n	800a6c8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6be:	4619      	mov	r1, r3
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f7ff ffb1 	bl	800a628 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6c6:	e002      	b.n	800a6ce <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7f8 fd05 	bl	80030d8 <HAL_UART_RxCpltCallback>
}
 800a6ce:	bf00      	nop
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d108      	bne.n	800a6fe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6f0:	085b      	lsrs	r3, r3, #1
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff ff96 	bl	800a628 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6fc:	e002      	b.n	800a704 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7ff ff7e 	bl	800a600 <HAL_UART_RxHalfCpltCallback>
}
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a714:	2300      	movs	r3, #0
 800a716:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a728:	2b80      	cmp	r3, #128	; 0x80
 800a72a:	bf0c      	ite	eq
 800a72c:	2301      	moveq	r3, #1
 800a72e:	2300      	movne	r3, #0
 800a730:	b2db      	uxtb	r3, r3
 800a732:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b21      	cmp	r3, #33	; 0x21
 800a73e:	d108      	bne.n	800a752 <UART_DMAError+0x46>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d005      	beq.n	800a752 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	2200      	movs	r2, #0
 800a74a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a74c:	68b8      	ldr	r0, [r7, #8]
 800a74e:	f000 f8d5 	bl	800a8fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75c:	2b40      	cmp	r3, #64	; 0x40
 800a75e:	bf0c      	ite	eq
 800a760:	2301      	moveq	r3, #1
 800a762:	2300      	movne	r3, #0
 800a764:	b2db      	uxtb	r3, r3
 800a766:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b22      	cmp	r3, #34	; 0x22
 800a772:	d108      	bne.n	800a786 <UART_DMAError+0x7a>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d005      	beq.n	800a786 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2200      	movs	r2, #0
 800a77e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a780:	68b8      	ldr	r0, [r7, #8]
 800a782:	f000 f8d1 	bl	800a928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78a:	f043 0210 	orr.w	r2, r3, #16
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a792:	68b8      	ldr	r0, [r7, #8]
 800a794:	f7ff ff3e 	bl	800a614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a798:	bf00      	nop
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b0:	e02c      	b.n	800a80c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b8:	d028      	beq.n	800a80c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d007      	beq.n	800a7d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7c0:	f7fa fe4e 	bl	8005460 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d21d      	bcs.n	800a80c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	695a      	ldr	r2, [r3, #20]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 0201 	bic.w	r2, r2, #1
 800a7ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2220      	movs	r2, #32
 800a7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e00f      	b.n	800a82c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	4013      	ands	r3, r2
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	429a      	cmp	r2, r3
 800a81a:	bf0c      	ite	eq
 800a81c:	2301      	moveq	r3, #1
 800a81e:	2300      	movne	r3, #0
 800a820:	b2db      	uxtb	r3, r3
 800a822:	461a      	mov	r2, r3
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	429a      	cmp	r2, r3
 800a828:	d0c3      	beq.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	4613      	mov	r3, r2
 800a840:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	88fa      	ldrh	r2, [r7, #6]
 800a84c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2222      	movs	r2, #34	; 0x22
 800a858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a860:	4a23      	ldr	r2, [pc, #140]	; (800a8f0 <UART_Start_Receive_DMA+0xbc>)
 800a862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	4a22      	ldr	r2, [pc, #136]	; (800a8f4 <UART_Start_Receive_DMA+0xc0>)
 800a86a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a870:	4a21      	ldr	r2, [pc, #132]	; (800a8f8 <UART_Start_Receive_DMA+0xc4>)
 800a872:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a878:	2200      	movs	r2, #0
 800a87a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a87c:	f107 0308 	add.w	r3, r7, #8
 800a880:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3304      	adds	r3, #4
 800a88c:	4619      	mov	r1, r3
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	88fb      	ldrh	r3, [r7, #6]
 800a894:	f7fb fb2a 	bl	8005eec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a898:	2300      	movs	r3, #0
 800a89a:	613b      	str	r3, [r7, #16]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	613b      	str	r3, [r7, #16]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	613b      	str	r3, [r7, #16]
 800a8ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68da      	ldr	r2, [r3, #12]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8c4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	695a      	ldr	r2, [r3, #20]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f042 0201 	orr.w	r2, r2, #1
 800a8d4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	695a      	ldr	r2, [r3, #20]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8e4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3718      	adds	r7, #24
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	0800a641 	.word	0x0800a641
 800a8f4:	0800a6d7 	.word	0x0800a6d7
 800a8f8:	0800a70d 	.word	0x0800a70d

0800a8fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68da      	ldr	r2, [r3, #12]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a912:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2220      	movs	r2, #32
 800a918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a93e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	695a      	ldr	r2, [r3, #20]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 0201 	bic.w	r2, r2, #1
 800a94e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a954:	2b01      	cmp	r3, #1
 800a956:	d107      	bne.n	800a968 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68da      	ldr	r2, [r3, #12]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f022 0210 	bic.w	r2, r2, #16
 800a966:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2220      	movs	r2, #32
 800a96c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff fe39 	bl	800a614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9a2:	bf00      	nop
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b21      	cmp	r3, #33	; 0x21
 800a9bc:	d13e      	bne.n	800aa3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c6:	d114      	bne.n	800a9f2 <UART_Transmit_IT+0x48>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d110      	bne.n	800a9f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	1c9a      	adds	r2, r3, #2
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	621a      	str	r2, [r3, #32]
 800a9f0:	e008      	b.n	800aa04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	1c59      	adds	r1, r3, #1
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	6211      	str	r1, [r2, #32]
 800a9fc:	781a      	ldrb	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	4619      	mov	r1, r3
 800aa12:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10f      	bne.n	800aa38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68da      	ldr	r2, [r3, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	e000      	b.n	800aa3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa3c:	2302      	movs	r3, #2
  }
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68da      	ldr	r2, [r3, #12]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2220      	movs	r2, #32
 800aa66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7ff fdbe 	bl	800a5ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b22      	cmp	r3, #34	; 0x22
 800aa8c:	f040 8087 	bne.w	800ab9e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa98:	d117      	bne.n	800aaca <UART_Receive_IT+0x50>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d113      	bne.n	800aaca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaaa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac2:	1c9a      	adds	r2, r3, #2
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	629a      	str	r2, [r3, #40]	; 0x28
 800aac8:	e026      	b.n	800ab18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aace:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800aad0:	2300      	movs	r3, #0
 800aad2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aadc:	d007      	beq.n	800aaee <UART_Receive_IT+0x74>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <UART_Receive_IT+0x82>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	701a      	strb	r2, [r3, #0]
 800aafa:	e008      	b.n	800ab0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	4619      	mov	r1, r3
 800ab26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d136      	bne.n	800ab9a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68da      	ldr	r2, [r3, #12]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 0220 	bic.w	r2, r2, #32
 800ab3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68da      	ldr	r2, [r3, #12]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	695a      	ldr	r2, [r3, #20]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f022 0201 	bic.w	r2, r2, #1
 800ab5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2220      	movs	r2, #32
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d10e      	bne.n	800ab8a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68da      	ldr	r2, [r3, #12]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f022 0210 	bic.w	r2, r2, #16
 800ab7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7ff fd50 	bl	800a628 <HAL_UARTEx_RxEventCallback>
 800ab88:	e002      	b.n	800ab90 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7f8 faa4 	bl	80030d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	e002      	b.n	800aba0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	e000      	b.n	800aba0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ab9e:	2302      	movs	r3, #2
  }
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	b09f      	sub	sp, #124	; 0x7c
 800abae:	af00      	add	r7, sp, #0
 800abb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800abbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abbe:	68d9      	ldr	r1, [r3, #12]
 800abc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	ea40 0301 	orr.w	r3, r0, r1
 800abc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800abca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abcc:	689a      	ldr	r2, [r3, #8]
 800abce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	431a      	orrs	r2, r3
 800abd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	431a      	orrs	r2, r3
 800abda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	4313      	orrs	r3, r2
 800abe0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800abe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800abec:	f021 010c 	bic.w	r1, r1, #12
 800abf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abf6:	430b      	orrs	r3, r1
 800abf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800abfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ac04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac06:	6999      	ldr	r1, [r3, #24]
 800ac08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	ea40 0301 	orr.w	r3, r0, r1
 800ac10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ac12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	4bc5      	ldr	r3, [pc, #788]	; (800af2c <UART_SetConfig+0x384>)
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d004      	beq.n	800ac26 <UART_SetConfig+0x7e>
 800ac1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	4bc3      	ldr	r3, [pc, #780]	; (800af30 <UART_SetConfig+0x388>)
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d103      	bne.n	800ac2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac26:	f7fd fa85 	bl	8008134 <HAL_RCC_GetPCLK2Freq>
 800ac2a:	6778      	str	r0, [r7, #116]	; 0x74
 800ac2c:	e002      	b.n	800ac34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac2e:	f7fd fa6d 	bl	800810c <HAL_RCC_GetPCLK1Freq>
 800ac32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac3c:	f040 80b6 	bne.w	800adac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac42:	461c      	mov	r4, r3
 800ac44:	f04f 0500 	mov.w	r5, #0
 800ac48:	4622      	mov	r2, r4
 800ac4a:	462b      	mov	r3, r5
 800ac4c:	1891      	adds	r1, r2, r2
 800ac4e:	6439      	str	r1, [r7, #64]	; 0x40
 800ac50:	415b      	adcs	r3, r3
 800ac52:	647b      	str	r3, [r7, #68]	; 0x44
 800ac54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac58:	1912      	adds	r2, r2, r4
 800ac5a:	eb45 0303 	adc.w	r3, r5, r3
 800ac5e:	f04f 0000 	mov.w	r0, #0
 800ac62:	f04f 0100 	mov.w	r1, #0
 800ac66:	00d9      	lsls	r1, r3, #3
 800ac68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac6c:	00d0      	lsls	r0, r2, #3
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	1911      	adds	r1, r2, r4
 800ac74:	6639      	str	r1, [r7, #96]	; 0x60
 800ac76:	416b      	adcs	r3, r5
 800ac78:	667b      	str	r3, [r7, #100]	; 0x64
 800ac7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	1891      	adds	r1, r2, r2
 800ac86:	63b9      	str	r1, [r7, #56]	; 0x38
 800ac88:	415b      	adcs	r3, r3
 800ac8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ac90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ac94:	f7f6 f800 	bl	8000c98 <__aeabi_uldivmod>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4ba5      	ldr	r3, [pc, #660]	; (800af34 <UART_SetConfig+0x38c>)
 800ac9e:	fba3 2302 	umull	r2, r3, r3, r2
 800aca2:	095b      	lsrs	r3, r3, #5
 800aca4:	011e      	lsls	r6, r3, #4
 800aca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aca8:	461c      	mov	r4, r3
 800acaa:	f04f 0500 	mov.w	r5, #0
 800acae:	4622      	mov	r2, r4
 800acb0:	462b      	mov	r3, r5
 800acb2:	1891      	adds	r1, r2, r2
 800acb4:	6339      	str	r1, [r7, #48]	; 0x30
 800acb6:	415b      	adcs	r3, r3
 800acb8:	637b      	str	r3, [r7, #52]	; 0x34
 800acba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800acbe:	1912      	adds	r2, r2, r4
 800acc0:	eb45 0303 	adc.w	r3, r5, r3
 800acc4:	f04f 0000 	mov.w	r0, #0
 800acc8:	f04f 0100 	mov.w	r1, #0
 800accc:	00d9      	lsls	r1, r3, #3
 800acce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acd2:	00d0      	lsls	r0, r2, #3
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	1911      	adds	r1, r2, r4
 800acda:	65b9      	str	r1, [r7, #88]	; 0x58
 800acdc:	416b      	adcs	r3, r5
 800acde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ace0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	461a      	mov	r2, r3
 800ace6:	f04f 0300 	mov.w	r3, #0
 800acea:	1891      	adds	r1, r2, r2
 800acec:	62b9      	str	r1, [r7, #40]	; 0x28
 800acee:	415b      	adcs	r3, r3
 800acf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800acf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800acfa:	f7f5 ffcd 	bl	8000c98 <__aeabi_uldivmod>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	4b8c      	ldr	r3, [pc, #560]	; (800af34 <UART_SetConfig+0x38c>)
 800ad04:	fba3 1302 	umull	r1, r3, r3, r2
 800ad08:	095b      	lsrs	r3, r3, #5
 800ad0a:	2164      	movs	r1, #100	; 0x64
 800ad0c:	fb01 f303 	mul.w	r3, r1, r3
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	3332      	adds	r3, #50	; 0x32
 800ad16:	4a87      	ldr	r2, [pc, #540]	; (800af34 <UART_SetConfig+0x38c>)
 800ad18:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1c:	095b      	lsrs	r3, r3, #5
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad24:	441e      	add	r6, r3
 800ad26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f04f 0100 	mov.w	r1, #0
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	1894      	adds	r4, r2, r2
 800ad34:	623c      	str	r4, [r7, #32]
 800ad36:	415b      	adcs	r3, r3
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
 800ad3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad3e:	1812      	adds	r2, r2, r0
 800ad40:	eb41 0303 	adc.w	r3, r1, r3
 800ad44:	f04f 0400 	mov.w	r4, #0
 800ad48:	f04f 0500 	mov.w	r5, #0
 800ad4c:	00dd      	lsls	r5, r3, #3
 800ad4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad52:	00d4      	lsls	r4, r2, #3
 800ad54:	4622      	mov	r2, r4
 800ad56:	462b      	mov	r3, r5
 800ad58:	1814      	adds	r4, r2, r0
 800ad5a:	653c      	str	r4, [r7, #80]	; 0x50
 800ad5c:	414b      	adcs	r3, r1
 800ad5e:	657b      	str	r3, [r7, #84]	; 0x54
 800ad60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	461a      	mov	r2, r3
 800ad66:	f04f 0300 	mov.w	r3, #0
 800ad6a:	1891      	adds	r1, r2, r2
 800ad6c:	61b9      	str	r1, [r7, #24]
 800ad6e:	415b      	adcs	r3, r3
 800ad70:	61fb      	str	r3, [r7, #28]
 800ad72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ad7a:	f7f5 ff8d 	bl	8000c98 <__aeabi_uldivmod>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4b6c      	ldr	r3, [pc, #432]	; (800af34 <UART_SetConfig+0x38c>)
 800ad84:	fba3 1302 	umull	r1, r3, r3, r2
 800ad88:	095b      	lsrs	r3, r3, #5
 800ad8a:	2164      	movs	r1, #100	; 0x64
 800ad8c:	fb01 f303 	mul.w	r3, r1, r3
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	3332      	adds	r3, #50	; 0x32
 800ad96:	4a67      	ldr	r2, [pc, #412]	; (800af34 <UART_SetConfig+0x38c>)
 800ad98:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9c:	095b      	lsrs	r3, r3, #5
 800ad9e:	f003 0207 	and.w	r2, r3, #7
 800ada2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4432      	add	r2, r6
 800ada8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800adaa:	e0b9      	b.n	800af20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800adac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adae:	461c      	mov	r4, r3
 800adb0:	f04f 0500 	mov.w	r5, #0
 800adb4:	4622      	mov	r2, r4
 800adb6:	462b      	mov	r3, r5
 800adb8:	1891      	adds	r1, r2, r2
 800adba:	6139      	str	r1, [r7, #16]
 800adbc:	415b      	adcs	r3, r3
 800adbe:	617b      	str	r3, [r7, #20]
 800adc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800adc4:	1912      	adds	r2, r2, r4
 800adc6:	eb45 0303 	adc.w	r3, r5, r3
 800adca:	f04f 0000 	mov.w	r0, #0
 800adce:	f04f 0100 	mov.w	r1, #0
 800add2:	00d9      	lsls	r1, r3, #3
 800add4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800add8:	00d0      	lsls	r0, r2, #3
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	eb12 0804 	adds.w	r8, r2, r4
 800ade2:	eb43 0905 	adc.w	r9, r3, r5
 800ade6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	4618      	mov	r0, r3
 800adec:	f04f 0100 	mov.w	r1, #0
 800adf0:	f04f 0200 	mov.w	r2, #0
 800adf4:	f04f 0300 	mov.w	r3, #0
 800adf8:	008b      	lsls	r3, r1, #2
 800adfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800adfe:	0082      	lsls	r2, r0, #2
 800ae00:	4640      	mov	r0, r8
 800ae02:	4649      	mov	r1, r9
 800ae04:	f7f5 ff48 	bl	8000c98 <__aeabi_uldivmod>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4b49      	ldr	r3, [pc, #292]	; (800af34 <UART_SetConfig+0x38c>)
 800ae0e:	fba3 2302 	umull	r2, r3, r3, r2
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	011e      	lsls	r6, r3, #4
 800ae16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f04f 0100 	mov.w	r1, #0
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	1894      	adds	r4, r2, r2
 800ae24:	60bc      	str	r4, [r7, #8]
 800ae26:	415b      	adcs	r3, r3
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae2e:	1812      	adds	r2, r2, r0
 800ae30:	eb41 0303 	adc.w	r3, r1, r3
 800ae34:	f04f 0400 	mov.w	r4, #0
 800ae38:	f04f 0500 	mov.w	r5, #0
 800ae3c:	00dd      	lsls	r5, r3, #3
 800ae3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ae42:	00d4      	lsls	r4, r2, #3
 800ae44:	4622      	mov	r2, r4
 800ae46:	462b      	mov	r3, r5
 800ae48:	1814      	adds	r4, r2, r0
 800ae4a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ae4c:	414b      	adcs	r3, r1
 800ae4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f04f 0100 	mov.w	r1, #0
 800ae5a:	f04f 0200 	mov.w	r2, #0
 800ae5e:	f04f 0300 	mov.w	r3, #0
 800ae62:	008b      	lsls	r3, r1, #2
 800ae64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ae68:	0082      	lsls	r2, r0, #2
 800ae6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ae6e:	f7f5 ff13 	bl	8000c98 <__aeabi_uldivmod>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4b2f      	ldr	r3, [pc, #188]	; (800af34 <UART_SetConfig+0x38c>)
 800ae78:	fba3 1302 	umull	r1, r3, r3, r2
 800ae7c:	095b      	lsrs	r3, r3, #5
 800ae7e:	2164      	movs	r1, #100	; 0x64
 800ae80:	fb01 f303 	mul.w	r3, r1, r3
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	011b      	lsls	r3, r3, #4
 800ae88:	3332      	adds	r3, #50	; 0x32
 800ae8a:	4a2a      	ldr	r2, [pc, #168]	; (800af34 <UART_SetConfig+0x38c>)
 800ae8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae90:	095b      	lsrs	r3, r3, #5
 800ae92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae96:	441e      	add	r6, r3
 800ae98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f04f 0100 	mov.w	r1, #0
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	1894      	adds	r4, r2, r2
 800aea6:	603c      	str	r4, [r7, #0]
 800aea8:	415b      	adcs	r3, r3
 800aeaa:	607b      	str	r3, [r7, #4]
 800aeac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeb0:	1812      	adds	r2, r2, r0
 800aeb2:	eb41 0303 	adc.w	r3, r1, r3
 800aeb6:	f04f 0400 	mov.w	r4, #0
 800aeba:	f04f 0500 	mov.w	r5, #0
 800aebe:	00dd      	lsls	r5, r3, #3
 800aec0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aec4:	00d4      	lsls	r4, r2, #3
 800aec6:	4622      	mov	r2, r4
 800aec8:	462b      	mov	r3, r5
 800aeca:	eb12 0a00 	adds.w	sl, r2, r0
 800aece:	eb43 0b01 	adc.w	fp, r3, r1
 800aed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f04f 0100 	mov.w	r1, #0
 800aedc:	f04f 0200 	mov.w	r2, #0
 800aee0:	f04f 0300 	mov.w	r3, #0
 800aee4:	008b      	lsls	r3, r1, #2
 800aee6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aeea:	0082      	lsls	r2, r0, #2
 800aeec:	4650      	mov	r0, sl
 800aeee:	4659      	mov	r1, fp
 800aef0:	f7f5 fed2 	bl	8000c98 <__aeabi_uldivmod>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4b0e      	ldr	r3, [pc, #56]	; (800af34 <UART_SetConfig+0x38c>)
 800aefa:	fba3 1302 	umull	r1, r3, r3, r2
 800aefe:	095b      	lsrs	r3, r3, #5
 800af00:	2164      	movs	r1, #100	; 0x64
 800af02:	fb01 f303 	mul.w	r3, r1, r3
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	011b      	lsls	r3, r3, #4
 800af0a:	3332      	adds	r3, #50	; 0x32
 800af0c:	4a09      	ldr	r2, [pc, #36]	; (800af34 <UART_SetConfig+0x38c>)
 800af0e:	fba2 2303 	umull	r2, r3, r2, r3
 800af12:	095b      	lsrs	r3, r3, #5
 800af14:	f003 020f 	and.w	r2, r3, #15
 800af18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4432      	add	r2, r6
 800af1e:	609a      	str	r2, [r3, #8]
}
 800af20:	bf00      	nop
 800af22:	377c      	adds	r7, #124	; 0x7c
 800af24:	46bd      	mov	sp, r7
 800af26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2a:	bf00      	nop
 800af2c:	40011000 	.word	0x40011000
 800af30:	40011400 	.word	0x40011400
 800af34:	51eb851f 	.word	0x51eb851f

0800af38 <__errno>:
 800af38:	4b01      	ldr	r3, [pc, #4]	; (800af40 <__errno+0x8>)
 800af3a:	6818      	ldr	r0, [r3, #0]
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	200029f8 	.word	0x200029f8

0800af44 <__libc_init_array>:
 800af44:	b570      	push	{r4, r5, r6, lr}
 800af46:	4d0d      	ldr	r5, [pc, #52]	; (800af7c <__libc_init_array+0x38>)
 800af48:	4c0d      	ldr	r4, [pc, #52]	; (800af80 <__libc_init_array+0x3c>)
 800af4a:	1b64      	subs	r4, r4, r5
 800af4c:	10a4      	asrs	r4, r4, #2
 800af4e:	2600      	movs	r6, #0
 800af50:	42a6      	cmp	r6, r4
 800af52:	d109      	bne.n	800af68 <__libc_init_array+0x24>
 800af54:	4d0b      	ldr	r5, [pc, #44]	; (800af84 <__libc_init_array+0x40>)
 800af56:	4c0c      	ldr	r4, [pc, #48]	; (800af88 <__libc_init_array+0x44>)
 800af58:	f004 fc46 	bl	800f7e8 <_init>
 800af5c:	1b64      	subs	r4, r4, r5
 800af5e:	10a4      	asrs	r4, r4, #2
 800af60:	2600      	movs	r6, #0
 800af62:	42a6      	cmp	r6, r4
 800af64:	d105      	bne.n	800af72 <__libc_init_array+0x2e>
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6c:	4798      	blx	r3
 800af6e:	3601      	adds	r6, #1
 800af70:	e7ee      	b.n	800af50 <__libc_init_array+0xc>
 800af72:	f855 3b04 	ldr.w	r3, [r5], #4
 800af76:	4798      	blx	r3
 800af78:	3601      	adds	r6, #1
 800af7a:	e7f2      	b.n	800af62 <__libc_init_array+0x1e>
 800af7c:	080240bc 	.word	0x080240bc
 800af80:	080240bc 	.word	0x080240bc
 800af84:	080240bc 	.word	0x080240bc
 800af88:	080240c0 	.word	0x080240c0

0800af8c <memset>:
 800af8c:	4402      	add	r2, r0
 800af8e:	4603      	mov	r3, r0
 800af90:	4293      	cmp	r3, r2
 800af92:	d100      	bne.n	800af96 <memset+0xa>
 800af94:	4770      	bx	lr
 800af96:	f803 1b01 	strb.w	r1, [r3], #1
 800af9a:	e7f9      	b.n	800af90 <memset+0x4>

0800af9c <__cvt>:
 800af9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afa0:	ec55 4b10 	vmov	r4, r5, d0
 800afa4:	2d00      	cmp	r5, #0
 800afa6:	460e      	mov	r6, r1
 800afa8:	4619      	mov	r1, r3
 800afaa:	462b      	mov	r3, r5
 800afac:	bfbb      	ittet	lt
 800afae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800afb2:	461d      	movlt	r5, r3
 800afb4:	2300      	movge	r3, #0
 800afb6:	232d      	movlt	r3, #45	; 0x2d
 800afb8:	700b      	strb	r3, [r1, #0]
 800afba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800afc0:	4691      	mov	r9, r2
 800afc2:	f023 0820 	bic.w	r8, r3, #32
 800afc6:	bfbc      	itt	lt
 800afc8:	4622      	movlt	r2, r4
 800afca:	4614      	movlt	r4, r2
 800afcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afd0:	d005      	beq.n	800afde <__cvt+0x42>
 800afd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800afd6:	d100      	bne.n	800afda <__cvt+0x3e>
 800afd8:	3601      	adds	r6, #1
 800afda:	2102      	movs	r1, #2
 800afdc:	e000      	b.n	800afe0 <__cvt+0x44>
 800afde:	2103      	movs	r1, #3
 800afe0:	ab03      	add	r3, sp, #12
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	ab02      	add	r3, sp, #8
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	ec45 4b10 	vmov	d0, r4, r5
 800afec:	4653      	mov	r3, sl
 800afee:	4632      	mov	r2, r6
 800aff0:	f001 fdb6 	bl	800cb60 <_dtoa_r>
 800aff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aff8:	4607      	mov	r7, r0
 800affa:	d102      	bne.n	800b002 <__cvt+0x66>
 800affc:	f019 0f01 	tst.w	r9, #1
 800b000:	d022      	beq.n	800b048 <__cvt+0xac>
 800b002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b006:	eb07 0906 	add.w	r9, r7, r6
 800b00a:	d110      	bne.n	800b02e <__cvt+0x92>
 800b00c:	783b      	ldrb	r3, [r7, #0]
 800b00e:	2b30      	cmp	r3, #48	; 0x30
 800b010:	d10a      	bne.n	800b028 <__cvt+0x8c>
 800b012:	2200      	movs	r2, #0
 800b014:	2300      	movs	r3, #0
 800b016:	4620      	mov	r0, r4
 800b018:	4629      	mov	r1, r5
 800b01a:	f7f5 fd5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b01e:	b918      	cbnz	r0, 800b028 <__cvt+0x8c>
 800b020:	f1c6 0601 	rsb	r6, r6, #1
 800b024:	f8ca 6000 	str.w	r6, [sl]
 800b028:	f8da 3000 	ldr.w	r3, [sl]
 800b02c:	4499      	add	r9, r3
 800b02e:	2200      	movs	r2, #0
 800b030:	2300      	movs	r3, #0
 800b032:	4620      	mov	r0, r4
 800b034:	4629      	mov	r1, r5
 800b036:	f7f5 fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b03a:	b108      	cbz	r0, 800b040 <__cvt+0xa4>
 800b03c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b040:	2230      	movs	r2, #48	; 0x30
 800b042:	9b03      	ldr	r3, [sp, #12]
 800b044:	454b      	cmp	r3, r9
 800b046:	d307      	bcc.n	800b058 <__cvt+0xbc>
 800b048:	9b03      	ldr	r3, [sp, #12]
 800b04a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b04c:	1bdb      	subs	r3, r3, r7
 800b04e:	4638      	mov	r0, r7
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	b004      	add	sp, #16
 800b054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b058:	1c59      	adds	r1, r3, #1
 800b05a:	9103      	str	r1, [sp, #12]
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	e7f0      	b.n	800b042 <__cvt+0xa6>

0800b060 <__exponent>:
 800b060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b062:	4603      	mov	r3, r0
 800b064:	2900      	cmp	r1, #0
 800b066:	bfb8      	it	lt
 800b068:	4249      	neglt	r1, r1
 800b06a:	f803 2b02 	strb.w	r2, [r3], #2
 800b06e:	bfb4      	ite	lt
 800b070:	222d      	movlt	r2, #45	; 0x2d
 800b072:	222b      	movge	r2, #43	; 0x2b
 800b074:	2909      	cmp	r1, #9
 800b076:	7042      	strb	r2, [r0, #1]
 800b078:	dd2a      	ble.n	800b0d0 <__exponent+0x70>
 800b07a:	f10d 0407 	add.w	r4, sp, #7
 800b07e:	46a4      	mov	ip, r4
 800b080:	270a      	movs	r7, #10
 800b082:	46a6      	mov	lr, r4
 800b084:	460a      	mov	r2, r1
 800b086:	fb91 f6f7 	sdiv	r6, r1, r7
 800b08a:	fb07 1516 	mls	r5, r7, r6, r1
 800b08e:	3530      	adds	r5, #48	; 0x30
 800b090:	2a63      	cmp	r2, #99	; 0x63
 800b092:	f104 34ff 	add.w	r4, r4, #4294967295
 800b096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b09a:	4631      	mov	r1, r6
 800b09c:	dcf1      	bgt.n	800b082 <__exponent+0x22>
 800b09e:	3130      	adds	r1, #48	; 0x30
 800b0a0:	f1ae 0502 	sub.w	r5, lr, #2
 800b0a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b0a8:	1c44      	adds	r4, r0, #1
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4561      	cmp	r1, ip
 800b0ae:	d30a      	bcc.n	800b0c6 <__exponent+0x66>
 800b0b0:	f10d 0209 	add.w	r2, sp, #9
 800b0b4:	eba2 020e 	sub.w	r2, r2, lr
 800b0b8:	4565      	cmp	r5, ip
 800b0ba:	bf88      	it	hi
 800b0bc:	2200      	movhi	r2, #0
 800b0be:	4413      	add	r3, r2
 800b0c0:	1a18      	subs	r0, r3, r0
 800b0c2:	b003      	add	sp, #12
 800b0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b0ce:	e7ed      	b.n	800b0ac <__exponent+0x4c>
 800b0d0:	2330      	movs	r3, #48	; 0x30
 800b0d2:	3130      	adds	r1, #48	; 0x30
 800b0d4:	7083      	strb	r3, [r0, #2]
 800b0d6:	70c1      	strb	r1, [r0, #3]
 800b0d8:	1d03      	adds	r3, r0, #4
 800b0da:	e7f1      	b.n	800b0c0 <__exponent+0x60>

0800b0dc <_printf_float>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	ed2d 8b02 	vpush	{d8}
 800b0e4:	b08d      	sub	sp, #52	; 0x34
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b0ec:	4616      	mov	r6, r2
 800b0ee:	461f      	mov	r7, r3
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	f002 fe91 	bl	800de18 <_localeconv_r>
 800b0f6:	f8d0 a000 	ldr.w	sl, [r0]
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	f7f5 f870 	bl	80001e0 <strlen>
 800b100:	2300      	movs	r3, #0
 800b102:	930a      	str	r3, [sp, #40]	; 0x28
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	9305      	str	r3, [sp, #20]
 800b108:	f8d8 3000 	ldr.w	r3, [r8]
 800b10c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b110:	3307      	adds	r3, #7
 800b112:	f023 0307 	bic.w	r3, r3, #7
 800b116:	f103 0208 	add.w	r2, r3, #8
 800b11a:	f8c8 2000 	str.w	r2, [r8]
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b126:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b12a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b12e:	9307      	str	r3, [sp, #28]
 800b130:	f8cd 8018 	str.w	r8, [sp, #24]
 800b134:	ee08 0a10 	vmov	s16, r0
 800b138:	4b9f      	ldr	r3, [pc, #636]	; (800b3b8 <_printf_float+0x2dc>)
 800b13a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b13e:	f04f 32ff 	mov.w	r2, #4294967295
 800b142:	f7f5 fcfb 	bl	8000b3c <__aeabi_dcmpun>
 800b146:	bb88      	cbnz	r0, 800b1ac <_printf_float+0xd0>
 800b148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b14c:	4b9a      	ldr	r3, [pc, #616]	; (800b3b8 <_printf_float+0x2dc>)
 800b14e:	f04f 32ff 	mov.w	r2, #4294967295
 800b152:	f7f5 fcd5 	bl	8000b00 <__aeabi_dcmple>
 800b156:	bb48      	cbnz	r0, 800b1ac <_printf_float+0xd0>
 800b158:	2200      	movs	r2, #0
 800b15a:	2300      	movs	r3, #0
 800b15c:	4640      	mov	r0, r8
 800b15e:	4649      	mov	r1, r9
 800b160:	f7f5 fcc4 	bl	8000aec <__aeabi_dcmplt>
 800b164:	b110      	cbz	r0, 800b16c <_printf_float+0x90>
 800b166:	232d      	movs	r3, #45	; 0x2d
 800b168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b16c:	4b93      	ldr	r3, [pc, #588]	; (800b3bc <_printf_float+0x2e0>)
 800b16e:	4894      	ldr	r0, [pc, #592]	; (800b3c0 <_printf_float+0x2e4>)
 800b170:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b174:	bf94      	ite	ls
 800b176:	4698      	movls	r8, r3
 800b178:	4680      	movhi	r8, r0
 800b17a:	2303      	movs	r3, #3
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	9b05      	ldr	r3, [sp, #20]
 800b180:	f023 0204 	bic.w	r2, r3, #4
 800b184:	6022      	str	r2, [r4, #0]
 800b186:	f04f 0900 	mov.w	r9, #0
 800b18a:	9700      	str	r7, [sp, #0]
 800b18c:	4633      	mov	r3, r6
 800b18e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b190:	4621      	mov	r1, r4
 800b192:	4628      	mov	r0, r5
 800b194:	f000 f9d8 	bl	800b548 <_printf_common>
 800b198:	3001      	adds	r0, #1
 800b19a:	f040 8090 	bne.w	800b2be <_printf_float+0x1e2>
 800b19e:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a2:	b00d      	add	sp, #52	; 0x34
 800b1a4:	ecbd 8b02 	vpop	{d8}
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	4642      	mov	r2, r8
 800b1ae:	464b      	mov	r3, r9
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	f7f5 fcc2 	bl	8000b3c <__aeabi_dcmpun>
 800b1b8:	b140      	cbz	r0, 800b1cc <_printf_float+0xf0>
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	bfbc      	itt	lt
 800b1c0:	232d      	movlt	r3, #45	; 0x2d
 800b1c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b1c6:	487f      	ldr	r0, [pc, #508]	; (800b3c4 <_printf_float+0x2e8>)
 800b1c8:	4b7f      	ldr	r3, [pc, #508]	; (800b3c8 <_printf_float+0x2ec>)
 800b1ca:	e7d1      	b.n	800b170 <_printf_float+0x94>
 800b1cc:	6863      	ldr	r3, [r4, #4]
 800b1ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b1d2:	9206      	str	r2, [sp, #24]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	d13f      	bne.n	800b258 <_printf_float+0x17c>
 800b1d8:	2306      	movs	r3, #6
 800b1da:	6063      	str	r3, [r4, #4]
 800b1dc:	9b05      	ldr	r3, [sp, #20]
 800b1de:	6861      	ldr	r1, [r4, #4]
 800b1e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	9303      	str	r3, [sp, #12]
 800b1e8:	ab0a      	add	r3, sp, #40	; 0x28
 800b1ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b1ee:	ab09      	add	r3, sp, #36	; 0x24
 800b1f0:	ec49 8b10 	vmov	d0, r8, r9
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	6022      	str	r2, [r4, #0]
 800b1f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f7ff fecd 	bl	800af9c <__cvt>
 800b202:	9b06      	ldr	r3, [sp, #24]
 800b204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b206:	2b47      	cmp	r3, #71	; 0x47
 800b208:	4680      	mov	r8, r0
 800b20a:	d108      	bne.n	800b21e <_printf_float+0x142>
 800b20c:	1cc8      	adds	r0, r1, #3
 800b20e:	db02      	blt.n	800b216 <_printf_float+0x13a>
 800b210:	6863      	ldr	r3, [r4, #4]
 800b212:	4299      	cmp	r1, r3
 800b214:	dd41      	ble.n	800b29a <_printf_float+0x1be>
 800b216:	f1ab 0b02 	sub.w	fp, fp, #2
 800b21a:	fa5f fb8b 	uxtb.w	fp, fp
 800b21e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b222:	d820      	bhi.n	800b266 <_printf_float+0x18a>
 800b224:	3901      	subs	r1, #1
 800b226:	465a      	mov	r2, fp
 800b228:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b22c:	9109      	str	r1, [sp, #36]	; 0x24
 800b22e:	f7ff ff17 	bl	800b060 <__exponent>
 800b232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b234:	1813      	adds	r3, r2, r0
 800b236:	2a01      	cmp	r2, #1
 800b238:	4681      	mov	r9, r0
 800b23a:	6123      	str	r3, [r4, #16]
 800b23c:	dc02      	bgt.n	800b244 <_printf_float+0x168>
 800b23e:	6822      	ldr	r2, [r4, #0]
 800b240:	07d2      	lsls	r2, r2, #31
 800b242:	d501      	bpl.n	800b248 <_printf_float+0x16c>
 800b244:	3301      	adds	r3, #1
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d09c      	beq.n	800b18a <_printf_float+0xae>
 800b250:	232d      	movs	r3, #45	; 0x2d
 800b252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b256:	e798      	b.n	800b18a <_printf_float+0xae>
 800b258:	9a06      	ldr	r2, [sp, #24]
 800b25a:	2a47      	cmp	r2, #71	; 0x47
 800b25c:	d1be      	bne.n	800b1dc <_printf_float+0x100>
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1bc      	bne.n	800b1dc <_printf_float+0x100>
 800b262:	2301      	movs	r3, #1
 800b264:	e7b9      	b.n	800b1da <_printf_float+0xfe>
 800b266:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b26a:	d118      	bne.n	800b29e <_printf_float+0x1c2>
 800b26c:	2900      	cmp	r1, #0
 800b26e:	6863      	ldr	r3, [r4, #4]
 800b270:	dd0b      	ble.n	800b28a <_printf_float+0x1ae>
 800b272:	6121      	str	r1, [r4, #16]
 800b274:	b913      	cbnz	r3, 800b27c <_printf_float+0x1a0>
 800b276:	6822      	ldr	r2, [r4, #0]
 800b278:	07d0      	lsls	r0, r2, #31
 800b27a:	d502      	bpl.n	800b282 <_printf_float+0x1a6>
 800b27c:	3301      	adds	r3, #1
 800b27e:	440b      	add	r3, r1
 800b280:	6123      	str	r3, [r4, #16]
 800b282:	65a1      	str	r1, [r4, #88]	; 0x58
 800b284:	f04f 0900 	mov.w	r9, #0
 800b288:	e7de      	b.n	800b248 <_printf_float+0x16c>
 800b28a:	b913      	cbnz	r3, 800b292 <_printf_float+0x1b6>
 800b28c:	6822      	ldr	r2, [r4, #0]
 800b28e:	07d2      	lsls	r2, r2, #31
 800b290:	d501      	bpl.n	800b296 <_printf_float+0x1ba>
 800b292:	3302      	adds	r3, #2
 800b294:	e7f4      	b.n	800b280 <_printf_float+0x1a4>
 800b296:	2301      	movs	r3, #1
 800b298:	e7f2      	b.n	800b280 <_printf_float+0x1a4>
 800b29a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a0:	4299      	cmp	r1, r3
 800b2a2:	db05      	blt.n	800b2b0 <_printf_float+0x1d4>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	6121      	str	r1, [r4, #16]
 800b2a8:	07d8      	lsls	r0, r3, #31
 800b2aa:	d5ea      	bpl.n	800b282 <_printf_float+0x1a6>
 800b2ac:	1c4b      	adds	r3, r1, #1
 800b2ae:	e7e7      	b.n	800b280 <_printf_float+0x1a4>
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	bfd4      	ite	le
 800b2b4:	f1c1 0202 	rsble	r2, r1, #2
 800b2b8:	2201      	movgt	r2, #1
 800b2ba:	4413      	add	r3, r2
 800b2bc:	e7e0      	b.n	800b280 <_printf_float+0x1a4>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	055a      	lsls	r2, r3, #21
 800b2c2:	d407      	bmi.n	800b2d4 <_printf_float+0x1f8>
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	4642      	mov	r2, r8
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	47b8      	blx	r7
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	d12c      	bne.n	800b32c <_printf_float+0x250>
 800b2d2:	e764      	b.n	800b19e <_printf_float+0xc2>
 800b2d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2d8:	f240 80e0 	bls.w	800b49c <_printf_float+0x3c0>
 800b2dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	f7f5 fbf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d034      	beq.n	800b356 <_printf_float+0x27a>
 800b2ec:	4a37      	ldr	r2, [pc, #220]	; (800b3cc <_printf_float+0x2f0>)
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	47b8      	blx	r7
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	f43f af51 	beq.w	800b19e <_printf_float+0xc2>
 800b2fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b300:	429a      	cmp	r2, r3
 800b302:	db02      	blt.n	800b30a <_printf_float+0x22e>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	07d8      	lsls	r0, r3, #31
 800b308:	d510      	bpl.n	800b32c <_printf_float+0x250>
 800b30a:	ee18 3a10 	vmov	r3, s16
 800b30e:	4652      	mov	r2, sl
 800b310:	4631      	mov	r1, r6
 800b312:	4628      	mov	r0, r5
 800b314:	47b8      	blx	r7
 800b316:	3001      	adds	r0, #1
 800b318:	f43f af41 	beq.w	800b19e <_printf_float+0xc2>
 800b31c:	f04f 0800 	mov.w	r8, #0
 800b320:	f104 091a 	add.w	r9, r4, #26
 800b324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b326:	3b01      	subs	r3, #1
 800b328:	4543      	cmp	r3, r8
 800b32a:	dc09      	bgt.n	800b340 <_printf_float+0x264>
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	079b      	lsls	r3, r3, #30
 800b330:	f100 8105 	bmi.w	800b53e <_printf_float+0x462>
 800b334:	68e0      	ldr	r0, [r4, #12]
 800b336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b338:	4298      	cmp	r0, r3
 800b33a:	bfb8      	it	lt
 800b33c:	4618      	movlt	r0, r3
 800b33e:	e730      	b.n	800b1a2 <_printf_float+0xc6>
 800b340:	2301      	movs	r3, #1
 800b342:	464a      	mov	r2, r9
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	47b8      	blx	r7
 800b34a:	3001      	adds	r0, #1
 800b34c:	f43f af27 	beq.w	800b19e <_printf_float+0xc2>
 800b350:	f108 0801 	add.w	r8, r8, #1
 800b354:	e7e6      	b.n	800b324 <_printf_float+0x248>
 800b356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	dc39      	bgt.n	800b3d0 <_printf_float+0x2f4>
 800b35c:	4a1b      	ldr	r2, [pc, #108]	; (800b3cc <_printf_float+0x2f0>)
 800b35e:	2301      	movs	r3, #1
 800b360:	4631      	mov	r1, r6
 800b362:	4628      	mov	r0, r5
 800b364:	47b8      	blx	r7
 800b366:	3001      	adds	r0, #1
 800b368:	f43f af19 	beq.w	800b19e <_printf_float+0xc2>
 800b36c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b370:	4313      	orrs	r3, r2
 800b372:	d102      	bne.n	800b37a <_printf_float+0x29e>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	07d9      	lsls	r1, r3, #31
 800b378:	d5d8      	bpl.n	800b32c <_printf_float+0x250>
 800b37a:	ee18 3a10 	vmov	r3, s16
 800b37e:	4652      	mov	r2, sl
 800b380:	4631      	mov	r1, r6
 800b382:	4628      	mov	r0, r5
 800b384:	47b8      	blx	r7
 800b386:	3001      	adds	r0, #1
 800b388:	f43f af09 	beq.w	800b19e <_printf_float+0xc2>
 800b38c:	f04f 0900 	mov.w	r9, #0
 800b390:	f104 0a1a 	add.w	sl, r4, #26
 800b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b396:	425b      	negs	r3, r3
 800b398:	454b      	cmp	r3, r9
 800b39a:	dc01      	bgt.n	800b3a0 <_printf_float+0x2c4>
 800b39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39e:	e792      	b.n	800b2c6 <_printf_float+0x1ea>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	4652      	mov	r2, sl
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b8      	blx	r7
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f43f aef7 	beq.w	800b19e <_printf_float+0xc2>
 800b3b0:	f109 0901 	add.w	r9, r9, #1
 800b3b4:	e7ee      	b.n	800b394 <_printf_float+0x2b8>
 800b3b6:	bf00      	nop
 800b3b8:	7fefffff 	.word	0x7fefffff
 800b3bc:	08023c00 	.word	0x08023c00
 800b3c0:	08023c04 	.word	0x08023c04
 800b3c4:	08023c0c 	.word	0x08023c0c
 800b3c8:	08023c08 	.word	0x08023c08
 800b3cc:	08023c10 	.word	0x08023c10
 800b3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	bfa8      	it	ge
 800b3d8:	461a      	movge	r2, r3
 800b3da:	2a00      	cmp	r2, #0
 800b3dc:	4691      	mov	r9, r2
 800b3de:	dc37      	bgt.n	800b450 <_printf_float+0x374>
 800b3e0:	f04f 0b00 	mov.w	fp, #0
 800b3e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3e8:	f104 021a 	add.w	r2, r4, #26
 800b3ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3ee:	9305      	str	r3, [sp, #20]
 800b3f0:	eba3 0309 	sub.w	r3, r3, r9
 800b3f4:	455b      	cmp	r3, fp
 800b3f6:	dc33      	bgt.n	800b460 <_printf_float+0x384>
 800b3f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	db3b      	blt.n	800b478 <_printf_float+0x39c>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	07da      	lsls	r2, r3, #31
 800b404:	d438      	bmi.n	800b478 <_printf_float+0x39c>
 800b406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b408:	9b05      	ldr	r3, [sp, #20]
 800b40a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	eba2 0901 	sub.w	r9, r2, r1
 800b412:	4599      	cmp	r9, r3
 800b414:	bfa8      	it	ge
 800b416:	4699      	movge	r9, r3
 800b418:	f1b9 0f00 	cmp.w	r9, #0
 800b41c:	dc35      	bgt.n	800b48a <_printf_float+0x3ae>
 800b41e:	f04f 0800 	mov.w	r8, #0
 800b422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b426:	f104 0a1a 	add.w	sl, r4, #26
 800b42a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	eba3 0309 	sub.w	r3, r3, r9
 800b434:	4543      	cmp	r3, r8
 800b436:	f77f af79 	ble.w	800b32c <_printf_float+0x250>
 800b43a:	2301      	movs	r3, #1
 800b43c:	4652      	mov	r2, sl
 800b43e:	4631      	mov	r1, r6
 800b440:	4628      	mov	r0, r5
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	f43f aeaa 	beq.w	800b19e <_printf_float+0xc2>
 800b44a:	f108 0801 	add.w	r8, r8, #1
 800b44e:	e7ec      	b.n	800b42a <_printf_float+0x34e>
 800b450:	4613      	mov	r3, r2
 800b452:	4631      	mov	r1, r6
 800b454:	4642      	mov	r2, r8
 800b456:	4628      	mov	r0, r5
 800b458:	47b8      	blx	r7
 800b45a:	3001      	adds	r0, #1
 800b45c:	d1c0      	bne.n	800b3e0 <_printf_float+0x304>
 800b45e:	e69e      	b.n	800b19e <_printf_float+0xc2>
 800b460:	2301      	movs	r3, #1
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	9205      	str	r2, [sp, #20]
 800b468:	47b8      	blx	r7
 800b46a:	3001      	adds	r0, #1
 800b46c:	f43f ae97 	beq.w	800b19e <_printf_float+0xc2>
 800b470:	9a05      	ldr	r2, [sp, #20]
 800b472:	f10b 0b01 	add.w	fp, fp, #1
 800b476:	e7b9      	b.n	800b3ec <_printf_float+0x310>
 800b478:	ee18 3a10 	vmov	r3, s16
 800b47c:	4652      	mov	r2, sl
 800b47e:	4631      	mov	r1, r6
 800b480:	4628      	mov	r0, r5
 800b482:	47b8      	blx	r7
 800b484:	3001      	adds	r0, #1
 800b486:	d1be      	bne.n	800b406 <_printf_float+0x32a>
 800b488:	e689      	b.n	800b19e <_printf_float+0xc2>
 800b48a:	9a05      	ldr	r2, [sp, #20]
 800b48c:	464b      	mov	r3, r9
 800b48e:	4442      	add	r2, r8
 800b490:	4631      	mov	r1, r6
 800b492:	4628      	mov	r0, r5
 800b494:	47b8      	blx	r7
 800b496:	3001      	adds	r0, #1
 800b498:	d1c1      	bne.n	800b41e <_printf_float+0x342>
 800b49a:	e680      	b.n	800b19e <_printf_float+0xc2>
 800b49c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b49e:	2a01      	cmp	r2, #1
 800b4a0:	dc01      	bgt.n	800b4a6 <_printf_float+0x3ca>
 800b4a2:	07db      	lsls	r3, r3, #31
 800b4a4:	d538      	bpl.n	800b518 <_printf_float+0x43c>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	47b8      	blx	r7
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	f43f ae74 	beq.w	800b19e <_printf_float+0xc2>
 800b4b6:	ee18 3a10 	vmov	r3, s16
 800b4ba:	4652      	mov	r2, sl
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4628      	mov	r0, r5
 800b4c0:	47b8      	blx	r7
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	f43f ae6b 	beq.w	800b19e <_printf_float+0xc2>
 800b4c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f7f5 fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4d4:	b9d8      	cbnz	r0, 800b50e <_printf_float+0x432>
 800b4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d8:	f108 0201 	add.w	r2, r8, #1
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d10e      	bne.n	800b506 <_printf_float+0x42a>
 800b4e8:	e659      	b.n	800b19e <_printf_float+0xc2>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	f43f ae52 	beq.w	800b19e <_printf_float+0xc2>
 800b4fa:	f108 0801 	add.w	r8, r8, #1
 800b4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b500:	3b01      	subs	r3, #1
 800b502:	4543      	cmp	r3, r8
 800b504:	dcf1      	bgt.n	800b4ea <_printf_float+0x40e>
 800b506:	464b      	mov	r3, r9
 800b508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b50c:	e6dc      	b.n	800b2c8 <_printf_float+0x1ec>
 800b50e:	f04f 0800 	mov.w	r8, #0
 800b512:	f104 0a1a 	add.w	sl, r4, #26
 800b516:	e7f2      	b.n	800b4fe <_printf_float+0x422>
 800b518:	2301      	movs	r3, #1
 800b51a:	4642      	mov	r2, r8
 800b51c:	e7df      	b.n	800b4de <_printf_float+0x402>
 800b51e:	2301      	movs	r3, #1
 800b520:	464a      	mov	r2, r9
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	47b8      	blx	r7
 800b528:	3001      	adds	r0, #1
 800b52a:	f43f ae38 	beq.w	800b19e <_printf_float+0xc2>
 800b52e:	f108 0801 	add.w	r8, r8, #1
 800b532:	68e3      	ldr	r3, [r4, #12]
 800b534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b536:	1a5b      	subs	r3, r3, r1
 800b538:	4543      	cmp	r3, r8
 800b53a:	dcf0      	bgt.n	800b51e <_printf_float+0x442>
 800b53c:	e6fa      	b.n	800b334 <_printf_float+0x258>
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	f104 0919 	add.w	r9, r4, #25
 800b546:	e7f4      	b.n	800b532 <_printf_float+0x456>

0800b548 <_printf_common>:
 800b548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b54c:	4616      	mov	r6, r2
 800b54e:	4699      	mov	r9, r3
 800b550:	688a      	ldr	r2, [r1, #8]
 800b552:	690b      	ldr	r3, [r1, #16]
 800b554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b558:	4293      	cmp	r3, r2
 800b55a:	bfb8      	it	lt
 800b55c:	4613      	movlt	r3, r2
 800b55e:	6033      	str	r3, [r6, #0]
 800b560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b564:	4607      	mov	r7, r0
 800b566:	460c      	mov	r4, r1
 800b568:	b10a      	cbz	r2, 800b56e <_printf_common+0x26>
 800b56a:	3301      	adds	r3, #1
 800b56c:	6033      	str	r3, [r6, #0]
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	0699      	lsls	r1, r3, #26
 800b572:	bf42      	ittt	mi
 800b574:	6833      	ldrmi	r3, [r6, #0]
 800b576:	3302      	addmi	r3, #2
 800b578:	6033      	strmi	r3, [r6, #0]
 800b57a:	6825      	ldr	r5, [r4, #0]
 800b57c:	f015 0506 	ands.w	r5, r5, #6
 800b580:	d106      	bne.n	800b590 <_printf_common+0x48>
 800b582:	f104 0a19 	add.w	sl, r4, #25
 800b586:	68e3      	ldr	r3, [r4, #12]
 800b588:	6832      	ldr	r2, [r6, #0]
 800b58a:	1a9b      	subs	r3, r3, r2
 800b58c:	42ab      	cmp	r3, r5
 800b58e:	dc26      	bgt.n	800b5de <_printf_common+0x96>
 800b590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b594:	1e13      	subs	r3, r2, #0
 800b596:	6822      	ldr	r2, [r4, #0]
 800b598:	bf18      	it	ne
 800b59a:	2301      	movne	r3, #1
 800b59c:	0692      	lsls	r2, r2, #26
 800b59e:	d42b      	bmi.n	800b5f8 <_printf_common+0xb0>
 800b5a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	47c0      	blx	r8
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	d01e      	beq.n	800b5ec <_printf_common+0xa4>
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	68e5      	ldr	r5, [r4, #12]
 800b5b2:	6832      	ldr	r2, [r6, #0]
 800b5b4:	f003 0306 	and.w	r3, r3, #6
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	bf08      	it	eq
 800b5bc:	1aad      	subeq	r5, r5, r2
 800b5be:	68a3      	ldr	r3, [r4, #8]
 800b5c0:	6922      	ldr	r2, [r4, #16]
 800b5c2:	bf0c      	ite	eq
 800b5c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5c8:	2500      	movne	r5, #0
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	bfc4      	itt	gt
 800b5ce:	1a9b      	subgt	r3, r3, r2
 800b5d0:	18ed      	addgt	r5, r5, r3
 800b5d2:	2600      	movs	r6, #0
 800b5d4:	341a      	adds	r4, #26
 800b5d6:	42b5      	cmp	r5, r6
 800b5d8:	d11a      	bne.n	800b610 <_printf_common+0xc8>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e008      	b.n	800b5f0 <_printf_common+0xa8>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	4652      	mov	r2, sl
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	47c0      	blx	r8
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d103      	bne.n	800b5f4 <_printf_common+0xac>
 800b5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f4:	3501      	adds	r5, #1
 800b5f6:	e7c6      	b.n	800b586 <_printf_common+0x3e>
 800b5f8:	18e1      	adds	r1, r4, r3
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	2030      	movs	r0, #48	; 0x30
 800b5fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b602:	4422      	add	r2, r4
 800b604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b60c:	3302      	adds	r3, #2
 800b60e:	e7c7      	b.n	800b5a0 <_printf_common+0x58>
 800b610:	2301      	movs	r3, #1
 800b612:	4622      	mov	r2, r4
 800b614:	4649      	mov	r1, r9
 800b616:	4638      	mov	r0, r7
 800b618:	47c0      	blx	r8
 800b61a:	3001      	adds	r0, #1
 800b61c:	d0e6      	beq.n	800b5ec <_printf_common+0xa4>
 800b61e:	3601      	adds	r6, #1
 800b620:	e7d9      	b.n	800b5d6 <_printf_common+0x8e>
	...

0800b624 <_printf_i>:
 800b624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	460c      	mov	r4, r1
 800b62a:	4691      	mov	r9, r2
 800b62c:	7e27      	ldrb	r7, [r4, #24]
 800b62e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b630:	2f78      	cmp	r7, #120	; 0x78
 800b632:	4680      	mov	r8, r0
 800b634:	469a      	mov	sl, r3
 800b636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b63a:	d807      	bhi.n	800b64c <_printf_i+0x28>
 800b63c:	2f62      	cmp	r7, #98	; 0x62
 800b63e:	d80a      	bhi.n	800b656 <_printf_i+0x32>
 800b640:	2f00      	cmp	r7, #0
 800b642:	f000 80d8 	beq.w	800b7f6 <_printf_i+0x1d2>
 800b646:	2f58      	cmp	r7, #88	; 0x58
 800b648:	f000 80a3 	beq.w	800b792 <_printf_i+0x16e>
 800b64c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b654:	e03a      	b.n	800b6cc <_printf_i+0xa8>
 800b656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b65a:	2b15      	cmp	r3, #21
 800b65c:	d8f6      	bhi.n	800b64c <_printf_i+0x28>
 800b65e:	a001      	add	r0, pc, #4	; (adr r0, 800b664 <_printf_i+0x40>)
 800b660:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b664:	0800b6bd 	.word	0x0800b6bd
 800b668:	0800b6d1 	.word	0x0800b6d1
 800b66c:	0800b64d 	.word	0x0800b64d
 800b670:	0800b64d 	.word	0x0800b64d
 800b674:	0800b64d 	.word	0x0800b64d
 800b678:	0800b64d 	.word	0x0800b64d
 800b67c:	0800b6d1 	.word	0x0800b6d1
 800b680:	0800b64d 	.word	0x0800b64d
 800b684:	0800b64d 	.word	0x0800b64d
 800b688:	0800b64d 	.word	0x0800b64d
 800b68c:	0800b64d 	.word	0x0800b64d
 800b690:	0800b7dd 	.word	0x0800b7dd
 800b694:	0800b701 	.word	0x0800b701
 800b698:	0800b7bf 	.word	0x0800b7bf
 800b69c:	0800b64d 	.word	0x0800b64d
 800b6a0:	0800b64d 	.word	0x0800b64d
 800b6a4:	0800b7ff 	.word	0x0800b7ff
 800b6a8:	0800b64d 	.word	0x0800b64d
 800b6ac:	0800b701 	.word	0x0800b701
 800b6b0:	0800b64d 	.word	0x0800b64d
 800b6b4:	0800b64d 	.word	0x0800b64d
 800b6b8:	0800b7c7 	.word	0x0800b7c7
 800b6bc:	680b      	ldr	r3, [r1, #0]
 800b6be:	1d1a      	adds	r2, r3, #4
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	600a      	str	r2, [r1, #0]
 800b6c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e0a3      	b.n	800b818 <_printf_i+0x1f4>
 800b6d0:	6825      	ldr	r5, [r4, #0]
 800b6d2:	6808      	ldr	r0, [r1, #0]
 800b6d4:	062e      	lsls	r6, r5, #24
 800b6d6:	f100 0304 	add.w	r3, r0, #4
 800b6da:	d50a      	bpl.n	800b6f2 <_printf_i+0xce>
 800b6dc:	6805      	ldr	r5, [r0, #0]
 800b6de:	600b      	str	r3, [r1, #0]
 800b6e0:	2d00      	cmp	r5, #0
 800b6e2:	da03      	bge.n	800b6ec <_printf_i+0xc8>
 800b6e4:	232d      	movs	r3, #45	; 0x2d
 800b6e6:	426d      	negs	r5, r5
 800b6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ec:	485e      	ldr	r0, [pc, #376]	; (800b868 <_printf_i+0x244>)
 800b6ee:	230a      	movs	r3, #10
 800b6f0:	e019      	b.n	800b726 <_printf_i+0x102>
 800b6f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b6f6:	6805      	ldr	r5, [r0, #0]
 800b6f8:	600b      	str	r3, [r1, #0]
 800b6fa:	bf18      	it	ne
 800b6fc:	b22d      	sxthne	r5, r5
 800b6fe:	e7ef      	b.n	800b6e0 <_printf_i+0xbc>
 800b700:	680b      	ldr	r3, [r1, #0]
 800b702:	6825      	ldr	r5, [r4, #0]
 800b704:	1d18      	adds	r0, r3, #4
 800b706:	6008      	str	r0, [r1, #0]
 800b708:	0628      	lsls	r0, r5, #24
 800b70a:	d501      	bpl.n	800b710 <_printf_i+0xec>
 800b70c:	681d      	ldr	r5, [r3, #0]
 800b70e:	e002      	b.n	800b716 <_printf_i+0xf2>
 800b710:	0669      	lsls	r1, r5, #25
 800b712:	d5fb      	bpl.n	800b70c <_printf_i+0xe8>
 800b714:	881d      	ldrh	r5, [r3, #0]
 800b716:	4854      	ldr	r0, [pc, #336]	; (800b868 <_printf_i+0x244>)
 800b718:	2f6f      	cmp	r7, #111	; 0x6f
 800b71a:	bf0c      	ite	eq
 800b71c:	2308      	moveq	r3, #8
 800b71e:	230a      	movne	r3, #10
 800b720:	2100      	movs	r1, #0
 800b722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b726:	6866      	ldr	r6, [r4, #4]
 800b728:	60a6      	str	r6, [r4, #8]
 800b72a:	2e00      	cmp	r6, #0
 800b72c:	bfa2      	ittt	ge
 800b72e:	6821      	ldrge	r1, [r4, #0]
 800b730:	f021 0104 	bicge.w	r1, r1, #4
 800b734:	6021      	strge	r1, [r4, #0]
 800b736:	b90d      	cbnz	r5, 800b73c <_printf_i+0x118>
 800b738:	2e00      	cmp	r6, #0
 800b73a:	d04d      	beq.n	800b7d8 <_printf_i+0x1b4>
 800b73c:	4616      	mov	r6, r2
 800b73e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b742:	fb03 5711 	mls	r7, r3, r1, r5
 800b746:	5dc7      	ldrb	r7, [r0, r7]
 800b748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b74c:	462f      	mov	r7, r5
 800b74e:	42bb      	cmp	r3, r7
 800b750:	460d      	mov	r5, r1
 800b752:	d9f4      	bls.n	800b73e <_printf_i+0x11a>
 800b754:	2b08      	cmp	r3, #8
 800b756:	d10b      	bne.n	800b770 <_printf_i+0x14c>
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	07df      	lsls	r7, r3, #31
 800b75c:	d508      	bpl.n	800b770 <_printf_i+0x14c>
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	6861      	ldr	r1, [r4, #4]
 800b762:	4299      	cmp	r1, r3
 800b764:	bfde      	ittt	le
 800b766:	2330      	movle	r3, #48	; 0x30
 800b768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b76c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b770:	1b92      	subs	r2, r2, r6
 800b772:	6122      	str	r2, [r4, #16]
 800b774:	f8cd a000 	str.w	sl, [sp]
 800b778:	464b      	mov	r3, r9
 800b77a:	aa03      	add	r2, sp, #12
 800b77c:	4621      	mov	r1, r4
 800b77e:	4640      	mov	r0, r8
 800b780:	f7ff fee2 	bl	800b548 <_printf_common>
 800b784:	3001      	adds	r0, #1
 800b786:	d14c      	bne.n	800b822 <_printf_i+0x1fe>
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	b004      	add	sp, #16
 800b78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b792:	4835      	ldr	r0, [pc, #212]	; (800b868 <_printf_i+0x244>)
 800b794:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	680e      	ldr	r6, [r1, #0]
 800b79c:	061f      	lsls	r7, r3, #24
 800b79e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b7a2:	600e      	str	r6, [r1, #0]
 800b7a4:	d514      	bpl.n	800b7d0 <_printf_i+0x1ac>
 800b7a6:	07d9      	lsls	r1, r3, #31
 800b7a8:	bf44      	itt	mi
 800b7aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b7ae:	6023      	strmi	r3, [r4, #0]
 800b7b0:	b91d      	cbnz	r5, 800b7ba <_printf_i+0x196>
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	f023 0320 	bic.w	r3, r3, #32
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	2310      	movs	r3, #16
 800b7bc:	e7b0      	b.n	800b720 <_printf_i+0xfc>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	f043 0320 	orr.w	r3, r3, #32
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	2378      	movs	r3, #120	; 0x78
 800b7c8:	4828      	ldr	r0, [pc, #160]	; (800b86c <_printf_i+0x248>)
 800b7ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7ce:	e7e3      	b.n	800b798 <_printf_i+0x174>
 800b7d0:	065e      	lsls	r6, r3, #25
 800b7d2:	bf48      	it	mi
 800b7d4:	b2ad      	uxthmi	r5, r5
 800b7d6:	e7e6      	b.n	800b7a6 <_printf_i+0x182>
 800b7d8:	4616      	mov	r6, r2
 800b7da:	e7bb      	b.n	800b754 <_printf_i+0x130>
 800b7dc:	680b      	ldr	r3, [r1, #0]
 800b7de:	6826      	ldr	r6, [r4, #0]
 800b7e0:	6960      	ldr	r0, [r4, #20]
 800b7e2:	1d1d      	adds	r5, r3, #4
 800b7e4:	600d      	str	r5, [r1, #0]
 800b7e6:	0635      	lsls	r5, r6, #24
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	d501      	bpl.n	800b7f0 <_printf_i+0x1cc>
 800b7ec:	6018      	str	r0, [r3, #0]
 800b7ee:	e002      	b.n	800b7f6 <_printf_i+0x1d2>
 800b7f0:	0671      	lsls	r1, r6, #25
 800b7f2:	d5fb      	bpl.n	800b7ec <_printf_i+0x1c8>
 800b7f4:	8018      	strh	r0, [r3, #0]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	4616      	mov	r6, r2
 800b7fc:	e7ba      	b.n	800b774 <_printf_i+0x150>
 800b7fe:	680b      	ldr	r3, [r1, #0]
 800b800:	1d1a      	adds	r2, r3, #4
 800b802:	600a      	str	r2, [r1, #0]
 800b804:	681e      	ldr	r6, [r3, #0]
 800b806:	6862      	ldr	r2, [r4, #4]
 800b808:	2100      	movs	r1, #0
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7f4 fcf0 	bl	80001f0 <memchr>
 800b810:	b108      	cbz	r0, 800b816 <_printf_i+0x1f2>
 800b812:	1b80      	subs	r0, r0, r6
 800b814:	6060      	str	r0, [r4, #4]
 800b816:	6863      	ldr	r3, [r4, #4]
 800b818:	6123      	str	r3, [r4, #16]
 800b81a:	2300      	movs	r3, #0
 800b81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b820:	e7a8      	b.n	800b774 <_printf_i+0x150>
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	4632      	mov	r2, r6
 800b826:	4649      	mov	r1, r9
 800b828:	4640      	mov	r0, r8
 800b82a:	47d0      	blx	sl
 800b82c:	3001      	adds	r0, #1
 800b82e:	d0ab      	beq.n	800b788 <_printf_i+0x164>
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	079b      	lsls	r3, r3, #30
 800b834:	d413      	bmi.n	800b85e <_printf_i+0x23a>
 800b836:	68e0      	ldr	r0, [r4, #12]
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	4298      	cmp	r0, r3
 800b83c:	bfb8      	it	lt
 800b83e:	4618      	movlt	r0, r3
 800b840:	e7a4      	b.n	800b78c <_printf_i+0x168>
 800b842:	2301      	movs	r3, #1
 800b844:	4632      	mov	r2, r6
 800b846:	4649      	mov	r1, r9
 800b848:	4640      	mov	r0, r8
 800b84a:	47d0      	blx	sl
 800b84c:	3001      	adds	r0, #1
 800b84e:	d09b      	beq.n	800b788 <_printf_i+0x164>
 800b850:	3501      	adds	r5, #1
 800b852:	68e3      	ldr	r3, [r4, #12]
 800b854:	9903      	ldr	r1, [sp, #12]
 800b856:	1a5b      	subs	r3, r3, r1
 800b858:	42ab      	cmp	r3, r5
 800b85a:	dcf2      	bgt.n	800b842 <_printf_i+0x21e>
 800b85c:	e7eb      	b.n	800b836 <_printf_i+0x212>
 800b85e:	2500      	movs	r5, #0
 800b860:	f104 0619 	add.w	r6, r4, #25
 800b864:	e7f5      	b.n	800b852 <_printf_i+0x22e>
 800b866:	bf00      	nop
 800b868:	08023c12 	.word	0x08023c12
 800b86c:	08023c23 	.word	0x08023c23

0800b870 <_scanf_float>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	b087      	sub	sp, #28
 800b876:	4617      	mov	r7, r2
 800b878:	9303      	str	r3, [sp, #12]
 800b87a:	688b      	ldr	r3, [r1, #8]
 800b87c:	1e5a      	subs	r2, r3, #1
 800b87e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b882:	bf83      	ittte	hi
 800b884:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b888:	195b      	addhi	r3, r3, r5
 800b88a:	9302      	strhi	r3, [sp, #8]
 800b88c:	2300      	movls	r3, #0
 800b88e:	bf86      	itte	hi
 800b890:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b894:	608b      	strhi	r3, [r1, #8]
 800b896:	9302      	strls	r3, [sp, #8]
 800b898:	680b      	ldr	r3, [r1, #0]
 800b89a:	468b      	mov	fp, r1
 800b89c:	2500      	movs	r5, #0
 800b89e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b8a2:	f84b 3b1c 	str.w	r3, [fp], #28
 800b8a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	465e      	mov	r6, fp
 800b8b0:	46aa      	mov	sl, r5
 800b8b2:	46a9      	mov	r9, r5
 800b8b4:	9501      	str	r5, [sp, #4]
 800b8b6:	68a2      	ldr	r2, [r4, #8]
 800b8b8:	b152      	cbz	r2, 800b8d0 <_scanf_float+0x60>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	2b4e      	cmp	r3, #78	; 0x4e
 800b8c0:	d864      	bhi.n	800b98c <_scanf_float+0x11c>
 800b8c2:	2b40      	cmp	r3, #64	; 0x40
 800b8c4:	d83c      	bhi.n	800b940 <_scanf_float+0xd0>
 800b8c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b8ca:	b2c8      	uxtb	r0, r1
 800b8cc:	280e      	cmp	r0, #14
 800b8ce:	d93a      	bls.n	800b946 <_scanf_float+0xd6>
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	d003      	beq.n	800b8de <_scanf_float+0x6e>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8e2:	f1ba 0f01 	cmp.w	sl, #1
 800b8e6:	f200 8113 	bhi.w	800bb10 <_scanf_float+0x2a0>
 800b8ea:	455e      	cmp	r6, fp
 800b8ec:	f200 8105 	bhi.w	800bafa <_scanf_float+0x28a>
 800b8f0:	2501      	movs	r5, #1
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	b007      	add	sp, #28
 800b8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b8fe:	2a0d      	cmp	r2, #13
 800b900:	d8e6      	bhi.n	800b8d0 <_scanf_float+0x60>
 800b902:	a101      	add	r1, pc, #4	; (adr r1, 800b908 <_scanf_float+0x98>)
 800b904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b908:	0800ba47 	.word	0x0800ba47
 800b90c:	0800b8d1 	.word	0x0800b8d1
 800b910:	0800b8d1 	.word	0x0800b8d1
 800b914:	0800b8d1 	.word	0x0800b8d1
 800b918:	0800baa7 	.word	0x0800baa7
 800b91c:	0800ba7f 	.word	0x0800ba7f
 800b920:	0800b8d1 	.word	0x0800b8d1
 800b924:	0800b8d1 	.word	0x0800b8d1
 800b928:	0800ba55 	.word	0x0800ba55
 800b92c:	0800b8d1 	.word	0x0800b8d1
 800b930:	0800b8d1 	.word	0x0800b8d1
 800b934:	0800b8d1 	.word	0x0800b8d1
 800b938:	0800b8d1 	.word	0x0800b8d1
 800b93c:	0800ba0d 	.word	0x0800ba0d
 800b940:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b944:	e7db      	b.n	800b8fe <_scanf_float+0x8e>
 800b946:	290e      	cmp	r1, #14
 800b948:	d8c2      	bhi.n	800b8d0 <_scanf_float+0x60>
 800b94a:	a001      	add	r0, pc, #4	; (adr r0, 800b950 <_scanf_float+0xe0>)
 800b94c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b950:	0800b9ff 	.word	0x0800b9ff
 800b954:	0800b8d1 	.word	0x0800b8d1
 800b958:	0800b9ff 	.word	0x0800b9ff
 800b95c:	0800ba93 	.word	0x0800ba93
 800b960:	0800b8d1 	.word	0x0800b8d1
 800b964:	0800b9ad 	.word	0x0800b9ad
 800b968:	0800b9e9 	.word	0x0800b9e9
 800b96c:	0800b9e9 	.word	0x0800b9e9
 800b970:	0800b9e9 	.word	0x0800b9e9
 800b974:	0800b9e9 	.word	0x0800b9e9
 800b978:	0800b9e9 	.word	0x0800b9e9
 800b97c:	0800b9e9 	.word	0x0800b9e9
 800b980:	0800b9e9 	.word	0x0800b9e9
 800b984:	0800b9e9 	.word	0x0800b9e9
 800b988:	0800b9e9 	.word	0x0800b9e9
 800b98c:	2b6e      	cmp	r3, #110	; 0x6e
 800b98e:	d809      	bhi.n	800b9a4 <_scanf_float+0x134>
 800b990:	2b60      	cmp	r3, #96	; 0x60
 800b992:	d8b2      	bhi.n	800b8fa <_scanf_float+0x8a>
 800b994:	2b54      	cmp	r3, #84	; 0x54
 800b996:	d077      	beq.n	800ba88 <_scanf_float+0x218>
 800b998:	2b59      	cmp	r3, #89	; 0x59
 800b99a:	d199      	bne.n	800b8d0 <_scanf_float+0x60>
 800b99c:	2d07      	cmp	r5, #7
 800b99e:	d197      	bne.n	800b8d0 <_scanf_float+0x60>
 800b9a0:	2508      	movs	r5, #8
 800b9a2:	e029      	b.n	800b9f8 <_scanf_float+0x188>
 800b9a4:	2b74      	cmp	r3, #116	; 0x74
 800b9a6:	d06f      	beq.n	800ba88 <_scanf_float+0x218>
 800b9a8:	2b79      	cmp	r3, #121	; 0x79
 800b9aa:	e7f6      	b.n	800b99a <_scanf_float+0x12a>
 800b9ac:	6821      	ldr	r1, [r4, #0]
 800b9ae:	05c8      	lsls	r0, r1, #23
 800b9b0:	d51a      	bpl.n	800b9e8 <_scanf_float+0x178>
 800b9b2:	9b02      	ldr	r3, [sp, #8]
 800b9b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b9b8:	6021      	str	r1, [r4, #0]
 800b9ba:	f109 0901 	add.w	r9, r9, #1
 800b9be:	b11b      	cbz	r3, 800b9c8 <_scanf_float+0x158>
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	3201      	adds	r2, #1
 800b9c4:	9302      	str	r3, [sp, #8]
 800b9c6:	60a2      	str	r2, [r4, #8]
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	6123      	str	r3, [r4, #16]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	607b      	str	r3, [r7, #4]
 800b9dc:	f340 8084 	ble.w	800bae8 <_scanf_float+0x278>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	603b      	str	r3, [r7, #0]
 800b9e6:	e766      	b.n	800b8b6 <_scanf_float+0x46>
 800b9e8:	eb1a 0f05 	cmn.w	sl, r5
 800b9ec:	f47f af70 	bne.w	800b8d0 <_scanf_float+0x60>
 800b9f0:	6822      	ldr	r2, [r4, #0]
 800b9f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b9f6:	6022      	str	r2, [r4, #0]
 800b9f8:	f806 3b01 	strb.w	r3, [r6], #1
 800b9fc:	e7e4      	b.n	800b9c8 <_scanf_float+0x158>
 800b9fe:	6822      	ldr	r2, [r4, #0]
 800ba00:	0610      	lsls	r0, r2, #24
 800ba02:	f57f af65 	bpl.w	800b8d0 <_scanf_float+0x60>
 800ba06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba0a:	e7f4      	b.n	800b9f6 <_scanf_float+0x186>
 800ba0c:	f1ba 0f00 	cmp.w	sl, #0
 800ba10:	d10e      	bne.n	800ba30 <_scanf_float+0x1c0>
 800ba12:	f1b9 0f00 	cmp.w	r9, #0
 800ba16:	d10e      	bne.n	800ba36 <_scanf_float+0x1c6>
 800ba18:	6822      	ldr	r2, [r4, #0]
 800ba1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba22:	d108      	bne.n	800ba36 <_scanf_float+0x1c6>
 800ba24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba28:	6022      	str	r2, [r4, #0]
 800ba2a:	f04f 0a01 	mov.w	sl, #1
 800ba2e:	e7e3      	b.n	800b9f8 <_scanf_float+0x188>
 800ba30:	f1ba 0f02 	cmp.w	sl, #2
 800ba34:	d055      	beq.n	800bae2 <_scanf_float+0x272>
 800ba36:	2d01      	cmp	r5, #1
 800ba38:	d002      	beq.n	800ba40 <_scanf_float+0x1d0>
 800ba3a:	2d04      	cmp	r5, #4
 800ba3c:	f47f af48 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba40:	3501      	adds	r5, #1
 800ba42:	b2ed      	uxtb	r5, r5
 800ba44:	e7d8      	b.n	800b9f8 <_scanf_float+0x188>
 800ba46:	f1ba 0f01 	cmp.w	sl, #1
 800ba4a:	f47f af41 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba4e:	f04f 0a02 	mov.w	sl, #2
 800ba52:	e7d1      	b.n	800b9f8 <_scanf_float+0x188>
 800ba54:	b97d      	cbnz	r5, 800ba76 <_scanf_float+0x206>
 800ba56:	f1b9 0f00 	cmp.w	r9, #0
 800ba5a:	f47f af3c 	bne.w	800b8d6 <_scanf_float+0x66>
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba68:	f47f af39 	bne.w	800b8de <_scanf_float+0x6e>
 800ba6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba70:	6022      	str	r2, [r4, #0]
 800ba72:	2501      	movs	r5, #1
 800ba74:	e7c0      	b.n	800b9f8 <_scanf_float+0x188>
 800ba76:	2d03      	cmp	r5, #3
 800ba78:	d0e2      	beq.n	800ba40 <_scanf_float+0x1d0>
 800ba7a:	2d05      	cmp	r5, #5
 800ba7c:	e7de      	b.n	800ba3c <_scanf_float+0x1cc>
 800ba7e:	2d02      	cmp	r5, #2
 800ba80:	f47f af26 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba84:	2503      	movs	r5, #3
 800ba86:	e7b7      	b.n	800b9f8 <_scanf_float+0x188>
 800ba88:	2d06      	cmp	r5, #6
 800ba8a:	f47f af21 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba8e:	2507      	movs	r5, #7
 800ba90:	e7b2      	b.n	800b9f8 <_scanf_float+0x188>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	0591      	lsls	r1, r2, #22
 800ba96:	f57f af1b 	bpl.w	800b8d0 <_scanf_float+0x60>
 800ba9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ba9e:	6022      	str	r2, [r4, #0]
 800baa0:	f8cd 9004 	str.w	r9, [sp, #4]
 800baa4:	e7a8      	b.n	800b9f8 <_scanf_float+0x188>
 800baa6:	6822      	ldr	r2, [r4, #0]
 800baa8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800baac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bab0:	d006      	beq.n	800bac0 <_scanf_float+0x250>
 800bab2:	0550      	lsls	r0, r2, #21
 800bab4:	f57f af0c 	bpl.w	800b8d0 <_scanf_float+0x60>
 800bab8:	f1b9 0f00 	cmp.w	r9, #0
 800babc:	f43f af0f 	beq.w	800b8de <_scanf_float+0x6e>
 800bac0:	0591      	lsls	r1, r2, #22
 800bac2:	bf58      	it	pl
 800bac4:	9901      	ldrpl	r1, [sp, #4]
 800bac6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800baca:	bf58      	it	pl
 800bacc:	eba9 0101 	subpl.w	r1, r9, r1
 800bad0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bad4:	bf58      	it	pl
 800bad6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bada:	6022      	str	r2, [r4, #0]
 800badc:	f04f 0900 	mov.w	r9, #0
 800bae0:	e78a      	b.n	800b9f8 <_scanf_float+0x188>
 800bae2:	f04f 0a03 	mov.w	sl, #3
 800bae6:	e787      	b.n	800b9f8 <_scanf_float+0x188>
 800bae8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800baec:	4639      	mov	r1, r7
 800baee:	4640      	mov	r0, r8
 800baf0:	4798      	blx	r3
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f43f aedf 	beq.w	800b8b6 <_scanf_float+0x46>
 800baf8:	e6ea      	b.n	800b8d0 <_scanf_float+0x60>
 800bafa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bafe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb02:	463a      	mov	r2, r7
 800bb04:	4640      	mov	r0, r8
 800bb06:	4798      	blx	r3
 800bb08:	6923      	ldr	r3, [r4, #16]
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	6123      	str	r3, [r4, #16]
 800bb0e:	e6ec      	b.n	800b8ea <_scanf_float+0x7a>
 800bb10:	1e6b      	subs	r3, r5, #1
 800bb12:	2b06      	cmp	r3, #6
 800bb14:	d825      	bhi.n	800bb62 <_scanf_float+0x2f2>
 800bb16:	2d02      	cmp	r5, #2
 800bb18:	d836      	bhi.n	800bb88 <_scanf_float+0x318>
 800bb1a:	455e      	cmp	r6, fp
 800bb1c:	f67f aee8 	bls.w	800b8f0 <_scanf_float+0x80>
 800bb20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb28:	463a      	mov	r2, r7
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	4798      	blx	r3
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	6123      	str	r3, [r4, #16]
 800bb34:	e7f1      	b.n	800bb1a <_scanf_float+0x2aa>
 800bb36:	9802      	ldr	r0, [sp, #8]
 800bb38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bb40:	9002      	str	r0, [sp, #8]
 800bb42:	463a      	mov	r2, r7
 800bb44:	4640      	mov	r0, r8
 800bb46:	4798      	blx	r3
 800bb48:	6923      	ldr	r3, [r4, #16]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	6123      	str	r3, [r4, #16]
 800bb4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb52:	fa5f fa8a 	uxtb.w	sl, sl
 800bb56:	f1ba 0f02 	cmp.w	sl, #2
 800bb5a:	d1ec      	bne.n	800bb36 <_scanf_float+0x2c6>
 800bb5c:	3d03      	subs	r5, #3
 800bb5e:	b2ed      	uxtb	r5, r5
 800bb60:	1b76      	subs	r6, r6, r5
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	05da      	lsls	r2, r3, #23
 800bb66:	d52f      	bpl.n	800bbc8 <_scanf_float+0x358>
 800bb68:	055b      	lsls	r3, r3, #21
 800bb6a:	d510      	bpl.n	800bb8e <_scanf_float+0x31e>
 800bb6c:	455e      	cmp	r6, fp
 800bb6e:	f67f aebf 	bls.w	800b8f0 <_scanf_float+0x80>
 800bb72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb7a:	463a      	mov	r2, r7
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4798      	blx	r3
 800bb80:	6923      	ldr	r3, [r4, #16]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	6123      	str	r3, [r4, #16]
 800bb86:	e7f1      	b.n	800bb6c <_scanf_float+0x2fc>
 800bb88:	46aa      	mov	sl, r5
 800bb8a:	9602      	str	r6, [sp, #8]
 800bb8c:	e7df      	b.n	800bb4e <_scanf_float+0x2de>
 800bb8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bb92:	6923      	ldr	r3, [r4, #16]
 800bb94:	2965      	cmp	r1, #101	; 0x65
 800bb96:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb9a:	f106 35ff 	add.w	r5, r6, #4294967295
 800bb9e:	6123      	str	r3, [r4, #16]
 800bba0:	d00c      	beq.n	800bbbc <_scanf_float+0x34c>
 800bba2:	2945      	cmp	r1, #69	; 0x45
 800bba4:	d00a      	beq.n	800bbbc <_scanf_float+0x34c>
 800bba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbaa:	463a      	mov	r2, r7
 800bbac:	4640      	mov	r0, r8
 800bbae:	4798      	blx	r3
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	1eb5      	subs	r5, r6, #2
 800bbba:	6123      	str	r3, [r4, #16]
 800bbbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbc0:	463a      	mov	r2, r7
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4798      	blx	r3
 800bbc6:	462e      	mov	r6, r5
 800bbc8:	6825      	ldr	r5, [r4, #0]
 800bbca:	f015 0510 	ands.w	r5, r5, #16
 800bbce:	d158      	bne.n	800bc82 <_scanf_float+0x412>
 800bbd0:	7035      	strb	r5, [r6, #0]
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bbd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbdc:	d11c      	bne.n	800bc18 <_scanf_float+0x3a8>
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	454b      	cmp	r3, r9
 800bbe2:	eba3 0209 	sub.w	r2, r3, r9
 800bbe6:	d124      	bne.n	800bc32 <_scanf_float+0x3c2>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4659      	mov	r1, fp
 800bbec:	4640      	mov	r0, r8
 800bbee:	f000 fe9d 	bl	800c92c <_strtod_r>
 800bbf2:	9b03      	ldr	r3, [sp, #12]
 800bbf4:	6821      	ldr	r1, [r4, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f011 0f02 	tst.w	r1, #2
 800bbfc:	ec57 6b10 	vmov	r6, r7, d0
 800bc00:	f103 0204 	add.w	r2, r3, #4
 800bc04:	d020      	beq.n	800bc48 <_scanf_float+0x3d8>
 800bc06:	9903      	ldr	r1, [sp, #12]
 800bc08:	600a      	str	r2, [r1, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	e9c3 6700 	strd	r6, r7, [r3]
 800bc10:	68e3      	ldr	r3, [r4, #12]
 800bc12:	3301      	adds	r3, #1
 800bc14:	60e3      	str	r3, [r4, #12]
 800bc16:	e66c      	b.n	800b8f2 <_scanf_float+0x82>
 800bc18:	9b04      	ldr	r3, [sp, #16]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d0e4      	beq.n	800bbe8 <_scanf_float+0x378>
 800bc1e:	9905      	ldr	r1, [sp, #20]
 800bc20:	230a      	movs	r3, #10
 800bc22:	462a      	mov	r2, r5
 800bc24:	3101      	adds	r1, #1
 800bc26:	4640      	mov	r0, r8
 800bc28:	f000 ff0a 	bl	800ca40 <_strtol_r>
 800bc2c:	9b04      	ldr	r3, [sp, #16]
 800bc2e:	9e05      	ldr	r6, [sp, #20]
 800bc30:	1ac2      	subs	r2, r0, r3
 800bc32:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bc36:	429e      	cmp	r6, r3
 800bc38:	bf28      	it	cs
 800bc3a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bc3e:	4912      	ldr	r1, [pc, #72]	; (800bc88 <_scanf_float+0x418>)
 800bc40:	4630      	mov	r0, r6
 800bc42:	f000 f82b 	bl	800bc9c <siprintf>
 800bc46:	e7cf      	b.n	800bbe8 <_scanf_float+0x378>
 800bc48:	f011 0f04 	tst.w	r1, #4
 800bc4c:	9903      	ldr	r1, [sp, #12]
 800bc4e:	600a      	str	r2, [r1, #0]
 800bc50:	d1db      	bne.n	800bc0a <_scanf_float+0x39a>
 800bc52:	f8d3 8000 	ldr.w	r8, [r3]
 800bc56:	ee10 2a10 	vmov	r2, s0
 800bc5a:	ee10 0a10 	vmov	r0, s0
 800bc5e:	463b      	mov	r3, r7
 800bc60:	4639      	mov	r1, r7
 800bc62:	f7f4 ff6b 	bl	8000b3c <__aeabi_dcmpun>
 800bc66:	b128      	cbz	r0, 800bc74 <_scanf_float+0x404>
 800bc68:	4808      	ldr	r0, [pc, #32]	; (800bc8c <_scanf_float+0x41c>)
 800bc6a:	f000 f811 	bl	800bc90 <nanf>
 800bc6e:	ed88 0a00 	vstr	s0, [r8]
 800bc72:	e7cd      	b.n	800bc10 <_scanf_float+0x3a0>
 800bc74:	4630      	mov	r0, r6
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f4 ffbe 	bl	8000bf8 <__aeabi_d2f>
 800bc7c:	f8c8 0000 	str.w	r0, [r8]
 800bc80:	e7c6      	b.n	800bc10 <_scanf_float+0x3a0>
 800bc82:	2500      	movs	r5, #0
 800bc84:	e635      	b.n	800b8f2 <_scanf_float+0x82>
 800bc86:	bf00      	nop
 800bc88:	08023c34 	.word	0x08023c34
 800bc8c:	08024050 	.word	0x08024050

0800bc90 <nanf>:
 800bc90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bc98 <nanf+0x8>
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	7fc00000 	.word	0x7fc00000

0800bc9c <siprintf>:
 800bc9c:	b40e      	push	{r1, r2, r3}
 800bc9e:	b500      	push	{lr}
 800bca0:	b09c      	sub	sp, #112	; 0x70
 800bca2:	ab1d      	add	r3, sp, #116	; 0x74
 800bca4:	9002      	str	r0, [sp, #8]
 800bca6:	9006      	str	r0, [sp, #24]
 800bca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bcac:	4809      	ldr	r0, [pc, #36]	; (800bcd4 <siprintf+0x38>)
 800bcae:	9107      	str	r1, [sp, #28]
 800bcb0:	9104      	str	r1, [sp, #16]
 800bcb2:	4909      	ldr	r1, [pc, #36]	; (800bcd8 <siprintf+0x3c>)
 800bcb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcb8:	9105      	str	r1, [sp, #20]
 800bcba:	6800      	ldr	r0, [r0, #0]
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	a902      	add	r1, sp, #8
 800bcc0:	f002 fea6 	bl	800ea10 <_svfiprintf_r>
 800bcc4:	9b02      	ldr	r3, [sp, #8]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	701a      	strb	r2, [r3, #0]
 800bcca:	b01c      	add	sp, #112	; 0x70
 800bccc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcd0:	b003      	add	sp, #12
 800bcd2:	4770      	bx	lr
 800bcd4:	200029f8 	.word	0x200029f8
 800bcd8:	ffff0208 	.word	0xffff0208

0800bcdc <sulp>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	4604      	mov	r4, r0
 800bce0:	460d      	mov	r5, r1
 800bce2:	ec45 4b10 	vmov	d0, r4, r5
 800bce6:	4616      	mov	r6, r2
 800bce8:	f002 fc2e 	bl	800e548 <__ulp>
 800bcec:	ec51 0b10 	vmov	r0, r1, d0
 800bcf0:	b17e      	cbz	r6, 800bd12 <sulp+0x36>
 800bcf2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bcf6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dd09      	ble.n	800bd12 <sulp+0x36>
 800bcfe:	051b      	lsls	r3, r3, #20
 800bd00:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bd04:	2400      	movs	r4, #0
 800bd06:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	462b      	mov	r3, r5
 800bd0e:	f7f4 fc7b 	bl	8000608 <__aeabi_dmul>
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
 800bd14:	0000      	movs	r0, r0
	...

0800bd18 <_strtod_l>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	b0a3      	sub	sp, #140	; 0x8c
 800bd1e:	461f      	mov	r7, r3
 800bd20:	2300      	movs	r3, #0
 800bd22:	931e      	str	r3, [sp, #120]	; 0x78
 800bd24:	4ba4      	ldr	r3, [pc, #656]	; (800bfb8 <_strtod_l+0x2a0>)
 800bd26:	9219      	str	r2, [sp, #100]	; 0x64
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	9307      	str	r3, [sp, #28]
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	4618      	mov	r0, r3
 800bd30:	4688      	mov	r8, r1
 800bd32:	f7f4 fa55 	bl	80001e0 <strlen>
 800bd36:	f04f 0a00 	mov.w	sl, #0
 800bd3a:	4605      	mov	r5, r0
 800bd3c:	f04f 0b00 	mov.w	fp, #0
 800bd40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bd44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd46:	781a      	ldrb	r2, [r3, #0]
 800bd48:	2a2b      	cmp	r2, #43	; 0x2b
 800bd4a:	d04c      	beq.n	800bde6 <_strtod_l+0xce>
 800bd4c:	d839      	bhi.n	800bdc2 <_strtod_l+0xaa>
 800bd4e:	2a0d      	cmp	r2, #13
 800bd50:	d832      	bhi.n	800bdb8 <_strtod_l+0xa0>
 800bd52:	2a08      	cmp	r2, #8
 800bd54:	d832      	bhi.n	800bdbc <_strtod_l+0xa4>
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d03c      	beq.n	800bdd4 <_strtod_l+0xbc>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	930e      	str	r3, [sp, #56]	; 0x38
 800bd5e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bd60:	7833      	ldrb	r3, [r6, #0]
 800bd62:	2b30      	cmp	r3, #48	; 0x30
 800bd64:	f040 80b4 	bne.w	800bed0 <_strtod_l+0x1b8>
 800bd68:	7873      	ldrb	r3, [r6, #1]
 800bd6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd6e:	2b58      	cmp	r3, #88	; 0x58
 800bd70:	d16c      	bne.n	800be4c <_strtod_l+0x134>
 800bd72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	ab1e      	add	r3, sp, #120	; 0x78
 800bd78:	9702      	str	r7, [sp, #8]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	4a8f      	ldr	r2, [pc, #572]	; (800bfbc <_strtod_l+0x2a4>)
 800bd7e:	ab1f      	add	r3, sp, #124	; 0x7c
 800bd80:	a91d      	add	r1, sp, #116	; 0x74
 800bd82:	4620      	mov	r0, r4
 800bd84:	f001 fd40 	bl	800d808 <__gethex>
 800bd88:	f010 0707 	ands.w	r7, r0, #7
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	d005      	beq.n	800bd9c <_strtod_l+0x84>
 800bd90:	2f06      	cmp	r7, #6
 800bd92:	d12a      	bne.n	800bdea <_strtod_l+0xd2>
 800bd94:	3601      	adds	r6, #1
 800bd96:	2300      	movs	r3, #0
 800bd98:	961d      	str	r6, [sp, #116]	; 0x74
 800bd9a:	930e      	str	r3, [sp, #56]	; 0x38
 800bd9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f040 8596 	bne.w	800c8d0 <_strtod_l+0xbb8>
 800bda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bda6:	b1db      	cbz	r3, 800bde0 <_strtod_l+0xc8>
 800bda8:	4652      	mov	r2, sl
 800bdaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bdae:	ec43 2b10 	vmov	d0, r2, r3
 800bdb2:	b023      	add	sp, #140	; 0x8c
 800bdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb8:	2a20      	cmp	r2, #32
 800bdba:	d1ce      	bne.n	800bd5a <_strtod_l+0x42>
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	931d      	str	r3, [sp, #116]	; 0x74
 800bdc0:	e7c0      	b.n	800bd44 <_strtod_l+0x2c>
 800bdc2:	2a2d      	cmp	r2, #45	; 0x2d
 800bdc4:	d1c9      	bne.n	800bd5a <_strtod_l+0x42>
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	920e      	str	r2, [sp, #56]	; 0x38
 800bdca:	1c5a      	adds	r2, r3, #1
 800bdcc:	921d      	str	r2, [sp, #116]	; 0x74
 800bdce:	785b      	ldrb	r3, [r3, #1]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1c4      	bne.n	800bd5e <_strtod_l+0x46>
 800bdd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bdd6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f040 8576 	bne.w	800c8cc <_strtod_l+0xbb4>
 800bde0:	4652      	mov	r2, sl
 800bde2:	465b      	mov	r3, fp
 800bde4:	e7e3      	b.n	800bdae <_strtod_l+0x96>
 800bde6:	2200      	movs	r2, #0
 800bde8:	e7ee      	b.n	800bdc8 <_strtod_l+0xb0>
 800bdea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bdec:	b13a      	cbz	r2, 800bdfe <_strtod_l+0xe6>
 800bdee:	2135      	movs	r1, #53	; 0x35
 800bdf0:	a820      	add	r0, sp, #128	; 0x80
 800bdf2:	f002 fcb4 	bl	800e75e <__copybits>
 800bdf6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f002 f879 	bl	800def0 <_Bfree>
 800bdfe:	3f01      	subs	r7, #1
 800be00:	2f05      	cmp	r7, #5
 800be02:	d807      	bhi.n	800be14 <_strtod_l+0xfc>
 800be04:	e8df f007 	tbb	[pc, r7]
 800be08:	1d180b0e 	.word	0x1d180b0e
 800be0c:	030e      	.short	0x030e
 800be0e:	f04f 0b00 	mov.w	fp, #0
 800be12:	46da      	mov	sl, fp
 800be14:	0728      	lsls	r0, r5, #28
 800be16:	d5c1      	bpl.n	800bd9c <_strtod_l+0x84>
 800be18:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800be1c:	e7be      	b.n	800bd9c <_strtod_l+0x84>
 800be1e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800be22:	e7f7      	b.n	800be14 <_strtod_l+0xfc>
 800be24:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800be28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800be2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be36:	e7ed      	b.n	800be14 <_strtod_l+0xfc>
 800be38:	f8df b184 	ldr.w	fp, [pc, #388]	; 800bfc0 <_strtod_l+0x2a8>
 800be3c:	f04f 0a00 	mov.w	sl, #0
 800be40:	e7e8      	b.n	800be14 <_strtod_l+0xfc>
 800be42:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800be46:	f04f 3aff 	mov.w	sl, #4294967295
 800be4a:	e7e3      	b.n	800be14 <_strtod_l+0xfc>
 800be4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	921d      	str	r2, [sp, #116]	; 0x74
 800be52:	785b      	ldrb	r3, [r3, #1]
 800be54:	2b30      	cmp	r3, #48	; 0x30
 800be56:	d0f9      	beq.n	800be4c <_strtod_l+0x134>
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d09f      	beq.n	800bd9c <_strtod_l+0x84>
 800be5c:	2301      	movs	r3, #1
 800be5e:	f04f 0900 	mov.w	r9, #0
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be66:	930a      	str	r3, [sp, #40]	; 0x28
 800be68:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800be6c:	464f      	mov	r7, r9
 800be6e:	220a      	movs	r2, #10
 800be70:	981d      	ldr	r0, [sp, #116]	; 0x74
 800be72:	7806      	ldrb	r6, [r0, #0]
 800be74:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800be78:	b2d9      	uxtb	r1, r3
 800be7a:	2909      	cmp	r1, #9
 800be7c:	d92a      	bls.n	800bed4 <_strtod_l+0x1bc>
 800be7e:	9907      	ldr	r1, [sp, #28]
 800be80:	462a      	mov	r2, r5
 800be82:	f002 fedd 	bl	800ec40 <strncmp>
 800be86:	b398      	cbz	r0, 800bef0 <_strtod_l+0x1d8>
 800be88:	2000      	movs	r0, #0
 800be8a:	4633      	mov	r3, r6
 800be8c:	463d      	mov	r5, r7
 800be8e:	9007      	str	r0, [sp, #28]
 800be90:	4602      	mov	r2, r0
 800be92:	2b65      	cmp	r3, #101	; 0x65
 800be94:	d001      	beq.n	800be9a <_strtod_l+0x182>
 800be96:	2b45      	cmp	r3, #69	; 0x45
 800be98:	d118      	bne.n	800becc <_strtod_l+0x1b4>
 800be9a:	b91d      	cbnz	r5, 800bea4 <_strtod_l+0x18c>
 800be9c:	9b04      	ldr	r3, [sp, #16]
 800be9e:	4303      	orrs	r3, r0
 800bea0:	d098      	beq.n	800bdd4 <_strtod_l+0xbc>
 800bea2:	2500      	movs	r5, #0
 800bea4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800bea8:	f108 0301 	add.w	r3, r8, #1
 800beac:	931d      	str	r3, [sp, #116]	; 0x74
 800beae:	f898 3001 	ldrb.w	r3, [r8, #1]
 800beb2:	2b2b      	cmp	r3, #43	; 0x2b
 800beb4:	d075      	beq.n	800bfa2 <_strtod_l+0x28a>
 800beb6:	2b2d      	cmp	r3, #45	; 0x2d
 800beb8:	d07b      	beq.n	800bfb2 <_strtod_l+0x29a>
 800beba:	f04f 0c00 	mov.w	ip, #0
 800bebe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bec2:	2909      	cmp	r1, #9
 800bec4:	f240 8082 	bls.w	800bfcc <_strtod_l+0x2b4>
 800bec8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800becc:	2600      	movs	r6, #0
 800bece:	e09d      	b.n	800c00c <_strtod_l+0x2f4>
 800bed0:	2300      	movs	r3, #0
 800bed2:	e7c4      	b.n	800be5e <_strtod_l+0x146>
 800bed4:	2f08      	cmp	r7, #8
 800bed6:	bfd8      	it	le
 800bed8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800beda:	f100 0001 	add.w	r0, r0, #1
 800bede:	bfda      	itte	le
 800bee0:	fb02 3301 	mlale	r3, r2, r1, r3
 800bee4:	9309      	strle	r3, [sp, #36]	; 0x24
 800bee6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800beea:	3701      	adds	r7, #1
 800beec:	901d      	str	r0, [sp, #116]	; 0x74
 800beee:	e7bf      	b.n	800be70 <_strtod_l+0x158>
 800bef0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bef2:	195a      	adds	r2, r3, r5
 800bef4:	921d      	str	r2, [sp, #116]	; 0x74
 800bef6:	5d5b      	ldrb	r3, [r3, r5]
 800bef8:	2f00      	cmp	r7, #0
 800befa:	d037      	beq.n	800bf6c <_strtod_l+0x254>
 800befc:	9007      	str	r0, [sp, #28]
 800befe:	463d      	mov	r5, r7
 800bf00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bf04:	2a09      	cmp	r2, #9
 800bf06:	d912      	bls.n	800bf2e <_strtod_l+0x216>
 800bf08:	2201      	movs	r2, #1
 800bf0a:	e7c2      	b.n	800be92 <_strtod_l+0x17a>
 800bf0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf0e:	1c5a      	adds	r2, r3, #1
 800bf10:	921d      	str	r2, [sp, #116]	; 0x74
 800bf12:	785b      	ldrb	r3, [r3, #1]
 800bf14:	3001      	adds	r0, #1
 800bf16:	2b30      	cmp	r3, #48	; 0x30
 800bf18:	d0f8      	beq.n	800bf0c <_strtod_l+0x1f4>
 800bf1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bf1e:	2a08      	cmp	r2, #8
 800bf20:	f200 84db 	bhi.w	800c8da <_strtod_l+0xbc2>
 800bf24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bf26:	9007      	str	r0, [sp, #28]
 800bf28:	2000      	movs	r0, #0
 800bf2a:	920a      	str	r2, [sp, #40]	; 0x28
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	3b30      	subs	r3, #48	; 0x30
 800bf30:	f100 0201 	add.w	r2, r0, #1
 800bf34:	d014      	beq.n	800bf60 <_strtod_l+0x248>
 800bf36:	9907      	ldr	r1, [sp, #28]
 800bf38:	4411      	add	r1, r2
 800bf3a:	9107      	str	r1, [sp, #28]
 800bf3c:	462a      	mov	r2, r5
 800bf3e:	eb00 0e05 	add.w	lr, r0, r5
 800bf42:	210a      	movs	r1, #10
 800bf44:	4572      	cmp	r2, lr
 800bf46:	d113      	bne.n	800bf70 <_strtod_l+0x258>
 800bf48:	182a      	adds	r2, r5, r0
 800bf4a:	2a08      	cmp	r2, #8
 800bf4c:	f105 0501 	add.w	r5, r5, #1
 800bf50:	4405      	add	r5, r0
 800bf52:	dc1c      	bgt.n	800bf8e <_strtod_l+0x276>
 800bf54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf56:	220a      	movs	r2, #10
 800bf58:	fb02 3301 	mla	r3, r2, r1, r3
 800bf5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5e:	2200      	movs	r2, #0
 800bf60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf62:	1c59      	adds	r1, r3, #1
 800bf64:	911d      	str	r1, [sp, #116]	; 0x74
 800bf66:	785b      	ldrb	r3, [r3, #1]
 800bf68:	4610      	mov	r0, r2
 800bf6a:	e7c9      	b.n	800bf00 <_strtod_l+0x1e8>
 800bf6c:	4638      	mov	r0, r7
 800bf6e:	e7d2      	b.n	800bf16 <_strtod_l+0x1fe>
 800bf70:	2a08      	cmp	r2, #8
 800bf72:	dc04      	bgt.n	800bf7e <_strtod_l+0x266>
 800bf74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bf76:	434e      	muls	r6, r1
 800bf78:	9609      	str	r6, [sp, #36]	; 0x24
 800bf7a:	3201      	adds	r2, #1
 800bf7c:	e7e2      	b.n	800bf44 <_strtod_l+0x22c>
 800bf7e:	f102 0c01 	add.w	ip, r2, #1
 800bf82:	f1bc 0f10 	cmp.w	ip, #16
 800bf86:	bfd8      	it	le
 800bf88:	fb01 f909 	mulle.w	r9, r1, r9
 800bf8c:	e7f5      	b.n	800bf7a <_strtod_l+0x262>
 800bf8e:	2d10      	cmp	r5, #16
 800bf90:	bfdc      	itt	le
 800bf92:	220a      	movle	r2, #10
 800bf94:	fb02 3909 	mlale	r9, r2, r9, r3
 800bf98:	e7e1      	b.n	800bf5e <_strtod_l+0x246>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	9307      	str	r3, [sp, #28]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	e77c      	b.n	800be9c <_strtod_l+0x184>
 800bfa2:	f04f 0c00 	mov.w	ip, #0
 800bfa6:	f108 0302 	add.w	r3, r8, #2
 800bfaa:	931d      	str	r3, [sp, #116]	; 0x74
 800bfac:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bfb0:	e785      	b.n	800bebe <_strtod_l+0x1a6>
 800bfb2:	f04f 0c01 	mov.w	ip, #1
 800bfb6:	e7f6      	b.n	800bfa6 <_strtod_l+0x28e>
 800bfb8:	08023e90 	.word	0x08023e90
 800bfbc:	08023c3c 	.word	0x08023c3c
 800bfc0:	7ff00000 	.word	0x7ff00000
 800bfc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfc6:	1c59      	adds	r1, r3, #1
 800bfc8:	911d      	str	r1, [sp, #116]	; 0x74
 800bfca:	785b      	ldrb	r3, [r3, #1]
 800bfcc:	2b30      	cmp	r3, #48	; 0x30
 800bfce:	d0f9      	beq.n	800bfc4 <_strtod_l+0x2ac>
 800bfd0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800bfd4:	2908      	cmp	r1, #8
 800bfd6:	f63f af79 	bhi.w	800becc <_strtod_l+0x1b4>
 800bfda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bfde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfe0:	9308      	str	r3, [sp, #32]
 800bfe2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfe4:	1c59      	adds	r1, r3, #1
 800bfe6:	911d      	str	r1, [sp, #116]	; 0x74
 800bfe8:	785b      	ldrb	r3, [r3, #1]
 800bfea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800bfee:	2e09      	cmp	r6, #9
 800bff0:	d937      	bls.n	800c062 <_strtod_l+0x34a>
 800bff2:	9e08      	ldr	r6, [sp, #32]
 800bff4:	1b89      	subs	r1, r1, r6
 800bff6:	2908      	cmp	r1, #8
 800bff8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bffc:	dc02      	bgt.n	800c004 <_strtod_l+0x2ec>
 800bffe:	4576      	cmp	r6, lr
 800c000:	bfa8      	it	ge
 800c002:	4676      	movge	r6, lr
 800c004:	f1bc 0f00 	cmp.w	ip, #0
 800c008:	d000      	beq.n	800c00c <_strtod_l+0x2f4>
 800c00a:	4276      	negs	r6, r6
 800c00c:	2d00      	cmp	r5, #0
 800c00e:	d14f      	bne.n	800c0b0 <_strtod_l+0x398>
 800c010:	9904      	ldr	r1, [sp, #16]
 800c012:	4301      	orrs	r1, r0
 800c014:	f47f aec2 	bne.w	800bd9c <_strtod_l+0x84>
 800c018:	2a00      	cmp	r2, #0
 800c01a:	f47f aedb 	bne.w	800bdd4 <_strtod_l+0xbc>
 800c01e:	2b69      	cmp	r3, #105	; 0x69
 800c020:	d027      	beq.n	800c072 <_strtod_l+0x35a>
 800c022:	dc24      	bgt.n	800c06e <_strtod_l+0x356>
 800c024:	2b49      	cmp	r3, #73	; 0x49
 800c026:	d024      	beq.n	800c072 <_strtod_l+0x35a>
 800c028:	2b4e      	cmp	r3, #78	; 0x4e
 800c02a:	f47f aed3 	bne.w	800bdd4 <_strtod_l+0xbc>
 800c02e:	499e      	ldr	r1, [pc, #632]	; (800c2a8 <_strtod_l+0x590>)
 800c030:	a81d      	add	r0, sp, #116	; 0x74
 800c032:	f001 fe41 	bl	800dcb8 <__match>
 800c036:	2800      	cmp	r0, #0
 800c038:	f43f aecc 	beq.w	800bdd4 <_strtod_l+0xbc>
 800c03c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	2b28      	cmp	r3, #40	; 0x28
 800c042:	d12d      	bne.n	800c0a0 <_strtod_l+0x388>
 800c044:	4999      	ldr	r1, [pc, #612]	; (800c2ac <_strtod_l+0x594>)
 800c046:	aa20      	add	r2, sp, #128	; 0x80
 800c048:	a81d      	add	r0, sp, #116	; 0x74
 800c04a:	f001 fe49 	bl	800dce0 <__hexnan>
 800c04e:	2805      	cmp	r0, #5
 800c050:	d126      	bne.n	800c0a0 <_strtod_l+0x388>
 800c052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c054:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800c058:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c05c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c060:	e69c      	b.n	800bd9c <_strtod_l+0x84>
 800c062:	210a      	movs	r1, #10
 800c064:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c068:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c06c:	e7b9      	b.n	800bfe2 <_strtod_l+0x2ca>
 800c06e:	2b6e      	cmp	r3, #110	; 0x6e
 800c070:	e7db      	b.n	800c02a <_strtod_l+0x312>
 800c072:	498f      	ldr	r1, [pc, #572]	; (800c2b0 <_strtod_l+0x598>)
 800c074:	a81d      	add	r0, sp, #116	; 0x74
 800c076:	f001 fe1f 	bl	800dcb8 <__match>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	f43f aeaa 	beq.w	800bdd4 <_strtod_l+0xbc>
 800c080:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c082:	498c      	ldr	r1, [pc, #560]	; (800c2b4 <_strtod_l+0x59c>)
 800c084:	3b01      	subs	r3, #1
 800c086:	a81d      	add	r0, sp, #116	; 0x74
 800c088:	931d      	str	r3, [sp, #116]	; 0x74
 800c08a:	f001 fe15 	bl	800dcb8 <__match>
 800c08e:	b910      	cbnz	r0, 800c096 <_strtod_l+0x37e>
 800c090:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c092:	3301      	adds	r3, #1
 800c094:	931d      	str	r3, [sp, #116]	; 0x74
 800c096:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800c2c4 <_strtod_l+0x5ac>
 800c09a:	f04f 0a00 	mov.w	sl, #0
 800c09e:	e67d      	b.n	800bd9c <_strtod_l+0x84>
 800c0a0:	4885      	ldr	r0, [pc, #532]	; (800c2b8 <_strtod_l+0x5a0>)
 800c0a2:	f002 fdb5 	bl	800ec10 <nan>
 800c0a6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c0aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c0ae:	e675      	b.n	800bd9c <_strtod_l+0x84>
 800c0b0:	9b07      	ldr	r3, [sp, #28]
 800c0b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0b4:	1af3      	subs	r3, r6, r3
 800c0b6:	2f00      	cmp	r7, #0
 800c0b8:	bf08      	it	eq
 800c0ba:	462f      	moveq	r7, r5
 800c0bc:	2d10      	cmp	r5, #16
 800c0be:	9308      	str	r3, [sp, #32]
 800c0c0:	46a8      	mov	r8, r5
 800c0c2:	bfa8      	it	ge
 800c0c4:	f04f 0810 	movge.w	r8, #16
 800c0c8:	f7f4 fa24 	bl	8000514 <__aeabi_ui2d>
 800c0cc:	2d09      	cmp	r5, #9
 800c0ce:	4682      	mov	sl, r0
 800c0d0:	468b      	mov	fp, r1
 800c0d2:	dd13      	ble.n	800c0fc <_strtod_l+0x3e4>
 800c0d4:	4b79      	ldr	r3, [pc, #484]	; (800c2bc <_strtod_l+0x5a4>)
 800c0d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c0da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c0de:	f7f4 fa93 	bl	8000608 <__aeabi_dmul>
 800c0e2:	4682      	mov	sl, r0
 800c0e4:	4648      	mov	r0, r9
 800c0e6:	468b      	mov	fp, r1
 800c0e8:	f7f4 fa14 	bl	8000514 <__aeabi_ui2d>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	4659      	mov	r1, fp
 800c0f4:	f7f4 f8d2 	bl	800029c <__adddf3>
 800c0f8:	4682      	mov	sl, r0
 800c0fa:	468b      	mov	fp, r1
 800c0fc:	2d0f      	cmp	r5, #15
 800c0fe:	dc38      	bgt.n	800c172 <_strtod_l+0x45a>
 800c100:	9b08      	ldr	r3, [sp, #32]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f43f ae4a 	beq.w	800bd9c <_strtod_l+0x84>
 800c108:	dd24      	ble.n	800c154 <_strtod_l+0x43c>
 800c10a:	2b16      	cmp	r3, #22
 800c10c:	dc0b      	bgt.n	800c126 <_strtod_l+0x40e>
 800c10e:	4d6b      	ldr	r5, [pc, #428]	; (800c2bc <_strtod_l+0x5a4>)
 800c110:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800c114:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c118:	4652      	mov	r2, sl
 800c11a:	465b      	mov	r3, fp
 800c11c:	f7f4 fa74 	bl	8000608 <__aeabi_dmul>
 800c120:	4682      	mov	sl, r0
 800c122:	468b      	mov	fp, r1
 800c124:	e63a      	b.n	800bd9c <_strtod_l+0x84>
 800c126:	9a08      	ldr	r2, [sp, #32]
 800c128:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c12c:	4293      	cmp	r3, r2
 800c12e:	db20      	blt.n	800c172 <_strtod_l+0x45a>
 800c130:	4c62      	ldr	r4, [pc, #392]	; (800c2bc <_strtod_l+0x5a4>)
 800c132:	f1c5 050f 	rsb	r5, r5, #15
 800c136:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c13a:	4652      	mov	r2, sl
 800c13c:	465b      	mov	r3, fp
 800c13e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c142:	f7f4 fa61 	bl	8000608 <__aeabi_dmul>
 800c146:	9b08      	ldr	r3, [sp, #32]
 800c148:	1b5d      	subs	r5, r3, r5
 800c14a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c14e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c152:	e7e3      	b.n	800c11c <_strtod_l+0x404>
 800c154:	9b08      	ldr	r3, [sp, #32]
 800c156:	3316      	adds	r3, #22
 800c158:	db0b      	blt.n	800c172 <_strtod_l+0x45a>
 800c15a:	9b07      	ldr	r3, [sp, #28]
 800c15c:	4a57      	ldr	r2, [pc, #348]	; (800c2bc <_strtod_l+0x5a4>)
 800c15e:	1b9e      	subs	r6, r3, r6
 800c160:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c164:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c168:	4650      	mov	r0, sl
 800c16a:	4659      	mov	r1, fp
 800c16c:	f7f4 fb76 	bl	800085c <__aeabi_ddiv>
 800c170:	e7d6      	b.n	800c120 <_strtod_l+0x408>
 800c172:	9b08      	ldr	r3, [sp, #32]
 800c174:	eba5 0808 	sub.w	r8, r5, r8
 800c178:	4498      	add	r8, r3
 800c17a:	f1b8 0f00 	cmp.w	r8, #0
 800c17e:	dd71      	ble.n	800c264 <_strtod_l+0x54c>
 800c180:	f018 030f 	ands.w	r3, r8, #15
 800c184:	d00a      	beq.n	800c19c <_strtod_l+0x484>
 800c186:	494d      	ldr	r1, [pc, #308]	; (800c2bc <_strtod_l+0x5a4>)
 800c188:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c18c:	4652      	mov	r2, sl
 800c18e:	465b      	mov	r3, fp
 800c190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c194:	f7f4 fa38 	bl	8000608 <__aeabi_dmul>
 800c198:	4682      	mov	sl, r0
 800c19a:	468b      	mov	fp, r1
 800c19c:	f038 080f 	bics.w	r8, r8, #15
 800c1a0:	d04d      	beq.n	800c23e <_strtod_l+0x526>
 800c1a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c1a6:	dd22      	ble.n	800c1ee <_strtod_l+0x4d6>
 800c1a8:	2500      	movs	r5, #0
 800c1aa:	462e      	mov	r6, r5
 800c1ac:	9509      	str	r5, [sp, #36]	; 0x24
 800c1ae:	9507      	str	r5, [sp, #28]
 800c1b0:	2322      	movs	r3, #34	; 0x22
 800c1b2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800c2c4 <_strtod_l+0x5ac>
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	f04f 0a00 	mov.w	sl, #0
 800c1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f43f adec 	beq.w	800bd9c <_strtod_l+0x84>
 800c1c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f001 fe92 	bl	800def0 <_Bfree>
 800c1cc:	9907      	ldr	r1, [sp, #28]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f001 fe8e 	bl	800def0 <_Bfree>
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f001 fe8a 	bl	800def0 <_Bfree>
 800c1dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f001 fe86 	bl	800def0 <_Bfree>
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f001 fe82 	bl	800def0 <_Bfree>
 800c1ec:	e5d6      	b.n	800bd9c <_strtod_l+0x84>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c1f4:	4650      	mov	r0, sl
 800c1f6:	4659      	mov	r1, fp
 800c1f8:	4699      	mov	r9, r3
 800c1fa:	f1b8 0f01 	cmp.w	r8, #1
 800c1fe:	dc21      	bgt.n	800c244 <_strtod_l+0x52c>
 800c200:	b10b      	cbz	r3, 800c206 <_strtod_l+0x4ee>
 800c202:	4682      	mov	sl, r0
 800c204:	468b      	mov	fp, r1
 800c206:	4b2e      	ldr	r3, [pc, #184]	; (800c2c0 <_strtod_l+0x5a8>)
 800c208:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c20c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c210:	4652      	mov	r2, sl
 800c212:	465b      	mov	r3, fp
 800c214:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c218:	f7f4 f9f6 	bl	8000608 <__aeabi_dmul>
 800c21c:	4b29      	ldr	r3, [pc, #164]	; (800c2c4 <_strtod_l+0x5ac>)
 800c21e:	460a      	mov	r2, r1
 800c220:	400b      	ands	r3, r1
 800c222:	4929      	ldr	r1, [pc, #164]	; (800c2c8 <_strtod_l+0x5b0>)
 800c224:	428b      	cmp	r3, r1
 800c226:	4682      	mov	sl, r0
 800c228:	d8be      	bhi.n	800c1a8 <_strtod_l+0x490>
 800c22a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c22e:	428b      	cmp	r3, r1
 800c230:	bf86      	itte	hi
 800c232:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c2cc <_strtod_l+0x5b4>
 800c236:	f04f 3aff 	movhi.w	sl, #4294967295
 800c23a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c23e:	2300      	movs	r3, #0
 800c240:	9304      	str	r3, [sp, #16]
 800c242:	e081      	b.n	800c348 <_strtod_l+0x630>
 800c244:	f018 0f01 	tst.w	r8, #1
 800c248:	d007      	beq.n	800c25a <_strtod_l+0x542>
 800c24a:	4b1d      	ldr	r3, [pc, #116]	; (800c2c0 <_strtod_l+0x5a8>)
 800c24c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f7f4 f9d8 	bl	8000608 <__aeabi_dmul>
 800c258:	2301      	movs	r3, #1
 800c25a:	f109 0901 	add.w	r9, r9, #1
 800c25e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c262:	e7ca      	b.n	800c1fa <_strtod_l+0x4e2>
 800c264:	d0eb      	beq.n	800c23e <_strtod_l+0x526>
 800c266:	f1c8 0800 	rsb	r8, r8, #0
 800c26a:	f018 020f 	ands.w	r2, r8, #15
 800c26e:	d00a      	beq.n	800c286 <_strtod_l+0x56e>
 800c270:	4b12      	ldr	r3, [pc, #72]	; (800c2bc <_strtod_l+0x5a4>)
 800c272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c276:	4650      	mov	r0, sl
 800c278:	4659      	mov	r1, fp
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 faed 	bl	800085c <__aeabi_ddiv>
 800c282:	4682      	mov	sl, r0
 800c284:	468b      	mov	fp, r1
 800c286:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c28a:	d0d8      	beq.n	800c23e <_strtod_l+0x526>
 800c28c:	f1b8 0f1f 	cmp.w	r8, #31
 800c290:	dd1e      	ble.n	800c2d0 <_strtod_l+0x5b8>
 800c292:	2500      	movs	r5, #0
 800c294:	462e      	mov	r6, r5
 800c296:	9509      	str	r5, [sp, #36]	; 0x24
 800c298:	9507      	str	r5, [sp, #28]
 800c29a:	2322      	movs	r3, #34	; 0x22
 800c29c:	f04f 0a00 	mov.w	sl, #0
 800c2a0:	f04f 0b00 	mov.w	fp, #0
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	e789      	b.n	800c1bc <_strtod_l+0x4a4>
 800c2a8:	08023c0d 	.word	0x08023c0d
 800c2ac:	08023c50 	.word	0x08023c50
 800c2b0:	08023c05 	.word	0x08023c05
 800c2b4:	08023d94 	.word	0x08023d94
 800c2b8:	08024050 	.word	0x08024050
 800c2bc:	08023f30 	.word	0x08023f30
 800c2c0:	08023f08 	.word	0x08023f08
 800c2c4:	7ff00000 	.word	0x7ff00000
 800c2c8:	7ca00000 	.word	0x7ca00000
 800c2cc:	7fefffff 	.word	0x7fefffff
 800c2d0:	f018 0310 	ands.w	r3, r8, #16
 800c2d4:	bf18      	it	ne
 800c2d6:	236a      	movne	r3, #106	; 0x6a
 800c2d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800c690 <_strtod_l+0x978>
 800c2dc:	9304      	str	r3, [sp, #16]
 800c2de:	4650      	mov	r0, sl
 800c2e0:	4659      	mov	r1, fp
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f018 0f01 	tst.w	r8, #1
 800c2e8:	d004      	beq.n	800c2f4 <_strtod_l+0x5dc>
 800c2ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c2ee:	f7f4 f98b 	bl	8000608 <__aeabi_dmul>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c2f8:	f109 0908 	add.w	r9, r9, #8
 800c2fc:	d1f2      	bne.n	800c2e4 <_strtod_l+0x5cc>
 800c2fe:	b10b      	cbz	r3, 800c304 <_strtod_l+0x5ec>
 800c300:	4682      	mov	sl, r0
 800c302:	468b      	mov	fp, r1
 800c304:	9b04      	ldr	r3, [sp, #16]
 800c306:	b1bb      	cbz	r3, 800c338 <_strtod_l+0x620>
 800c308:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c30c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c310:	2b00      	cmp	r3, #0
 800c312:	4659      	mov	r1, fp
 800c314:	dd10      	ble.n	800c338 <_strtod_l+0x620>
 800c316:	2b1f      	cmp	r3, #31
 800c318:	f340 8128 	ble.w	800c56c <_strtod_l+0x854>
 800c31c:	2b34      	cmp	r3, #52	; 0x34
 800c31e:	bfde      	ittt	le
 800c320:	3b20      	suble	r3, #32
 800c322:	f04f 32ff 	movle.w	r2, #4294967295
 800c326:	fa02 f303 	lslle.w	r3, r2, r3
 800c32a:	f04f 0a00 	mov.w	sl, #0
 800c32e:	bfcc      	ite	gt
 800c330:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c334:	ea03 0b01 	andle.w	fp, r3, r1
 800c338:	2200      	movs	r2, #0
 800c33a:	2300      	movs	r3, #0
 800c33c:	4650      	mov	r0, sl
 800c33e:	4659      	mov	r1, fp
 800c340:	f7f4 fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 800c344:	2800      	cmp	r0, #0
 800c346:	d1a4      	bne.n	800c292 <_strtod_l+0x57a>
 800c348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c34e:	462b      	mov	r3, r5
 800c350:	463a      	mov	r2, r7
 800c352:	4620      	mov	r0, r4
 800c354:	f001 fe38 	bl	800dfc8 <__s2b>
 800c358:	9009      	str	r0, [sp, #36]	; 0x24
 800c35a:	2800      	cmp	r0, #0
 800c35c:	f43f af24 	beq.w	800c1a8 <_strtod_l+0x490>
 800c360:	9b07      	ldr	r3, [sp, #28]
 800c362:	1b9e      	subs	r6, r3, r6
 800c364:	9b08      	ldr	r3, [sp, #32]
 800c366:	2b00      	cmp	r3, #0
 800c368:	bfb4      	ite	lt
 800c36a:	4633      	movlt	r3, r6
 800c36c:	2300      	movge	r3, #0
 800c36e:	9310      	str	r3, [sp, #64]	; 0x40
 800c370:	9b08      	ldr	r3, [sp, #32]
 800c372:	2500      	movs	r5, #0
 800c374:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c378:	9318      	str	r3, [sp, #96]	; 0x60
 800c37a:	462e      	mov	r6, r5
 800c37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37e:	4620      	mov	r0, r4
 800c380:	6859      	ldr	r1, [r3, #4]
 800c382:	f001 fd75 	bl	800de70 <_Balloc>
 800c386:	9007      	str	r0, [sp, #28]
 800c388:	2800      	cmp	r0, #0
 800c38a:	f43f af11 	beq.w	800c1b0 <_strtod_l+0x498>
 800c38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c390:	691a      	ldr	r2, [r3, #16]
 800c392:	3202      	adds	r2, #2
 800c394:	f103 010c 	add.w	r1, r3, #12
 800c398:	0092      	lsls	r2, r2, #2
 800c39a:	300c      	adds	r0, #12
 800c39c:	f001 fd5a 	bl	800de54 <memcpy>
 800c3a0:	ec4b ab10 	vmov	d0, sl, fp
 800c3a4:	aa20      	add	r2, sp, #128	; 0x80
 800c3a6:	a91f      	add	r1, sp, #124	; 0x7c
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c3ae:	f002 f947 	bl	800e640 <__d2b>
 800c3b2:	901e      	str	r0, [sp, #120]	; 0x78
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	f43f aefb 	beq.w	800c1b0 <_strtod_l+0x498>
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f001 fe9d 	bl	800e0fc <__i2b>
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	f43f aef3 	beq.w	800c1b0 <_strtod_l+0x498>
 800c3ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c3cc:	9904      	ldr	r1, [sp, #16]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	bfab      	itete	ge
 800c3d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800c3d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800c3d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800c3d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800c3dc:	bfac      	ite	ge
 800c3de:	eb03 0902 	addge.w	r9, r3, r2
 800c3e2:	1ad7      	sublt	r7, r2, r3
 800c3e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c3e6:	eba3 0801 	sub.w	r8, r3, r1
 800c3ea:	4490      	add	r8, r2
 800c3ec:	4ba3      	ldr	r3, [pc, #652]	; (800c67c <_strtod_l+0x964>)
 800c3ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3f2:	4598      	cmp	r8, r3
 800c3f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c3f8:	f280 80cc 	bge.w	800c594 <_strtod_l+0x87c>
 800c3fc:	eba3 0308 	sub.w	r3, r3, r8
 800c400:	2b1f      	cmp	r3, #31
 800c402:	eba2 0203 	sub.w	r2, r2, r3
 800c406:	f04f 0101 	mov.w	r1, #1
 800c40a:	f300 80b6 	bgt.w	800c57a <_strtod_l+0x862>
 800c40e:	fa01 f303 	lsl.w	r3, r1, r3
 800c412:	9311      	str	r3, [sp, #68]	; 0x44
 800c414:	2300      	movs	r3, #0
 800c416:	930c      	str	r3, [sp, #48]	; 0x30
 800c418:	eb09 0802 	add.w	r8, r9, r2
 800c41c:	9b04      	ldr	r3, [sp, #16]
 800c41e:	45c1      	cmp	r9, r8
 800c420:	4417      	add	r7, r2
 800c422:	441f      	add	r7, r3
 800c424:	464b      	mov	r3, r9
 800c426:	bfa8      	it	ge
 800c428:	4643      	movge	r3, r8
 800c42a:	42bb      	cmp	r3, r7
 800c42c:	bfa8      	it	ge
 800c42e:	463b      	movge	r3, r7
 800c430:	2b00      	cmp	r3, #0
 800c432:	bfc2      	ittt	gt
 800c434:	eba8 0803 	subgt.w	r8, r8, r3
 800c438:	1aff      	subgt	r7, r7, r3
 800c43a:	eba9 0903 	subgt.w	r9, r9, r3
 800c43e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c440:	2b00      	cmp	r3, #0
 800c442:	dd17      	ble.n	800c474 <_strtod_l+0x75c>
 800c444:	4631      	mov	r1, r6
 800c446:	461a      	mov	r2, r3
 800c448:	4620      	mov	r0, r4
 800c44a:	f001 ff13 	bl	800e274 <__pow5mult>
 800c44e:	4606      	mov	r6, r0
 800c450:	2800      	cmp	r0, #0
 800c452:	f43f aead 	beq.w	800c1b0 <_strtod_l+0x498>
 800c456:	4601      	mov	r1, r0
 800c458:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c45a:	4620      	mov	r0, r4
 800c45c:	f001 fe64 	bl	800e128 <__multiply>
 800c460:	900f      	str	r0, [sp, #60]	; 0x3c
 800c462:	2800      	cmp	r0, #0
 800c464:	f43f aea4 	beq.w	800c1b0 <_strtod_l+0x498>
 800c468:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c46a:	4620      	mov	r0, r4
 800c46c:	f001 fd40 	bl	800def0 <_Bfree>
 800c470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c472:	931e      	str	r3, [sp, #120]	; 0x78
 800c474:	f1b8 0f00 	cmp.w	r8, #0
 800c478:	f300 8091 	bgt.w	800c59e <_strtod_l+0x886>
 800c47c:	9b08      	ldr	r3, [sp, #32]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	dd08      	ble.n	800c494 <_strtod_l+0x77c>
 800c482:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c484:	9907      	ldr	r1, [sp, #28]
 800c486:	4620      	mov	r0, r4
 800c488:	f001 fef4 	bl	800e274 <__pow5mult>
 800c48c:	9007      	str	r0, [sp, #28]
 800c48e:	2800      	cmp	r0, #0
 800c490:	f43f ae8e 	beq.w	800c1b0 <_strtod_l+0x498>
 800c494:	2f00      	cmp	r7, #0
 800c496:	dd08      	ble.n	800c4aa <_strtod_l+0x792>
 800c498:	9907      	ldr	r1, [sp, #28]
 800c49a:	463a      	mov	r2, r7
 800c49c:	4620      	mov	r0, r4
 800c49e:	f001 ff43 	bl	800e328 <__lshift>
 800c4a2:	9007      	str	r0, [sp, #28]
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	f43f ae83 	beq.w	800c1b0 <_strtod_l+0x498>
 800c4aa:	f1b9 0f00 	cmp.w	r9, #0
 800c4ae:	dd08      	ble.n	800c4c2 <_strtod_l+0x7aa>
 800c4b0:	4631      	mov	r1, r6
 800c4b2:	464a      	mov	r2, r9
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f001 ff37 	bl	800e328 <__lshift>
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	f43f ae77 	beq.w	800c1b0 <_strtod_l+0x498>
 800c4c2:	9a07      	ldr	r2, [sp, #28]
 800c4c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f001 ffb6 	bl	800e438 <__mdiff>
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	f43f ae6e 	beq.w	800c1b0 <_strtod_l+0x498>
 800c4d4:	68c3      	ldr	r3, [r0, #12]
 800c4d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4d8:	2300      	movs	r3, #0
 800c4da:	60c3      	str	r3, [r0, #12]
 800c4dc:	4631      	mov	r1, r6
 800c4de:	f001 ff8f 	bl	800e400 <__mcmp>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	da65      	bge.n	800c5b2 <_strtod_l+0x89a>
 800c4e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4e8:	ea53 030a 	orrs.w	r3, r3, sl
 800c4ec:	f040 8087 	bne.w	800c5fe <_strtod_l+0x8e6>
 800c4f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f040 8082 	bne.w	800c5fe <_strtod_l+0x8e6>
 800c4fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4fe:	0d1b      	lsrs	r3, r3, #20
 800c500:	051b      	lsls	r3, r3, #20
 800c502:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c506:	d97a      	bls.n	800c5fe <_strtod_l+0x8e6>
 800c508:	696b      	ldr	r3, [r5, #20]
 800c50a:	b913      	cbnz	r3, 800c512 <_strtod_l+0x7fa>
 800c50c:	692b      	ldr	r3, [r5, #16]
 800c50e:	2b01      	cmp	r3, #1
 800c510:	dd75      	ble.n	800c5fe <_strtod_l+0x8e6>
 800c512:	4629      	mov	r1, r5
 800c514:	2201      	movs	r2, #1
 800c516:	4620      	mov	r0, r4
 800c518:	f001 ff06 	bl	800e328 <__lshift>
 800c51c:	4631      	mov	r1, r6
 800c51e:	4605      	mov	r5, r0
 800c520:	f001 ff6e 	bl	800e400 <__mcmp>
 800c524:	2800      	cmp	r0, #0
 800c526:	dd6a      	ble.n	800c5fe <_strtod_l+0x8e6>
 800c528:	9904      	ldr	r1, [sp, #16]
 800c52a:	4a55      	ldr	r2, [pc, #340]	; (800c680 <_strtod_l+0x968>)
 800c52c:	465b      	mov	r3, fp
 800c52e:	2900      	cmp	r1, #0
 800c530:	f000 8085 	beq.w	800c63e <_strtod_l+0x926>
 800c534:	ea02 010b 	and.w	r1, r2, fp
 800c538:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c53c:	dc7f      	bgt.n	800c63e <_strtod_l+0x926>
 800c53e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c542:	f77f aeaa 	ble.w	800c29a <_strtod_l+0x582>
 800c546:	4a4f      	ldr	r2, [pc, #316]	; (800c684 <_strtod_l+0x96c>)
 800c548:	2300      	movs	r3, #0
 800c54a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800c54e:	4650      	mov	r0, sl
 800c550:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c554:	4659      	mov	r1, fp
 800c556:	f7f4 f857 	bl	8000608 <__aeabi_dmul>
 800c55a:	460b      	mov	r3, r1
 800c55c:	4303      	orrs	r3, r0
 800c55e:	bf08      	it	eq
 800c560:	2322      	moveq	r3, #34	; 0x22
 800c562:	4682      	mov	sl, r0
 800c564:	468b      	mov	fp, r1
 800c566:	bf08      	it	eq
 800c568:	6023      	streq	r3, [r4, #0]
 800c56a:	e62b      	b.n	800c1c4 <_strtod_l+0x4ac>
 800c56c:	f04f 32ff 	mov.w	r2, #4294967295
 800c570:	fa02 f303 	lsl.w	r3, r2, r3
 800c574:	ea03 0a0a 	and.w	sl, r3, sl
 800c578:	e6de      	b.n	800c338 <_strtod_l+0x620>
 800c57a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c57e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c582:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c586:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c58a:	fa01 f308 	lsl.w	r3, r1, r8
 800c58e:	930c      	str	r3, [sp, #48]	; 0x30
 800c590:	9111      	str	r1, [sp, #68]	; 0x44
 800c592:	e741      	b.n	800c418 <_strtod_l+0x700>
 800c594:	2300      	movs	r3, #0
 800c596:	930c      	str	r3, [sp, #48]	; 0x30
 800c598:	2301      	movs	r3, #1
 800c59a:	9311      	str	r3, [sp, #68]	; 0x44
 800c59c:	e73c      	b.n	800c418 <_strtod_l+0x700>
 800c59e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f001 fec0 	bl	800e328 <__lshift>
 800c5a8:	901e      	str	r0, [sp, #120]	; 0x78
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f47f af66 	bne.w	800c47c <_strtod_l+0x764>
 800c5b0:	e5fe      	b.n	800c1b0 <_strtod_l+0x498>
 800c5b2:	465f      	mov	r7, fp
 800c5b4:	d16e      	bne.n	800c694 <_strtod_l+0x97c>
 800c5b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5bc:	b342      	cbz	r2, 800c610 <_strtod_l+0x8f8>
 800c5be:	4a32      	ldr	r2, [pc, #200]	; (800c688 <_strtod_l+0x970>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d128      	bne.n	800c616 <_strtod_l+0x8fe>
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	4650      	mov	r0, sl
 800c5c8:	b1eb      	cbz	r3, 800c606 <_strtod_l+0x8ee>
 800c5ca:	4a2d      	ldr	r2, [pc, #180]	; (800c680 <_strtod_l+0x968>)
 800c5cc:	403a      	ands	r2, r7
 800c5ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c5d2:	f04f 31ff 	mov.w	r1, #4294967295
 800c5d6:	d819      	bhi.n	800c60c <_strtod_l+0x8f4>
 800c5d8:	0d12      	lsrs	r2, r2, #20
 800c5da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c5de:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e2:	4298      	cmp	r0, r3
 800c5e4:	d117      	bne.n	800c616 <_strtod_l+0x8fe>
 800c5e6:	4b29      	ldr	r3, [pc, #164]	; (800c68c <_strtod_l+0x974>)
 800c5e8:	429f      	cmp	r7, r3
 800c5ea:	d102      	bne.n	800c5f2 <_strtod_l+0x8da>
 800c5ec:	3001      	adds	r0, #1
 800c5ee:	f43f addf 	beq.w	800c1b0 <_strtod_l+0x498>
 800c5f2:	4b23      	ldr	r3, [pc, #140]	; (800c680 <_strtod_l+0x968>)
 800c5f4:	403b      	ands	r3, r7
 800c5f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c5fa:	f04f 0a00 	mov.w	sl, #0
 800c5fe:	9b04      	ldr	r3, [sp, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1a0      	bne.n	800c546 <_strtod_l+0x82e>
 800c604:	e5de      	b.n	800c1c4 <_strtod_l+0x4ac>
 800c606:	f04f 33ff 	mov.w	r3, #4294967295
 800c60a:	e7ea      	b.n	800c5e2 <_strtod_l+0x8ca>
 800c60c:	460b      	mov	r3, r1
 800c60e:	e7e8      	b.n	800c5e2 <_strtod_l+0x8ca>
 800c610:	ea53 030a 	orrs.w	r3, r3, sl
 800c614:	d088      	beq.n	800c528 <_strtod_l+0x810>
 800c616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c618:	b1db      	cbz	r3, 800c652 <_strtod_l+0x93a>
 800c61a:	423b      	tst	r3, r7
 800c61c:	d0ef      	beq.n	800c5fe <_strtod_l+0x8e6>
 800c61e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c620:	9a04      	ldr	r2, [sp, #16]
 800c622:	4650      	mov	r0, sl
 800c624:	4659      	mov	r1, fp
 800c626:	b1c3      	cbz	r3, 800c65a <_strtod_l+0x942>
 800c628:	f7ff fb58 	bl	800bcdc <sulp>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c634:	f7f3 fe32 	bl	800029c <__adddf3>
 800c638:	4682      	mov	sl, r0
 800c63a:	468b      	mov	fp, r1
 800c63c:	e7df      	b.n	800c5fe <_strtod_l+0x8e6>
 800c63e:	4013      	ands	r3, r2
 800c640:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c644:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c648:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c64c:	f04f 3aff 	mov.w	sl, #4294967295
 800c650:	e7d5      	b.n	800c5fe <_strtod_l+0x8e6>
 800c652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c654:	ea13 0f0a 	tst.w	r3, sl
 800c658:	e7e0      	b.n	800c61c <_strtod_l+0x904>
 800c65a:	f7ff fb3f 	bl	800bcdc <sulp>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c666:	f7f3 fe17 	bl	8000298 <__aeabi_dsub>
 800c66a:	2200      	movs	r2, #0
 800c66c:	2300      	movs	r3, #0
 800c66e:	4682      	mov	sl, r0
 800c670:	468b      	mov	fp, r1
 800c672:	f7f4 fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 800c676:	2800      	cmp	r0, #0
 800c678:	d0c1      	beq.n	800c5fe <_strtod_l+0x8e6>
 800c67a:	e60e      	b.n	800c29a <_strtod_l+0x582>
 800c67c:	fffffc02 	.word	0xfffffc02
 800c680:	7ff00000 	.word	0x7ff00000
 800c684:	39500000 	.word	0x39500000
 800c688:	000fffff 	.word	0x000fffff
 800c68c:	7fefffff 	.word	0x7fefffff
 800c690:	08023c68 	.word	0x08023c68
 800c694:	4631      	mov	r1, r6
 800c696:	4628      	mov	r0, r5
 800c698:	f002 f82e 	bl	800e6f8 <__ratio>
 800c69c:	ec59 8b10 	vmov	r8, r9, d0
 800c6a0:	ee10 0a10 	vmov	r0, s0
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6aa:	4649      	mov	r1, r9
 800c6ac:	f7f4 fa28 	bl	8000b00 <__aeabi_dcmple>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d07c      	beq.n	800c7ae <_strtod_l+0xa96>
 800c6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d04c      	beq.n	800c754 <_strtod_l+0xa3c>
 800c6ba:	4b95      	ldr	r3, [pc, #596]	; (800c910 <_strtod_l+0xbf8>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c6c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c910 <_strtod_l+0xbf8>
 800c6c6:	f04f 0800 	mov.w	r8, #0
 800c6ca:	4b92      	ldr	r3, [pc, #584]	; (800c914 <_strtod_l+0xbfc>)
 800c6cc:	403b      	ands	r3, r7
 800c6ce:	9311      	str	r3, [sp, #68]	; 0x44
 800c6d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c6d2:	4b91      	ldr	r3, [pc, #580]	; (800c918 <_strtod_l+0xc00>)
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	f040 80b2 	bne.w	800c83e <_strtod_l+0xb26>
 800c6da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c6e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c6e6:	ec4b ab10 	vmov	d0, sl, fp
 800c6ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c6ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c6f2:	f001 ff29 	bl	800e548 <__ulp>
 800c6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c6fa:	ec53 2b10 	vmov	r2, r3, d0
 800c6fe:	f7f3 ff83 	bl	8000608 <__aeabi_dmul>
 800c702:	4652      	mov	r2, sl
 800c704:	465b      	mov	r3, fp
 800c706:	f7f3 fdc9 	bl	800029c <__adddf3>
 800c70a:	460b      	mov	r3, r1
 800c70c:	4981      	ldr	r1, [pc, #516]	; (800c914 <_strtod_l+0xbfc>)
 800c70e:	4a83      	ldr	r2, [pc, #524]	; (800c91c <_strtod_l+0xc04>)
 800c710:	4019      	ands	r1, r3
 800c712:	4291      	cmp	r1, r2
 800c714:	4682      	mov	sl, r0
 800c716:	d95e      	bls.n	800c7d6 <_strtod_l+0xabe>
 800c718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c71a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c71e:	4293      	cmp	r3, r2
 800c720:	d103      	bne.n	800c72a <_strtod_l+0xa12>
 800c722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c724:	3301      	adds	r3, #1
 800c726:	f43f ad43 	beq.w	800c1b0 <_strtod_l+0x498>
 800c72a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c928 <_strtod_l+0xc10>
 800c72e:	f04f 3aff 	mov.w	sl, #4294967295
 800c732:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c734:	4620      	mov	r0, r4
 800c736:	f001 fbdb 	bl	800def0 <_Bfree>
 800c73a:	9907      	ldr	r1, [sp, #28]
 800c73c:	4620      	mov	r0, r4
 800c73e:	f001 fbd7 	bl	800def0 <_Bfree>
 800c742:	4631      	mov	r1, r6
 800c744:	4620      	mov	r0, r4
 800c746:	f001 fbd3 	bl	800def0 <_Bfree>
 800c74a:	4629      	mov	r1, r5
 800c74c:	4620      	mov	r0, r4
 800c74e:	f001 fbcf 	bl	800def0 <_Bfree>
 800c752:	e613      	b.n	800c37c <_strtod_l+0x664>
 800c754:	f1ba 0f00 	cmp.w	sl, #0
 800c758:	d11b      	bne.n	800c792 <_strtod_l+0xa7a>
 800c75a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c75e:	b9f3      	cbnz	r3, 800c79e <_strtod_l+0xa86>
 800c760:	4b6b      	ldr	r3, [pc, #428]	; (800c910 <_strtod_l+0xbf8>)
 800c762:	2200      	movs	r2, #0
 800c764:	4640      	mov	r0, r8
 800c766:	4649      	mov	r1, r9
 800c768:	f7f4 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800c76c:	b9d0      	cbnz	r0, 800c7a4 <_strtod_l+0xa8c>
 800c76e:	4640      	mov	r0, r8
 800c770:	4649      	mov	r1, r9
 800c772:	4b6b      	ldr	r3, [pc, #428]	; (800c920 <_strtod_l+0xc08>)
 800c774:	2200      	movs	r2, #0
 800c776:	f7f3 ff47 	bl	8000608 <__aeabi_dmul>
 800c77a:	4680      	mov	r8, r0
 800c77c:	4689      	mov	r9, r1
 800c77e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c782:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c786:	931b      	str	r3, [sp, #108]	; 0x6c
 800c788:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c78c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c790:	e79b      	b.n	800c6ca <_strtod_l+0x9b2>
 800c792:	f1ba 0f01 	cmp.w	sl, #1
 800c796:	d102      	bne.n	800c79e <_strtod_l+0xa86>
 800c798:	2f00      	cmp	r7, #0
 800c79a:	f43f ad7e 	beq.w	800c29a <_strtod_l+0x582>
 800c79e:	4b61      	ldr	r3, [pc, #388]	; (800c924 <_strtod_l+0xc0c>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	e78c      	b.n	800c6be <_strtod_l+0x9a6>
 800c7a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c920 <_strtod_l+0xc08>
 800c7a8:	f04f 0800 	mov.w	r8, #0
 800c7ac:	e7e7      	b.n	800c77e <_strtod_l+0xa66>
 800c7ae:	4b5c      	ldr	r3, [pc, #368]	; (800c920 <_strtod_l+0xc08>)
 800c7b0:	4640      	mov	r0, r8
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	f7f3 ff27 	bl	8000608 <__aeabi_dmul>
 800c7ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7bc:	4680      	mov	r8, r0
 800c7be:	4689      	mov	r9, r1
 800c7c0:	b933      	cbnz	r3, 800c7d0 <_strtod_l+0xab8>
 800c7c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7c6:	9012      	str	r0, [sp, #72]	; 0x48
 800c7c8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c7ce:	e7dd      	b.n	800c78c <_strtod_l+0xa74>
 800c7d0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c7d4:	e7f9      	b.n	800c7ca <_strtod_l+0xab2>
 800c7d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c7da:	9b04      	ldr	r3, [sp, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1a8      	bne.n	800c732 <_strtod_l+0xa1a>
 800c7e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c7e6:	0d1b      	lsrs	r3, r3, #20
 800c7e8:	051b      	lsls	r3, r3, #20
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d1a1      	bne.n	800c732 <_strtod_l+0xa1a>
 800c7ee:	4640      	mov	r0, r8
 800c7f0:	4649      	mov	r1, r9
 800c7f2:	f7f4 fa69 	bl	8000cc8 <__aeabi_d2lz>
 800c7f6:	f7f3 fed9 	bl	80005ac <__aeabi_l2d>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	4640      	mov	r0, r8
 800c800:	4649      	mov	r1, r9
 800c802:	f7f3 fd49 	bl	8000298 <__aeabi_dsub>
 800c806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c80c:	ea43 030a 	orr.w	r3, r3, sl
 800c810:	4313      	orrs	r3, r2
 800c812:	4680      	mov	r8, r0
 800c814:	4689      	mov	r9, r1
 800c816:	d053      	beq.n	800c8c0 <_strtod_l+0xba8>
 800c818:	a335      	add	r3, pc, #212	; (adr r3, 800c8f0 <_strtod_l+0xbd8>)
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	f7f4 f965 	bl	8000aec <__aeabi_dcmplt>
 800c822:	2800      	cmp	r0, #0
 800c824:	f47f acce 	bne.w	800c1c4 <_strtod_l+0x4ac>
 800c828:	a333      	add	r3, pc, #204	; (adr r3, 800c8f8 <_strtod_l+0xbe0>)
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	4640      	mov	r0, r8
 800c830:	4649      	mov	r1, r9
 800c832:	f7f4 f979 	bl	8000b28 <__aeabi_dcmpgt>
 800c836:	2800      	cmp	r0, #0
 800c838:	f43f af7b 	beq.w	800c732 <_strtod_l+0xa1a>
 800c83c:	e4c2      	b.n	800c1c4 <_strtod_l+0x4ac>
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	b333      	cbz	r3, 800c890 <_strtod_l+0xb78>
 800c842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c844:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c848:	d822      	bhi.n	800c890 <_strtod_l+0xb78>
 800c84a:	a32d      	add	r3, pc, #180	; (adr r3, 800c900 <_strtod_l+0xbe8>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	4640      	mov	r0, r8
 800c852:	4649      	mov	r1, r9
 800c854:	f7f4 f954 	bl	8000b00 <__aeabi_dcmple>
 800c858:	b1a0      	cbz	r0, 800c884 <_strtod_l+0xb6c>
 800c85a:	4649      	mov	r1, r9
 800c85c:	4640      	mov	r0, r8
 800c85e:	f7f4 f9ab 	bl	8000bb8 <__aeabi_d2uiz>
 800c862:	2801      	cmp	r0, #1
 800c864:	bf38      	it	cc
 800c866:	2001      	movcc	r0, #1
 800c868:	f7f3 fe54 	bl	8000514 <__aeabi_ui2d>
 800c86c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c86e:	4680      	mov	r8, r0
 800c870:	4689      	mov	r9, r1
 800c872:	bb13      	cbnz	r3, 800c8ba <_strtod_l+0xba2>
 800c874:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c878:	9014      	str	r0, [sp, #80]	; 0x50
 800c87a:	9315      	str	r3, [sp, #84]	; 0x54
 800c87c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c880:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c886:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c888:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c88c:	1a9b      	subs	r3, r3, r2
 800c88e:	930d      	str	r3, [sp, #52]	; 0x34
 800c890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c894:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c898:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c89c:	f001 fe54 	bl	800e548 <__ulp>
 800c8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8a4:	ec53 2b10 	vmov	r2, r3, d0
 800c8a8:	f7f3 feae 	bl	8000608 <__aeabi_dmul>
 800c8ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c8b0:	f7f3 fcf4 	bl	800029c <__adddf3>
 800c8b4:	4682      	mov	sl, r0
 800c8b6:	468b      	mov	fp, r1
 800c8b8:	e78f      	b.n	800c7da <_strtod_l+0xac2>
 800c8ba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800c8be:	e7dd      	b.n	800c87c <_strtod_l+0xb64>
 800c8c0:	a311      	add	r3, pc, #68	; (adr r3, 800c908 <_strtod_l+0xbf0>)
 800c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c6:	f7f4 f911 	bl	8000aec <__aeabi_dcmplt>
 800c8ca:	e7b4      	b.n	800c836 <_strtod_l+0xb1e>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	930e      	str	r3, [sp, #56]	; 0x38
 800c8d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c8d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c8d4:	6013      	str	r3, [r2, #0]
 800c8d6:	f7ff ba65 	b.w	800bda4 <_strtod_l+0x8c>
 800c8da:	2b65      	cmp	r3, #101	; 0x65
 800c8dc:	f43f ab5d 	beq.w	800bf9a <_strtod_l+0x282>
 800c8e0:	2b45      	cmp	r3, #69	; 0x45
 800c8e2:	f43f ab5a 	beq.w	800bf9a <_strtod_l+0x282>
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f7ff bb92 	b.w	800c010 <_strtod_l+0x2f8>
 800c8ec:	f3af 8000 	nop.w
 800c8f0:	94a03595 	.word	0x94a03595
 800c8f4:	3fdfffff 	.word	0x3fdfffff
 800c8f8:	35afe535 	.word	0x35afe535
 800c8fc:	3fe00000 	.word	0x3fe00000
 800c900:	ffc00000 	.word	0xffc00000
 800c904:	41dfffff 	.word	0x41dfffff
 800c908:	94a03595 	.word	0x94a03595
 800c90c:	3fcfffff 	.word	0x3fcfffff
 800c910:	3ff00000 	.word	0x3ff00000
 800c914:	7ff00000 	.word	0x7ff00000
 800c918:	7fe00000 	.word	0x7fe00000
 800c91c:	7c9fffff 	.word	0x7c9fffff
 800c920:	3fe00000 	.word	0x3fe00000
 800c924:	bff00000 	.word	0xbff00000
 800c928:	7fefffff 	.word	0x7fefffff

0800c92c <_strtod_r>:
 800c92c:	4b01      	ldr	r3, [pc, #4]	; (800c934 <_strtod_r+0x8>)
 800c92e:	f7ff b9f3 	b.w	800bd18 <_strtod_l>
 800c932:	bf00      	nop
 800c934:	20002a60 	.word	0x20002a60

0800c938 <_strtol_l.isra.0>:
 800c938:	2b01      	cmp	r3, #1
 800c93a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c93e:	d001      	beq.n	800c944 <_strtol_l.isra.0+0xc>
 800c940:	2b24      	cmp	r3, #36	; 0x24
 800c942:	d906      	bls.n	800c952 <_strtol_l.isra.0+0x1a>
 800c944:	f7fe faf8 	bl	800af38 <__errno>
 800c948:	2316      	movs	r3, #22
 800c94a:	6003      	str	r3, [r0, #0]
 800c94c:	2000      	movs	r0, #0
 800c94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c952:	4f3a      	ldr	r7, [pc, #232]	; (800ca3c <_strtol_l.isra.0+0x104>)
 800c954:	468e      	mov	lr, r1
 800c956:	4676      	mov	r6, lr
 800c958:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c95c:	5de5      	ldrb	r5, [r4, r7]
 800c95e:	f015 0508 	ands.w	r5, r5, #8
 800c962:	d1f8      	bne.n	800c956 <_strtol_l.isra.0+0x1e>
 800c964:	2c2d      	cmp	r4, #45	; 0x2d
 800c966:	d134      	bne.n	800c9d2 <_strtol_l.isra.0+0x9a>
 800c968:	f89e 4000 	ldrb.w	r4, [lr]
 800c96c:	f04f 0801 	mov.w	r8, #1
 800c970:	f106 0e02 	add.w	lr, r6, #2
 800c974:	2b00      	cmp	r3, #0
 800c976:	d05c      	beq.n	800ca32 <_strtol_l.isra.0+0xfa>
 800c978:	2b10      	cmp	r3, #16
 800c97a:	d10c      	bne.n	800c996 <_strtol_l.isra.0+0x5e>
 800c97c:	2c30      	cmp	r4, #48	; 0x30
 800c97e:	d10a      	bne.n	800c996 <_strtol_l.isra.0+0x5e>
 800c980:	f89e 4000 	ldrb.w	r4, [lr]
 800c984:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c988:	2c58      	cmp	r4, #88	; 0x58
 800c98a:	d14d      	bne.n	800ca28 <_strtol_l.isra.0+0xf0>
 800c98c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c990:	2310      	movs	r3, #16
 800c992:	f10e 0e02 	add.w	lr, lr, #2
 800c996:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c99a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c99e:	2600      	movs	r6, #0
 800c9a0:	fbbc f9f3 	udiv	r9, ip, r3
 800c9a4:	4635      	mov	r5, r6
 800c9a6:	fb03 ca19 	mls	sl, r3, r9, ip
 800c9aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c9ae:	2f09      	cmp	r7, #9
 800c9b0:	d818      	bhi.n	800c9e4 <_strtol_l.isra.0+0xac>
 800c9b2:	463c      	mov	r4, r7
 800c9b4:	42a3      	cmp	r3, r4
 800c9b6:	dd24      	ble.n	800ca02 <_strtol_l.isra.0+0xca>
 800c9b8:	2e00      	cmp	r6, #0
 800c9ba:	db1f      	blt.n	800c9fc <_strtol_l.isra.0+0xc4>
 800c9bc:	45a9      	cmp	r9, r5
 800c9be:	d31d      	bcc.n	800c9fc <_strtol_l.isra.0+0xc4>
 800c9c0:	d101      	bne.n	800c9c6 <_strtol_l.isra.0+0x8e>
 800c9c2:	45a2      	cmp	sl, r4
 800c9c4:	db1a      	blt.n	800c9fc <_strtol_l.isra.0+0xc4>
 800c9c6:	fb05 4503 	mla	r5, r5, r3, r4
 800c9ca:	2601      	movs	r6, #1
 800c9cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c9d0:	e7eb      	b.n	800c9aa <_strtol_l.isra.0+0x72>
 800c9d2:	2c2b      	cmp	r4, #43	; 0x2b
 800c9d4:	bf08      	it	eq
 800c9d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c9da:	46a8      	mov	r8, r5
 800c9dc:	bf08      	it	eq
 800c9de:	f106 0e02 	addeq.w	lr, r6, #2
 800c9e2:	e7c7      	b.n	800c974 <_strtol_l.isra.0+0x3c>
 800c9e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c9e8:	2f19      	cmp	r7, #25
 800c9ea:	d801      	bhi.n	800c9f0 <_strtol_l.isra.0+0xb8>
 800c9ec:	3c37      	subs	r4, #55	; 0x37
 800c9ee:	e7e1      	b.n	800c9b4 <_strtol_l.isra.0+0x7c>
 800c9f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c9f4:	2f19      	cmp	r7, #25
 800c9f6:	d804      	bhi.n	800ca02 <_strtol_l.isra.0+0xca>
 800c9f8:	3c57      	subs	r4, #87	; 0x57
 800c9fa:	e7db      	b.n	800c9b4 <_strtol_l.isra.0+0x7c>
 800c9fc:	f04f 36ff 	mov.w	r6, #4294967295
 800ca00:	e7e4      	b.n	800c9cc <_strtol_l.isra.0+0x94>
 800ca02:	2e00      	cmp	r6, #0
 800ca04:	da05      	bge.n	800ca12 <_strtol_l.isra.0+0xda>
 800ca06:	2322      	movs	r3, #34	; 0x22
 800ca08:	6003      	str	r3, [r0, #0]
 800ca0a:	4665      	mov	r5, ip
 800ca0c:	b942      	cbnz	r2, 800ca20 <_strtol_l.isra.0+0xe8>
 800ca0e:	4628      	mov	r0, r5
 800ca10:	e79d      	b.n	800c94e <_strtol_l.isra.0+0x16>
 800ca12:	f1b8 0f00 	cmp.w	r8, #0
 800ca16:	d000      	beq.n	800ca1a <_strtol_l.isra.0+0xe2>
 800ca18:	426d      	negs	r5, r5
 800ca1a:	2a00      	cmp	r2, #0
 800ca1c:	d0f7      	beq.n	800ca0e <_strtol_l.isra.0+0xd6>
 800ca1e:	b10e      	cbz	r6, 800ca24 <_strtol_l.isra.0+0xec>
 800ca20:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ca24:	6011      	str	r1, [r2, #0]
 800ca26:	e7f2      	b.n	800ca0e <_strtol_l.isra.0+0xd6>
 800ca28:	2430      	movs	r4, #48	; 0x30
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1b3      	bne.n	800c996 <_strtol_l.isra.0+0x5e>
 800ca2e:	2308      	movs	r3, #8
 800ca30:	e7b1      	b.n	800c996 <_strtol_l.isra.0+0x5e>
 800ca32:	2c30      	cmp	r4, #48	; 0x30
 800ca34:	d0a4      	beq.n	800c980 <_strtol_l.isra.0+0x48>
 800ca36:	230a      	movs	r3, #10
 800ca38:	e7ad      	b.n	800c996 <_strtol_l.isra.0+0x5e>
 800ca3a:	bf00      	nop
 800ca3c:	08023c91 	.word	0x08023c91

0800ca40 <_strtol_r>:
 800ca40:	f7ff bf7a 	b.w	800c938 <_strtol_l.isra.0>

0800ca44 <quorem>:
 800ca44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca48:	6903      	ldr	r3, [r0, #16]
 800ca4a:	690c      	ldr	r4, [r1, #16]
 800ca4c:	42a3      	cmp	r3, r4
 800ca4e:	4607      	mov	r7, r0
 800ca50:	f2c0 8081 	blt.w	800cb56 <quorem+0x112>
 800ca54:	3c01      	subs	r4, #1
 800ca56:	f101 0814 	add.w	r8, r1, #20
 800ca5a:	f100 0514 	add.w	r5, r0, #20
 800ca5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca62:	9301      	str	r3, [sp, #4]
 800ca64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca78:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca7c:	d331      	bcc.n	800cae2 <quorem+0x9e>
 800ca7e:	f04f 0e00 	mov.w	lr, #0
 800ca82:	4640      	mov	r0, r8
 800ca84:	46ac      	mov	ip, r5
 800ca86:	46f2      	mov	sl, lr
 800ca88:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca8c:	b293      	uxth	r3, r2
 800ca8e:	fb06 e303 	mla	r3, r6, r3, lr
 800ca92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	ebaa 0303 	sub.w	r3, sl, r3
 800ca9c:	0c12      	lsrs	r2, r2, #16
 800ca9e:	f8dc a000 	ldr.w	sl, [ip]
 800caa2:	fb06 e202 	mla	r2, r6, r2, lr
 800caa6:	fa13 f38a 	uxtah	r3, r3, sl
 800caaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800caae:	fa1f fa82 	uxth.w	sl, r2
 800cab2:	f8dc 2000 	ldr.w	r2, [ip]
 800cab6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800caba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cac4:	4581      	cmp	r9, r0
 800cac6:	f84c 3b04 	str.w	r3, [ip], #4
 800caca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cace:	d2db      	bcs.n	800ca88 <quorem+0x44>
 800cad0:	f855 300b 	ldr.w	r3, [r5, fp]
 800cad4:	b92b      	cbnz	r3, 800cae2 <quorem+0x9e>
 800cad6:	9b01      	ldr	r3, [sp, #4]
 800cad8:	3b04      	subs	r3, #4
 800cada:	429d      	cmp	r5, r3
 800cadc:	461a      	mov	r2, r3
 800cade:	d32e      	bcc.n	800cb3e <quorem+0xfa>
 800cae0:	613c      	str	r4, [r7, #16]
 800cae2:	4638      	mov	r0, r7
 800cae4:	f001 fc8c 	bl	800e400 <__mcmp>
 800cae8:	2800      	cmp	r0, #0
 800caea:	db24      	blt.n	800cb36 <quorem+0xf2>
 800caec:	3601      	adds	r6, #1
 800caee:	4628      	mov	r0, r5
 800caf0:	f04f 0c00 	mov.w	ip, #0
 800caf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800caf8:	f8d0 e000 	ldr.w	lr, [r0]
 800cafc:	b293      	uxth	r3, r2
 800cafe:	ebac 0303 	sub.w	r3, ip, r3
 800cb02:	0c12      	lsrs	r2, r2, #16
 800cb04:	fa13 f38e 	uxtah	r3, r3, lr
 800cb08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb16:	45c1      	cmp	r9, r8
 800cb18:	f840 3b04 	str.w	r3, [r0], #4
 800cb1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb20:	d2e8      	bcs.n	800caf4 <quorem+0xb0>
 800cb22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb2a:	b922      	cbnz	r2, 800cb36 <quorem+0xf2>
 800cb2c:	3b04      	subs	r3, #4
 800cb2e:	429d      	cmp	r5, r3
 800cb30:	461a      	mov	r2, r3
 800cb32:	d30a      	bcc.n	800cb4a <quorem+0x106>
 800cb34:	613c      	str	r4, [r7, #16]
 800cb36:	4630      	mov	r0, r6
 800cb38:	b003      	add	sp, #12
 800cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3e:	6812      	ldr	r2, [r2, #0]
 800cb40:	3b04      	subs	r3, #4
 800cb42:	2a00      	cmp	r2, #0
 800cb44:	d1cc      	bne.n	800cae0 <quorem+0x9c>
 800cb46:	3c01      	subs	r4, #1
 800cb48:	e7c7      	b.n	800cada <quorem+0x96>
 800cb4a:	6812      	ldr	r2, [r2, #0]
 800cb4c:	3b04      	subs	r3, #4
 800cb4e:	2a00      	cmp	r2, #0
 800cb50:	d1f0      	bne.n	800cb34 <quorem+0xf0>
 800cb52:	3c01      	subs	r4, #1
 800cb54:	e7eb      	b.n	800cb2e <quorem+0xea>
 800cb56:	2000      	movs	r0, #0
 800cb58:	e7ee      	b.n	800cb38 <quorem+0xf4>
 800cb5a:	0000      	movs	r0, r0
 800cb5c:	0000      	movs	r0, r0
	...

0800cb60 <_dtoa_r>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	ed2d 8b02 	vpush	{d8}
 800cb68:	ec57 6b10 	vmov	r6, r7, d0
 800cb6c:	b095      	sub	sp, #84	; 0x54
 800cb6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb74:	9105      	str	r1, [sp, #20]
 800cb76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	9209      	str	r2, [sp, #36]	; 0x24
 800cb7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb80:	b975      	cbnz	r5, 800cba0 <_dtoa_r+0x40>
 800cb82:	2010      	movs	r0, #16
 800cb84:	f001 f94c 	bl	800de20 <malloc>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	6260      	str	r0, [r4, #36]	; 0x24
 800cb8c:	b920      	cbnz	r0, 800cb98 <_dtoa_r+0x38>
 800cb8e:	4bb2      	ldr	r3, [pc, #712]	; (800ce58 <_dtoa_r+0x2f8>)
 800cb90:	21ea      	movs	r1, #234	; 0xea
 800cb92:	48b2      	ldr	r0, [pc, #712]	; (800ce5c <_dtoa_r+0x2fc>)
 800cb94:	f002 f874 	bl	800ec80 <__assert_func>
 800cb98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb9c:	6005      	str	r5, [r0, #0]
 800cb9e:	60c5      	str	r5, [r0, #12]
 800cba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cba2:	6819      	ldr	r1, [r3, #0]
 800cba4:	b151      	cbz	r1, 800cbbc <_dtoa_r+0x5c>
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	604a      	str	r2, [r1, #4]
 800cbaa:	2301      	movs	r3, #1
 800cbac:	4093      	lsls	r3, r2
 800cbae:	608b      	str	r3, [r1, #8]
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f001 f99d 	bl	800def0 <_Bfree>
 800cbb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]
 800cbbc:	1e3b      	subs	r3, r7, #0
 800cbbe:	bfb9      	ittee	lt
 800cbc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cbc4:	9303      	strlt	r3, [sp, #12]
 800cbc6:	2300      	movge	r3, #0
 800cbc8:	f8c8 3000 	strge.w	r3, [r8]
 800cbcc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cbd0:	4ba3      	ldr	r3, [pc, #652]	; (800ce60 <_dtoa_r+0x300>)
 800cbd2:	bfbc      	itt	lt
 800cbd4:	2201      	movlt	r2, #1
 800cbd6:	f8c8 2000 	strlt.w	r2, [r8]
 800cbda:	ea33 0309 	bics.w	r3, r3, r9
 800cbde:	d11b      	bne.n	800cc18 <_dtoa_r+0xb8>
 800cbe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbe2:	f242 730f 	movw	r3, #9999	; 0x270f
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbec:	4333      	orrs	r3, r6
 800cbee:	f000 857a 	beq.w	800d6e6 <_dtoa_r+0xb86>
 800cbf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbf4:	b963      	cbnz	r3, 800cc10 <_dtoa_r+0xb0>
 800cbf6:	4b9b      	ldr	r3, [pc, #620]	; (800ce64 <_dtoa_r+0x304>)
 800cbf8:	e024      	b.n	800cc44 <_dtoa_r+0xe4>
 800cbfa:	4b9b      	ldr	r3, [pc, #620]	; (800ce68 <_dtoa_r+0x308>)
 800cbfc:	9300      	str	r3, [sp, #0]
 800cbfe:	3308      	adds	r3, #8
 800cc00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc02:	6013      	str	r3, [r2, #0]
 800cc04:	9800      	ldr	r0, [sp, #0]
 800cc06:	b015      	add	sp, #84	; 0x54
 800cc08:	ecbd 8b02 	vpop	{d8}
 800cc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc10:	4b94      	ldr	r3, [pc, #592]	; (800ce64 <_dtoa_r+0x304>)
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	3303      	adds	r3, #3
 800cc16:	e7f3      	b.n	800cc00 <_dtoa_r+0xa0>
 800cc18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	ec51 0b17 	vmov	r0, r1, d7
 800cc22:	2300      	movs	r3, #0
 800cc24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cc28:	f7f3 ff56 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc2c:	4680      	mov	r8, r0
 800cc2e:	b158      	cbz	r0, 800cc48 <_dtoa_r+0xe8>
 800cc30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc32:	2301      	movs	r3, #1
 800cc34:	6013      	str	r3, [r2, #0]
 800cc36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f000 8551 	beq.w	800d6e0 <_dtoa_r+0xb80>
 800cc3e:	488b      	ldr	r0, [pc, #556]	; (800ce6c <_dtoa_r+0x30c>)
 800cc40:	6018      	str	r0, [r3, #0]
 800cc42:	1e43      	subs	r3, r0, #1
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	e7dd      	b.n	800cc04 <_dtoa_r+0xa4>
 800cc48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cc4c:	aa12      	add	r2, sp, #72	; 0x48
 800cc4e:	a913      	add	r1, sp, #76	; 0x4c
 800cc50:	4620      	mov	r0, r4
 800cc52:	f001 fcf5 	bl	800e640 <__d2b>
 800cc56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc5a:	4683      	mov	fp, r0
 800cc5c:	2d00      	cmp	r5, #0
 800cc5e:	d07c      	beq.n	800cd5a <_dtoa_r+0x1fa>
 800cc60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cc66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cc6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cc72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cc76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc7a:	4b7d      	ldr	r3, [pc, #500]	; (800ce70 <_dtoa_r+0x310>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	4630      	mov	r0, r6
 800cc80:	4639      	mov	r1, r7
 800cc82:	f7f3 fb09 	bl	8000298 <__aeabi_dsub>
 800cc86:	a36e      	add	r3, pc, #440	; (adr r3, 800ce40 <_dtoa_r+0x2e0>)
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	f7f3 fcbc 	bl	8000608 <__aeabi_dmul>
 800cc90:	a36d      	add	r3, pc, #436	; (adr r3, 800ce48 <_dtoa_r+0x2e8>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	f7f3 fb01 	bl	800029c <__adddf3>
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	460f      	mov	r7, r1
 800cca0:	f7f3 fc48 	bl	8000534 <__aeabi_i2d>
 800cca4:	a36a      	add	r3, pc, #424	; (adr r3, 800ce50 <_dtoa_r+0x2f0>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 fcad 	bl	8000608 <__aeabi_dmul>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	4639      	mov	r1, r7
 800ccb6:	f7f3 faf1 	bl	800029c <__adddf3>
 800ccba:	4606      	mov	r6, r0
 800ccbc:	460f      	mov	r7, r1
 800ccbe:	f7f3 ff53 	bl	8000b68 <__aeabi_d2iz>
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	4682      	mov	sl, r0
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	4630      	mov	r0, r6
 800ccca:	4639      	mov	r1, r7
 800cccc:	f7f3 ff0e 	bl	8000aec <__aeabi_dcmplt>
 800ccd0:	b148      	cbz	r0, 800cce6 <_dtoa_r+0x186>
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	f7f3 fc2e 	bl	8000534 <__aeabi_i2d>
 800ccd8:	4632      	mov	r2, r6
 800ccda:	463b      	mov	r3, r7
 800ccdc:	f7f3 fefc 	bl	8000ad8 <__aeabi_dcmpeq>
 800cce0:	b908      	cbnz	r0, 800cce6 <_dtoa_r+0x186>
 800cce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cce6:	f1ba 0f16 	cmp.w	sl, #22
 800ccea:	d854      	bhi.n	800cd96 <_dtoa_r+0x236>
 800ccec:	4b61      	ldr	r3, [pc, #388]	; (800ce74 <_dtoa_r+0x314>)
 800ccee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ccfa:	f7f3 fef7 	bl	8000aec <__aeabi_dcmplt>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d04b      	beq.n	800cd9a <_dtoa_r+0x23a>
 800cd02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd06:	2300      	movs	r3, #0
 800cd08:	930e      	str	r3, [sp, #56]	; 0x38
 800cd0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd0c:	1b5d      	subs	r5, r3, r5
 800cd0e:	1e6b      	subs	r3, r5, #1
 800cd10:	9304      	str	r3, [sp, #16]
 800cd12:	bf43      	ittte	mi
 800cd14:	2300      	movmi	r3, #0
 800cd16:	f1c5 0801 	rsbmi	r8, r5, #1
 800cd1a:	9304      	strmi	r3, [sp, #16]
 800cd1c:	f04f 0800 	movpl.w	r8, #0
 800cd20:	f1ba 0f00 	cmp.w	sl, #0
 800cd24:	db3b      	blt.n	800cd9e <_dtoa_r+0x23e>
 800cd26:	9b04      	ldr	r3, [sp, #16]
 800cd28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cd2c:	4453      	add	r3, sl
 800cd2e:	9304      	str	r3, [sp, #16]
 800cd30:	2300      	movs	r3, #0
 800cd32:	9306      	str	r3, [sp, #24]
 800cd34:	9b05      	ldr	r3, [sp, #20]
 800cd36:	2b09      	cmp	r3, #9
 800cd38:	d869      	bhi.n	800ce0e <_dtoa_r+0x2ae>
 800cd3a:	2b05      	cmp	r3, #5
 800cd3c:	bfc4      	itt	gt
 800cd3e:	3b04      	subgt	r3, #4
 800cd40:	9305      	strgt	r3, [sp, #20]
 800cd42:	9b05      	ldr	r3, [sp, #20]
 800cd44:	f1a3 0302 	sub.w	r3, r3, #2
 800cd48:	bfcc      	ite	gt
 800cd4a:	2500      	movgt	r5, #0
 800cd4c:	2501      	movle	r5, #1
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d869      	bhi.n	800ce26 <_dtoa_r+0x2c6>
 800cd52:	e8df f003 	tbb	[pc, r3]
 800cd56:	4e2c      	.short	0x4e2c
 800cd58:	5a4c      	.short	0x5a4c
 800cd5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cd5e:	441d      	add	r5, r3
 800cd60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd64:	2b20      	cmp	r3, #32
 800cd66:	bfc1      	itttt	gt
 800cd68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cd70:	fa09 f303 	lslgt.w	r3, r9, r3
 800cd74:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cd78:	bfda      	itte	le
 800cd7a:	f1c3 0320 	rsble	r3, r3, #32
 800cd7e:	fa06 f003 	lslle.w	r0, r6, r3
 800cd82:	4318      	orrgt	r0, r3
 800cd84:	f7f3 fbc6 	bl	8000514 <__aeabi_ui2d>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cd90:	3d01      	subs	r5, #1
 800cd92:	9310      	str	r3, [sp, #64]	; 0x40
 800cd94:	e771      	b.n	800cc7a <_dtoa_r+0x11a>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e7b6      	b.n	800cd08 <_dtoa_r+0x1a8>
 800cd9a:	900e      	str	r0, [sp, #56]	; 0x38
 800cd9c:	e7b5      	b.n	800cd0a <_dtoa_r+0x1aa>
 800cd9e:	f1ca 0300 	rsb	r3, sl, #0
 800cda2:	9306      	str	r3, [sp, #24]
 800cda4:	2300      	movs	r3, #0
 800cda6:	eba8 080a 	sub.w	r8, r8, sl
 800cdaa:	930d      	str	r3, [sp, #52]	; 0x34
 800cdac:	e7c2      	b.n	800cd34 <_dtoa_r+0x1d4>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	9308      	str	r3, [sp, #32]
 800cdb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	dc39      	bgt.n	800ce2c <_dtoa_r+0x2cc>
 800cdb8:	f04f 0901 	mov.w	r9, #1
 800cdbc:	f8cd 9004 	str.w	r9, [sp, #4]
 800cdc0:	464b      	mov	r3, r9
 800cdc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cdc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cdc8:	2200      	movs	r2, #0
 800cdca:	6042      	str	r2, [r0, #4]
 800cdcc:	2204      	movs	r2, #4
 800cdce:	f102 0614 	add.w	r6, r2, #20
 800cdd2:	429e      	cmp	r6, r3
 800cdd4:	6841      	ldr	r1, [r0, #4]
 800cdd6:	d92f      	bls.n	800ce38 <_dtoa_r+0x2d8>
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f001 f849 	bl	800de70 <_Balloc>
 800cdde:	9000      	str	r0, [sp, #0]
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d14b      	bne.n	800ce7c <_dtoa_r+0x31c>
 800cde4:	4b24      	ldr	r3, [pc, #144]	; (800ce78 <_dtoa_r+0x318>)
 800cde6:	4602      	mov	r2, r0
 800cde8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cdec:	e6d1      	b.n	800cb92 <_dtoa_r+0x32>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e7de      	b.n	800cdb0 <_dtoa_r+0x250>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	9308      	str	r3, [sp, #32]
 800cdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf8:	eb0a 0903 	add.w	r9, sl, r3
 800cdfc:	f109 0301 	add.w	r3, r9, #1
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	bfb8      	it	lt
 800ce06:	2301      	movlt	r3, #1
 800ce08:	e7dd      	b.n	800cdc6 <_dtoa_r+0x266>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e7f2      	b.n	800cdf4 <_dtoa_r+0x294>
 800ce0e:	2501      	movs	r5, #1
 800ce10:	2300      	movs	r3, #0
 800ce12:	9305      	str	r3, [sp, #20]
 800ce14:	9508      	str	r5, [sp, #32]
 800ce16:	f04f 39ff 	mov.w	r9, #4294967295
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ce20:	2312      	movs	r3, #18
 800ce22:	9209      	str	r2, [sp, #36]	; 0x24
 800ce24:	e7cf      	b.n	800cdc6 <_dtoa_r+0x266>
 800ce26:	2301      	movs	r3, #1
 800ce28:	9308      	str	r3, [sp, #32]
 800ce2a:	e7f4      	b.n	800ce16 <_dtoa_r+0x2b6>
 800ce2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ce30:	f8cd 9004 	str.w	r9, [sp, #4]
 800ce34:	464b      	mov	r3, r9
 800ce36:	e7c6      	b.n	800cdc6 <_dtoa_r+0x266>
 800ce38:	3101      	adds	r1, #1
 800ce3a:	6041      	str	r1, [r0, #4]
 800ce3c:	0052      	lsls	r2, r2, #1
 800ce3e:	e7c6      	b.n	800cdce <_dtoa_r+0x26e>
 800ce40:	636f4361 	.word	0x636f4361
 800ce44:	3fd287a7 	.word	0x3fd287a7
 800ce48:	8b60c8b3 	.word	0x8b60c8b3
 800ce4c:	3fc68a28 	.word	0x3fc68a28
 800ce50:	509f79fb 	.word	0x509f79fb
 800ce54:	3fd34413 	.word	0x3fd34413
 800ce58:	08023d9e 	.word	0x08023d9e
 800ce5c:	08023db5 	.word	0x08023db5
 800ce60:	7ff00000 	.word	0x7ff00000
 800ce64:	08023d9a 	.word	0x08023d9a
 800ce68:	08023d91 	.word	0x08023d91
 800ce6c:	08023c11 	.word	0x08023c11
 800ce70:	3ff80000 	.word	0x3ff80000
 800ce74:	08023f30 	.word	0x08023f30
 800ce78:	08023e14 	.word	0x08023e14
 800ce7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce7e:	9a00      	ldr	r2, [sp, #0]
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	9b01      	ldr	r3, [sp, #4]
 800ce84:	2b0e      	cmp	r3, #14
 800ce86:	f200 80ad 	bhi.w	800cfe4 <_dtoa_r+0x484>
 800ce8a:	2d00      	cmp	r5, #0
 800ce8c:	f000 80aa 	beq.w	800cfe4 <_dtoa_r+0x484>
 800ce90:	f1ba 0f00 	cmp.w	sl, #0
 800ce94:	dd36      	ble.n	800cf04 <_dtoa_r+0x3a4>
 800ce96:	4ac3      	ldr	r2, [pc, #780]	; (800d1a4 <_dtoa_r+0x644>)
 800ce98:	f00a 030f 	and.w	r3, sl, #15
 800ce9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cea0:	ed93 7b00 	vldr	d7, [r3]
 800cea4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cea8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ceac:	eeb0 8a47 	vmov.f32	s16, s14
 800ceb0:	eef0 8a67 	vmov.f32	s17, s15
 800ceb4:	d016      	beq.n	800cee4 <_dtoa_r+0x384>
 800ceb6:	4bbc      	ldr	r3, [pc, #752]	; (800d1a8 <_dtoa_r+0x648>)
 800ceb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cebc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cec0:	f7f3 fccc 	bl	800085c <__aeabi_ddiv>
 800cec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cec8:	f007 070f 	and.w	r7, r7, #15
 800cecc:	2503      	movs	r5, #3
 800cece:	4eb6      	ldr	r6, [pc, #728]	; (800d1a8 <_dtoa_r+0x648>)
 800ced0:	b957      	cbnz	r7, 800cee8 <_dtoa_r+0x388>
 800ced2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ced6:	ec53 2b18 	vmov	r2, r3, d8
 800ceda:	f7f3 fcbf 	bl	800085c <__aeabi_ddiv>
 800cede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cee2:	e029      	b.n	800cf38 <_dtoa_r+0x3d8>
 800cee4:	2502      	movs	r5, #2
 800cee6:	e7f2      	b.n	800cece <_dtoa_r+0x36e>
 800cee8:	07f9      	lsls	r1, r7, #31
 800ceea:	d508      	bpl.n	800cefe <_dtoa_r+0x39e>
 800ceec:	ec51 0b18 	vmov	r0, r1, d8
 800cef0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cef4:	f7f3 fb88 	bl	8000608 <__aeabi_dmul>
 800cef8:	ec41 0b18 	vmov	d8, r0, r1
 800cefc:	3501      	adds	r5, #1
 800cefe:	107f      	asrs	r7, r7, #1
 800cf00:	3608      	adds	r6, #8
 800cf02:	e7e5      	b.n	800ced0 <_dtoa_r+0x370>
 800cf04:	f000 80a6 	beq.w	800d054 <_dtoa_r+0x4f4>
 800cf08:	f1ca 0600 	rsb	r6, sl, #0
 800cf0c:	4ba5      	ldr	r3, [pc, #660]	; (800d1a4 <_dtoa_r+0x644>)
 800cf0e:	4fa6      	ldr	r7, [pc, #664]	; (800d1a8 <_dtoa_r+0x648>)
 800cf10:	f006 020f 	and.w	r2, r6, #15
 800cf14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cf20:	f7f3 fb72 	bl	8000608 <__aeabi_dmul>
 800cf24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf28:	1136      	asrs	r6, r6, #4
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2502      	movs	r5, #2
 800cf2e:	2e00      	cmp	r6, #0
 800cf30:	f040 8085 	bne.w	800d03e <_dtoa_r+0x4de>
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1d2      	bne.n	800cede <_dtoa_r+0x37e>
 800cf38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 808c 	beq.w	800d058 <_dtoa_r+0x4f8>
 800cf40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf44:	4b99      	ldr	r3, [pc, #612]	; (800d1ac <_dtoa_r+0x64c>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	4630      	mov	r0, r6
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	f7f3 fdce 	bl	8000aec <__aeabi_dcmplt>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	f000 8081 	beq.w	800d058 <_dtoa_r+0x4f8>
 800cf56:	9b01      	ldr	r3, [sp, #4]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d07d      	beq.n	800d058 <_dtoa_r+0x4f8>
 800cf5c:	f1b9 0f00 	cmp.w	r9, #0
 800cf60:	dd3c      	ble.n	800cfdc <_dtoa_r+0x47c>
 800cf62:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cf66:	9307      	str	r3, [sp, #28]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	4b91      	ldr	r3, [pc, #580]	; (800d1b0 <_dtoa_r+0x650>)
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	4639      	mov	r1, r7
 800cf70:	f7f3 fb4a 	bl	8000608 <__aeabi_dmul>
 800cf74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf78:	3501      	adds	r5, #1
 800cf7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cf7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf82:	4628      	mov	r0, r5
 800cf84:	f7f3 fad6 	bl	8000534 <__aeabi_i2d>
 800cf88:	4632      	mov	r2, r6
 800cf8a:	463b      	mov	r3, r7
 800cf8c:	f7f3 fb3c 	bl	8000608 <__aeabi_dmul>
 800cf90:	4b88      	ldr	r3, [pc, #544]	; (800d1b4 <_dtoa_r+0x654>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	f7f3 f982 	bl	800029c <__adddf3>
 800cf98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cf9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfa0:	9303      	str	r3, [sp, #12]
 800cfa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d15c      	bne.n	800d062 <_dtoa_r+0x502>
 800cfa8:	4b83      	ldr	r3, [pc, #524]	; (800d1b8 <_dtoa_r+0x658>)
 800cfaa:	2200      	movs	r2, #0
 800cfac:	4630      	mov	r0, r6
 800cfae:	4639      	mov	r1, r7
 800cfb0:	f7f3 f972 	bl	8000298 <__aeabi_dsub>
 800cfb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfb8:	4606      	mov	r6, r0
 800cfba:	460f      	mov	r7, r1
 800cfbc:	f7f3 fdb4 	bl	8000b28 <__aeabi_dcmpgt>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	f040 8296 	bne.w	800d4f2 <_dtoa_r+0x992>
 800cfc6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cfca:	4630      	mov	r0, r6
 800cfcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfd0:	4639      	mov	r1, r7
 800cfd2:	f7f3 fd8b 	bl	8000aec <__aeabi_dcmplt>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	f040 8288 	bne.w	800d4ec <_dtoa_r+0x98c>
 800cfdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cfe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f2c0 8158 	blt.w	800d29c <_dtoa_r+0x73c>
 800cfec:	f1ba 0f0e 	cmp.w	sl, #14
 800cff0:	f300 8154 	bgt.w	800d29c <_dtoa_r+0x73c>
 800cff4:	4b6b      	ldr	r3, [pc, #428]	; (800d1a4 <_dtoa_r+0x644>)
 800cff6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cffa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d000:	2b00      	cmp	r3, #0
 800d002:	f280 80e3 	bge.w	800d1cc <_dtoa_r+0x66c>
 800d006:	9b01      	ldr	r3, [sp, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f300 80df 	bgt.w	800d1cc <_dtoa_r+0x66c>
 800d00e:	f040 826d 	bne.w	800d4ec <_dtoa_r+0x98c>
 800d012:	4b69      	ldr	r3, [pc, #420]	; (800d1b8 <_dtoa_r+0x658>)
 800d014:	2200      	movs	r2, #0
 800d016:	4640      	mov	r0, r8
 800d018:	4649      	mov	r1, r9
 800d01a:	f7f3 faf5 	bl	8000608 <__aeabi_dmul>
 800d01e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d022:	f7f3 fd77 	bl	8000b14 <__aeabi_dcmpge>
 800d026:	9e01      	ldr	r6, [sp, #4]
 800d028:	4637      	mov	r7, r6
 800d02a:	2800      	cmp	r0, #0
 800d02c:	f040 8243 	bne.w	800d4b6 <_dtoa_r+0x956>
 800d030:	9d00      	ldr	r5, [sp, #0]
 800d032:	2331      	movs	r3, #49	; 0x31
 800d034:	f805 3b01 	strb.w	r3, [r5], #1
 800d038:	f10a 0a01 	add.w	sl, sl, #1
 800d03c:	e23f      	b.n	800d4be <_dtoa_r+0x95e>
 800d03e:	07f2      	lsls	r2, r6, #31
 800d040:	d505      	bpl.n	800d04e <_dtoa_r+0x4ee>
 800d042:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d046:	f7f3 fadf 	bl	8000608 <__aeabi_dmul>
 800d04a:	3501      	adds	r5, #1
 800d04c:	2301      	movs	r3, #1
 800d04e:	1076      	asrs	r6, r6, #1
 800d050:	3708      	adds	r7, #8
 800d052:	e76c      	b.n	800cf2e <_dtoa_r+0x3ce>
 800d054:	2502      	movs	r5, #2
 800d056:	e76f      	b.n	800cf38 <_dtoa_r+0x3d8>
 800d058:	9b01      	ldr	r3, [sp, #4]
 800d05a:	f8cd a01c 	str.w	sl, [sp, #28]
 800d05e:	930c      	str	r3, [sp, #48]	; 0x30
 800d060:	e78d      	b.n	800cf7e <_dtoa_r+0x41e>
 800d062:	9900      	ldr	r1, [sp, #0]
 800d064:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d068:	4b4e      	ldr	r3, [pc, #312]	; (800d1a4 <_dtoa_r+0x644>)
 800d06a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d06e:	4401      	add	r1, r0
 800d070:	9102      	str	r1, [sp, #8]
 800d072:	9908      	ldr	r1, [sp, #32]
 800d074:	eeb0 8a47 	vmov.f32	s16, s14
 800d078:	eef0 8a67 	vmov.f32	s17, s15
 800d07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d080:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d084:	2900      	cmp	r1, #0
 800d086:	d045      	beq.n	800d114 <_dtoa_r+0x5b4>
 800d088:	494c      	ldr	r1, [pc, #304]	; (800d1bc <_dtoa_r+0x65c>)
 800d08a:	2000      	movs	r0, #0
 800d08c:	f7f3 fbe6 	bl	800085c <__aeabi_ddiv>
 800d090:	ec53 2b18 	vmov	r2, r3, d8
 800d094:	f7f3 f900 	bl	8000298 <__aeabi_dsub>
 800d098:	9d00      	ldr	r5, [sp, #0]
 800d09a:	ec41 0b18 	vmov	d8, r0, r1
 800d09e:	4639      	mov	r1, r7
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f7f3 fd61 	bl	8000b68 <__aeabi_d2iz>
 800d0a6:	900c      	str	r0, [sp, #48]	; 0x30
 800d0a8:	f7f3 fa44 	bl	8000534 <__aeabi_i2d>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f7f3 f8f0 	bl	8000298 <__aeabi_dsub>
 800d0b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0ba:	3330      	adds	r3, #48	; 0x30
 800d0bc:	f805 3b01 	strb.w	r3, [r5], #1
 800d0c0:	ec53 2b18 	vmov	r2, r3, d8
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	460f      	mov	r7, r1
 800d0c8:	f7f3 fd10 	bl	8000aec <__aeabi_dcmplt>
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d165      	bne.n	800d19c <_dtoa_r+0x63c>
 800d0d0:	4632      	mov	r2, r6
 800d0d2:	463b      	mov	r3, r7
 800d0d4:	4935      	ldr	r1, [pc, #212]	; (800d1ac <_dtoa_r+0x64c>)
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	f7f3 f8de 	bl	8000298 <__aeabi_dsub>
 800d0dc:	ec53 2b18 	vmov	r2, r3, d8
 800d0e0:	f7f3 fd04 	bl	8000aec <__aeabi_dcmplt>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	f040 80b9 	bne.w	800d25c <_dtoa_r+0x6fc>
 800d0ea:	9b02      	ldr	r3, [sp, #8]
 800d0ec:	429d      	cmp	r5, r3
 800d0ee:	f43f af75 	beq.w	800cfdc <_dtoa_r+0x47c>
 800d0f2:	4b2f      	ldr	r3, [pc, #188]	; (800d1b0 <_dtoa_r+0x650>)
 800d0f4:	ec51 0b18 	vmov	r0, r1, d8
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f7f3 fa85 	bl	8000608 <__aeabi_dmul>
 800d0fe:	4b2c      	ldr	r3, [pc, #176]	; (800d1b0 <_dtoa_r+0x650>)
 800d100:	ec41 0b18 	vmov	d8, r0, r1
 800d104:	2200      	movs	r2, #0
 800d106:	4630      	mov	r0, r6
 800d108:	4639      	mov	r1, r7
 800d10a:	f7f3 fa7d 	bl	8000608 <__aeabi_dmul>
 800d10e:	4606      	mov	r6, r0
 800d110:	460f      	mov	r7, r1
 800d112:	e7c4      	b.n	800d09e <_dtoa_r+0x53e>
 800d114:	ec51 0b17 	vmov	r0, r1, d7
 800d118:	f7f3 fa76 	bl	8000608 <__aeabi_dmul>
 800d11c:	9b02      	ldr	r3, [sp, #8]
 800d11e:	9d00      	ldr	r5, [sp, #0]
 800d120:	930c      	str	r3, [sp, #48]	; 0x30
 800d122:	ec41 0b18 	vmov	d8, r0, r1
 800d126:	4639      	mov	r1, r7
 800d128:	4630      	mov	r0, r6
 800d12a:	f7f3 fd1d 	bl	8000b68 <__aeabi_d2iz>
 800d12e:	9011      	str	r0, [sp, #68]	; 0x44
 800d130:	f7f3 fa00 	bl	8000534 <__aeabi_i2d>
 800d134:	4602      	mov	r2, r0
 800d136:	460b      	mov	r3, r1
 800d138:	4630      	mov	r0, r6
 800d13a:	4639      	mov	r1, r7
 800d13c:	f7f3 f8ac 	bl	8000298 <__aeabi_dsub>
 800d140:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d142:	3330      	adds	r3, #48	; 0x30
 800d144:	f805 3b01 	strb.w	r3, [r5], #1
 800d148:	9b02      	ldr	r3, [sp, #8]
 800d14a:	429d      	cmp	r5, r3
 800d14c:	4606      	mov	r6, r0
 800d14e:	460f      	mov	r7, r1
 800d150:	f04f 0200 	mov.w	r2, #0
 800d154:	d134      	bne.n	800d1c0 <_dtoa_r+0x660>
 800d156:	4b19      	ldr	r3, [pc, #100]	; (800d1bc <_dtoa_r+0x65c>)
 800d158:	ec51 0b18 	vmov	r0, r1, d8
 800d15c:	f7f3 f89e 	bl	800029c <__adddf3>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4630      	mov	r0, r6
 800d166:	4639      	mov	r1, r7
 800d168:	f7f3 fcde 	bl	8000b28 <__aeabi_dcmpgt>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d175      	bne.n	800d25c <_dtoa_r+0x6fc>
 800d170:	ec53 2b18 	vmov	r2, r3, d8
 800d174:	4911      	ldr	r1, [pc, #68]	; (800d1bc <_dtoa_r+0x65c>)
 800d176:	2000      	movs	r0, #0
 800d178:	f7f3 f88e 	bl	8000298 <__aeabi_dsub>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4630      	mov	r0, r6
 800d182:	4639      	mov	r1, r7
 800d184:	f7f3 fcb2 	bl	8000aec <__aeabi_dcmplt>
 800d188:	2800      	cmp	r0, #0
 800d18a:	f43f af27 	beq.w	800cfdc <_dtoa_r+0x47c>
 800d18e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d190:	1e6b      	subs	r3, r5, #1
 800d192:	930c      	str	r3, [sp, #48]	; 0x30
 800d194:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d198:	2b30      	cmp	r3, #48	; 0x30
 800d19a:	d0f8      	beq.n	800d18e <_dtoa_r+0x62e>
 800d19c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d1a0:	e04a      	b.n	800d238 <_dtoa_r+0x6d8>
 800d1a2:	bf00      	nop
 800d1a4:	08023f30 	.word	0x08023f30
 800d1a8:	08023f08 	.word	0x08023f08
 800d1ac:	3ff00000 	.word	0x3ff00000
 800d1b0:	40240000 	.word	0x40240000
 800d1b4:	401c0000 	.word	0x401c0000
 800d1b8:	40140000 	.word	0x40140000
 800d1bc:	3fe00000 	.word	0x3fe00000
 800d1c0:	4baf      	ldr	r3, [pc, #700]	; (800d480 <_dtoa_r+0x920>)
 800d1c2:	f7f3 fa21 	bl	8000608 <__aeabi_dmul>
 800d1c6:	4606      	mov	r6, r0
 800d1c8:	460f      	mov	r7, r1
 800d1ca:	e7ac      	b.n	800d126 <_dtoa_r+0x5c6>
 800d1cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d1d0:	9d00      	ldr	r5, [sp, #0]
 800d1d2:	4642      	mov	r2, r8
 800d1d4:	464b      	mov	r3, r9
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	4639      	mov	r1, r7
 800d1da:	f7f3 fb3f 	bl	800085c <__aeabi_ddiv>
 800d1de:	f7f3 fcc3 	bl	8000b68 <__aeabi_d2iz>
 800d1e2:	9002      	str	r0, [sp, #8]
 800d1e4:	f7f3 f9a6 	bl	8000534 <__aeabi_i2d>
 800d1e8:	4642      	mov	r2, r8
 800d1ea:	464b      	mov	r3, r9
 800d1ec:	f7f3 fa0c 	bl	8000608 <__aeabi_dmul>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	f7f3 f84e 	bl	8000298 <__aeabi_dsub>
 800d1fc:	9e02      	ldr	r6, [sp, #8]
 800d1fe:	9f01      	ldr	r7, [sp, #4]
 800d200:	3630      	adds	r6, #48	; 0x30
 800d202:	f805 6b01 	strb.w	r6, [r5], #1
 800d206:	9e00      	ldr	r6, [sp, #0]
 800d208:	1bae      	subs	r6, r5, r6
 800d20a:	42b7      	cmp	r7, r6
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	d137      	bne.n	800d282 <_dtoa_r+0x722>
 800d212:	f7f3 f843 	bl	800029c <__adddf3>
 800d216:	4642      	mov	r2, r8
 800d218:	464b      	mov	r3, r9
 800d21a:	4606      	mov	r6, r0
 800d21c:	460f      	mov	r7, r1
 800d21e:	f7f3 fc83 	bl	8000b28 <__aeabi_dcmpgt>
 800d222:	b9c8      	cbnz	r0, 800d258 <_dtoa_r+0x6f8>
 800d224:	4642      	mov	r2, r8
 800d226:	464b      	mov	r3, r9
 800d228:	4630      	mov	r0, r6
 800d22a:	4639      	mov	r1, r7
 800d22c:	f7f3 fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 800d230:	b110      	cbz	r0, 800d238 <_dtoa_r+0x6d8>
 800d232:	9b02      	ldr	r3, [sp, #8]
 800d234:	07d9      	lsls	r1, r3, #31
 800d236:	d40f      	bmi.n	800d258 <_dtoa_r+0x6f8>
 800d238:	4620      	mov	r0, r4
 800d23a:	4659      	mov	r1, fp
 800d23c:	f000 fe58 	bl	800def0 <_Bfree>
 800d240:	2300      	movs	r3, #0
 800d242:	702b      	strb	r3, [r5, #0]
 800d244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d246:	f10a 0001 	add.w	r0, sl, #1
 800d24a:	6018      	str	r0, [r3, #0]
 800d24c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f43f acd8 	beq.w	800cc04 <_dtoa_r+0xa4>
 800d254:	601d      	str	r5, [r3, #0]
 800d256:	e4d5      	b.n	800cc04 <_dtoa_r+0xa4>
 800d258:	f8cd a01c 	str.w	sl, [sp, #28]
 800d25c:	462b      	mov	r3, r5
 800d25e:	461d      	mov	r5, r3
 800d260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d264:	2a39      	cmp	r2, #57	; 0x39
 800d266:	d108      	bne.n	800d27a <_dtoa_r+0x71a>
 800d268:	9a00      	ldr	r2, [sp, #0]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d1f7      	bne.n	800d25e <_dtoa_r+0x6fe>
 800d26e:	9a07      	ldr	r2, [sp, #28]
 800d270:	9900      	ldr	r1, [sp, #0]
 800d272:	3201      	adds	r2, #1
 800d274:	9207      	str	r2, [sp, #28]
 800d276:	2230      	movs	r2, #48	; 0x30
 800d278:	700a      	strb	r2, [r1, #0]
 800d27a:	781a      	ldrb	r2, [r3, #0]
 800d27c:	3201      	adds	r2, #1
 800d27e:	701a      	strb	r2, [r3, #0]
 800d280:	e78c      	b.n	800d19c <_dtoa_r+0x63c>
 800d282:	4b7f      	ldr	r3, [pc, #508]	; (800d480 <_dtoa_r+0x920>)
 800d284:	2200      	movs	r2, #0
 800d286:	f7f3 f9bf 	bl	8000608 <__aeabi_dmul>
 800d28a:	2200      	movs	r2, #0
 800d28c:	2300      	movs	r3, #0
 800d28e:	4606      	mov	r6, r0
 800d290:	460f      	mov	r7, r1
 800d292:	f7f3 fc21 	bl	8000ad8 <__aeabi_dcmpeq>
 800d296:	2800      	cmp	r0, #0
 800d298:	d09b      	beq.n	800d1d2 <_dtoa_r+0x672>
 800d29a:	e7cd      	b.n	800d238 <_dtoa_r+0x6d8>
 800d29c:	9a08      	ldr	r2, [sp, #32]
 800d29e:	2a00      	cmp	r2, #0
 800d2a0:	f000 80c4 	beq.w	800d42c <_dtoa_r+0x8cc>
 800d2a4:	9a05      	ldr	r2, [sp, #20]
 800d2a6:	2a01      	cmp	r2, #1
 800d2a8:	f300 80a8 	bgt.w	800d3fc <_dtoa_r+0x89c>
 800d2ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2ae:	2a00      	cmp	r2, #0
 800d2b0:	f000 80a0 	beq.w	800d3f4 <_dtoa_r+0x894>
 800d2b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d2b8:	9e06      	ldr	r6, [sp, #24]
 800d2ba:	4645      	mov	r5, r8
 800d2bc:	9a04      	ldr	r2, [sp, #16]
 800d2be:	2101      	movs	r1, #1
 800d2c0:	441a      	add	r2, r3
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4498      	add	r8, r3
 800d2c6:	9204      	str	r2, [sp, #16]
 800d2c8:	f000 ff18 	bl	800e0fc <__i2b>
 800d2cc:	4607      	mov	r7, r0
 800d2ce:	2d00      	cmp	r5, #0
 800d2d0:	dd0b      	ble.n	800d2ea <_dtoa_r+0x78a>
 800d2d2:	9b04      	ldr	r3, [sp, #16]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	dd08      	ble.n	800d2ea <_dtoa_r+0x78a>
 800d2d8:	42ab      	cmp	r3, r5
 800d2da:	9a04      	ldr	r2, [sp, #16]
 800d2dc:	bfa8      	it	ge
 800d2de:	462b      	movge	r3, r5
 800d2e0:	eba8 0803 	sub.w	r8, r8, r3
 800d2e4:	1aed      	subs	r5, r5, r3
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	9304      	str	r3, [sp, #16]
 800d2ea:	9b06      	ldr	r3, [sp, #24]
 800d2ec:	b1fb      	cbz	r3, 800d32e <_dtoa_r+0x7ce>
 800d2ee:	9b08      	ldr	r3, [sp, #32]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f000 809f 	beq.w	800d434 <_dtoa_r+0x8d4>
 800d2f6:	2e00      	cmp	r6, #0
 800d2f8:	dd11      	ble.n	800d31e <_dtoa_r+0x7be>
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	4632      	mov	r2, r6
 800d2fe:	4620      	mov	r0, r4
 800d300:	f000 ffb8 	bl	800e274 <__pow5mult>
 800d304:	465a      	mov	r2, fp
 800d306:	4601      	mov	r1, r0
 800d308:	4607      	mov	r7, r0
 800d30a:	4620      	mov	r0, r4
 800d30c:	f000 ff0c 	bl	800e128 <__multiply>
 800d310:	4659      	mov	r1, fp
 800d312:	9007      	str	r0, [sp, #28]
 800d314:	4620      	mov	r0, r4
 800d316:	f000 fdeb 	bl	800def0 <_Bfree>
 800d31a:	9b07      	ldr	r3, [sp, #28]
 800d31c:	469b      	mov	fp, r3
 800d31e:	9b06      	ldr	r3, [sp, #24]
 800d320:	1b9a      	subs	r2, r3, r6
 800d322:	d004      	beq.n	800d32e <_dtoa_r+0x7ce>
 800d324:	4659      	mov	r1, fp
 800d326:	4620      	mov	r0, r4
 800d328:	f000 ffa4 	bl	800e274 <__pow5mult>
 800d32c:	4683      	mov	fp, r0
 800d32e:	2101      	movs	r1, #1
 800d330:	4620      	mov	r0, r4
 800d332:	f000 fee3 	bl	800e0fc <__i2b>
 800d336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d338:	2b00      	cmp	r3, #0
 800d33a:	4606      	mov	r6, r0
 800d33c:	dd7c      	ble.n	800d438 <_dtoa_r+0x8d8>
 800d33e:	461a      	mov	r2, r3
 800d340:	4601      	mov	r1, r0
 800d342:	4620      	mov	r0, r4
 800d344:	f000 ff96 	bl	800e274 <__pow5mult>
 800d348:	9b05      	ldr	r3, [sp, #20]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	4606      	mov	r6, r0
 800d34e:	dd76      	ble.n	800d43e <_dtoa_r+0x8de>
 800d350:	2300      	movs	r3, #0
 800d352:	9306      	str	r3, [sp, #24]
 800d354:	6933      	ldr	r3, [r6, #16]
 800d356:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d35a:	6918      	ldr	r0, [r3, #16]
 800d35c:	f000 fe7e 	bl	800e05c <__hi0bits>
 800d360:	f1c0 0020 	rsb	r0, r0, #32
 800d364:	9b04      	ldr	r3, [sp, #16]
 800d366:	4418      	add	r0, r3
 800d368:	f010 001f 	ands.w	r0, r0, #31
 800d36c:	f000 8086 	beq.w	800d47c <_dtoa_r+0x91c>
 800d370:	f1c0 0320 	rsb	r3, r0, #32
 800d374:	2b04      	cmp	r3, #4
 800d376:	dd7f      	ble.n	800d478 <_dtoa_r+0x918>
 800d378:	f1c0 001c 	rsb	r0, r0, #28
 800d37c:	9b04      	ldr	r3, [sp, #16]
 800d37e:	4403      	add	r3, r0
 800d380:	4480      	add	r8, r0
 800d382:	4405      	add	r5, r0
 800d384:	9304      	str	r3, [sp, #16]
 800d386:	f1b8 0f00 	cmp.w	r8, #0
 800d38a:	dd05      	ble.n	800d398 <_dtoa_r+0x838>
 800d38c:	4659      	mov	r1, fp
 800d38e:	4642      	mov	r2, r8
 800d390:	4620      	mov	r0, r4
 800d392:	f000 ffc9 	bl	800e328 <__lshift>
 800d396:	4683      	mov	fp, r0
 800d398:	9b04      	ldr	r3, [sp, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	dd05      	ble.n	800d3aa <_dtoa_r+0x84a>
 800d39e:	4631      	mov	r1, r6
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f000 ffc0 	bl	800e328 <__lshift>
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d069      	beq.n	800d484 <_dtoa_r+0x924>
 800d3b0:	4631      	mov	r1, r6
 800d3b2:	4658      	mov	r0, fp
 800d3b4:	f001 f824 	bl	800e400 <__mcmp>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	da63      	bge.n	800d484 <_dtoa_r+0x924>
 800d3bc:	2300      	movs	r3, #0
 800d3be:	4659      	mov	r1, fp
 800d3c0:	220a      	movs	r2, #10
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 fdb6 	bl	800df34 <__multadd>
 800d3c8:	9b08      	ldr	r3, [sp, #32]
 800d3ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3ce:	4683      	mov	fp, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 818f 	beq.w	800d6f4 <_dtoa_r+0xb94>
 800d3d6:	4639      	mov	r1, r7
 800d3d8:	2300      	movs	r3, #0
 800d3da:	220a      	movs	r2, #10
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f000 fda9 	bl	800df34 <__multadd>
 800d3e2:	f1b9 0f00 	cmp.w	r9, #0
 800d3e6:	4607      	mov	r7, r0
 800d3e8:	f300 808e 	bgt.w	800d508 <_dtoa_r+0x9a8>
 800d3ec:	9b05      	ldr	r3, [sp, #20]
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	dc50      	bgt.n	800d494 <_dtoa_r+0x934>
 800d3f2:	e089      	b.n	800d508 <_dtoa_r+0x9a8>
 800d3f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d3fa:	e75d      	b.n	800d2b8 <_dtoa_r+0x758>
 800d3fc:	9b01      	ldr	r3, [sp, #4]
 800d3fe:	1e5e      	subs	r6, r3, #1
 800d400:	9b06      	ldr	r3, [sp, #24]
 800d402:	42b3      	cmp	r3, r6
 800d404:	bfbf      	itttt	lt
 800d406:	9b06      	ldrlt	r3, [sp, #24]
 800d408:	9606      	strlt	r6, [sp, #24]
 800d40a:	1af2      	sublt	r2, r6, r3
 800d40c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d40e:	bfb6      	itet	lt
 800d410:	189b      	addlt	r3, r3, r2
 800d412:	1b9e      	subge	r6, r3, r6
 800d414:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d416:	9b01      	ldr	r3, [sp, #4]
 800d418:	bfb8      	it	lt
 800d41a:	2600      	movlt	r6, #0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	bfb5      	itete	lt
 800d420:	eba8 0503 	sublt.w	r5, r8, r3
 800d424:	9b01      	ldrge	r3, [sp, #4]
 800d426:	2300      	movlt	r3, #0
 800d428:	4645      	movge	r5, r8
 800d42a:	e747      	b.n	800d2bc <_dtoa_r+0x75c>
 800d42c:	9e06      	ldr	r6, [sp, #24]
 800d42e:	9f08      	ldr	r7, [sp, #32]
 800d430:	4645      	mov	r5, r8
 800d432:	e74c      	b.n	800d2ce <_dtoa_r+0x76e>
 800d434:	9a06      	ldr	r2, [sp, #24]
 800d436:	e775      	b.n	800d324 <_dtoa_r+0x7c4>
 800d438:	9b05      	ldr	r3, [sp, #20]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	dc18      	bgt.n	800d470 <_dtoa_r+0x910>
 800d43e:	9b02      	ldr	r3, [sp, #8]
 800d440:	b9b3      	cbnz	r3, 800d470 <_dtoa_r+0x910>
 800d442:	9b03      	ldr	r3, [sp, #12]
 800d444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d448:	b9a3      	cbnz	r3, 800d474 <_dtoa_r+0x914>
 800d44a:	9b03      	ldr	r3, [sp, #12]
 800d44c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d450:	0d1b      	lsrs	r3, r3, #20
 800d452:	051b      	lsls	r3, r3, #20
 800d454:	b12b      	cbz	r3, 800d462 <_dtoa_r+0x902>
 800d456:	9b04      	ldr	r3, [sp, #16]
 800d458:	3301      	adds	r3, #1
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	f108 0801 	add.w	r8, r8, #1
 800d460:	2301      	movs	r3, #1
 800d462:	9306      	str	r3, [sp, #24]
 800d464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d466:	2b00      	cmp	r3, #0
 800d468:	f47f af74 	bne.w	800d354 <_dtoa_r+0x7f4>
 800d46c:	2001      	movs	r0, #1
 800d46e:	e779      	b.n	800d364 <_dtoa_r+0x804>
 800d470:	2300      	movs	r3, #0
 800d472:	e7f6      	b.n	800d462 <_dtoa_r+0x902>
 800d474:	9b02      	ldr	r3, [sp, #8]
 800d476:	e7f4      	b.n	800d462 <_dtoa_r+0x902>
 800d478:	d085      	beq.n	800d386 <_dtoa_r+0x826>
 800d47a:	4618      	mov	r0, r3
 800d47c:	301c      	adds	r0, #28
 800d47e:	e77d      	b.n	800d37c <_dtoa_r+0x81c>
 800d480:	40240000 	.word	0x40240000
 800d484:	9b01      	ldr	r3, [sp, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	dc38      	bgt.n	800d4fc <_dtoa_r+0x99c>
 800d48a:	9b05      	ldr	r3, [sp, #20]
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	dd35      	ble.n	800d4fc <_dtoa_r+0x99c>
 800d490:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d494:	f1b9 0f00 	cmp.w	r9, #0
 800d498:	d10d      	bne.n	800d4b6 <_dtoa_r+0x956>
 800d49a:	4631      	mov	r1, r6
 800d49c:	464b      	mov	r3, r9
 800d49e:	2205      	movs	r2, #5
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f000 fd47 	bl	800df34 <__multadd>
 800d4a6:	4601      	mov	r1, r0
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	4658      	mov	r0, fp
 800d4ac:	f000 ffa8 	bl	800e400 <__mcmp>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	f73f adbd 	bgt.w	800d030 <_dtoa_r+0x4d0>
 800d4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4b8:	9d00      	ldr	r5, [sp, #0]
 800d4ba:	ea6f 0a03 	mvn.w	sl, r3
 800d4be:	f04f 0800 	mov.w	r8, #0
 800d4c2:	4631      	mov	r1, r6
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f000 fd13 	bl	800def0 <_Bfree>
 800d4ca:	2f00      	cmp	r7, #0
 800d4cc:	f43f aeb4 	beq.w	800d238 <_dtoa_r+0x6d8>
 800d4d0:	f1b8 0f00 	cmp.w	r8, #0
 800d4d4:	d005      	beq.n	800d4e2 <_dtoa_r+0x982>
 800d4d6:	45b8      	cmp	r8, r7
 800d4d8:	d003      	beq.n	800d4e2 <_dtoa_r+0x982>
 800d4da:	4641      	mov	r1, r8
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 fd07 	bl	800def0 <_Bfree>
 800d4e2:	4639      	mov	r1, r7
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f000 fd03 	bl	800def0 <_Bfree>
 800d4ea:	e6a5      	b.n	800d238 <_dtoa_r+0x6d8>
 800d4ec:	2600      	movs	r6, #0
 800d4ee:	4637      	mov	r7, r6
 800d4f0:	e7e1      	b.n	800d4b6 <_dtoa_r+0x956>
 800d4f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d4f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d4f8:	4637      	mov	r7, r6
 800d4fa:	e599      	b.n	800d030 <_dtoa_r+0x4d0>
 800d4fc:	9b08      	ldr	r3, [sp, #32]
 800d4fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 80fd 	beq.w	800d702 <_dtoa_r+0xba2>
 800d508:	2d00      	cmp	r5, #0
 800d50a:	dd05      	ble.n	800d518 <_dtoa_r+0x9b8>
 800d50c:	4639      	mov	r1, r7
 800d50e:	462a      	mov	r2, r5
 800d510:	4620      	mov	r0, r4
 800d512:	f000 ff09 	bl	800e328 <__lshift>
 800d516:	4607      	mov	r7, r0
 800d518:	9b06      	ldr	r3, [sp, #24]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d05c      	beq.n	800d5d8 <_dtoa_r+0xa78>
 800d51e:	6879      	ldr	r1, [r7, #4]
 800d520:	4620      	mov	r0, r4
 800d522:	f000 fca5 	bl	800de70 <_Balloc>
 800d526:	4605      	mov	r5, r0
 800d528:	b928      	cbnz	r0, 800d536 <_dtoa_r+0x9d6>
 800d52a:	4b80      	ldr	r3, [pc, #512]	; (800d72c <_dtoa_r+0xbcc>)
 800d52c:	4602      	mov	r2, r0
 800d52e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d532:	f7ff bb2e 	b.w	800cb92 <_dtoa_r+0x32>
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	3202      	adds	r2, #2
 800d53a:	0092      	lsls	r2, r2, #2
 800d53c:	f107 010c 	add.w	r1, r7, #12
 800d540:	300c      	adds	r0, #12
 800d542:	f000 fc87 	bl	800de54 <memcpy>
 800d546:	2201      	movs	r2, #1
 800d548:	4629      	mov	r1, r5
 800d54a:	4620      	mov	r0, r4
 800d54c:	f000 feec 	bl	800e328 <__lshift>
 800d550:	9b00      	ldr	r3, [sp, #0]
 800d552:	3301      	adds	r3, #1
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	9b00      	ldr	r3, [sp, #0]
 800d558:	444b      	add	r3, r9
 800d55a:	9307      	str	r3, [sp, #28]
 800d55c:	9b02      	ldr	r3, [sp, #8]
 800d55e:	f003 0301 	and.w	r3, r3, #1
 800d562:	46b8      	mov	r8, r7
 800d564:	9306      	str	r3, [sp, #24]
 800d566:	4607      	mov	r7, r0
 800d568:	9b01      	ldr	r3, [sp, #4]
 800d56a:	4631      	mov	r1, r6
 800d56c:	3b01      	subs	r3, #1
 800d56e:	4658      	mov	r0, fp
 800d570:	9302      	str	r3, [sp, #8]
 800d572:	f7ff fa67 	bl	800ca44 <quorem>
 800d576:	4603      	mov	r3, r0
 800d578:	3330      	adds	r3, #48	; 0x30
 800d57a:	9004      	str	r0, [sp, #16]
 800d57c:	4641      	mov	r1, r8
 800d57e:	4658      	mov	r0, fp
 800d580:	9308      	str	r3, [sp, #32]
 800d582:	f000 ff3d 	bl	800e400 <__mcmp>
 800d586:	463a      	mov	r2, r7
 800d588:	4681      	mov	r9, r0
 800d58a:	4631      	mov	r1, r6
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 ff53 	bl	800e438 <__mdiff>
 800d592:	68c2      	ldr	r2, [r0, #12]
 800d594:	9b08      	ldr	r3, [sp, #32]
 800d596:	4605      	mov	r5, r0
 800d598:	bb02      	cbnz	r2, 800d5dc <_dtoa_r+0xa7c>
 800d59a:	4601      	mov	r1, r0
 800d59c:	4658      	mov	r0, fp
 800d59e:	f000 ff2f 	bl	800e400 <__mcmp>
 800d5a2:	9b08      	ldr	r3, [sp, #32]
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d5ae:	f000 fc9f 	bl	800def0 <_Bfree>
 800d5b2:	9b05      	ldr	r3, [sp, #20]
 800d5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5b6:	9d01      	ldr	r5, [sp, #4]
 800d5b8:	ea43 0102 	orr.w	r1, r3, r2
 800d5bc:	9b06      	ldr	r3, [sp, #24]
 800d5be:	430b      	orrs	r3, r1
 800d5c0:	9b08      	ldr	r3, [sp, #32]
 800d5c2:	d10d      	bne.n	800d5e0 <_dtoa_r+0xa80>
 800d5c4:	2b39      	cmp	r3, #57	; 0x39
 800d5c6:	d029      	beq.n	800d61c <_dtoa_r+0xabc>
 800d5c8:	f1b9 0f00 	cmp.w	r9, #0
 800d5cc:	dd01      	ble.n	800d5d2 <_dtoa_r+0xa72>
 800d5ce:	9b04      	ldr	r3, [sp, #16]
 800d5d0:	3331      	adds	r3, #49	; 0x31
 800d5d2:	9a02      	ldr	r2, [sp, #8]
 800d5d4:	7013      	strb	r3, [r2, #0]
 800d5d6:	e774      	b.n	800d4c2 <_dtoa_r+0x962>
 800d5d8:	4638      	mov	r0, r7
 800d5da:	e7b9      	b.n	800d550 <_dtoa_r+0x9f0>
 800d5dc:	2201      	movs	r2, #1
 800d5de:	e7e2      	b.n	800d5a6 <_dtoa_r+0xa46>
 800d5e0:	f1b9 0f00 	cmp.w	r9, #0
 800d5e4:	db06      	blt.n	800d5f4 <_dtoa_r+0xa94>
 800d5e6:	9905      	ldr	r1, [sp, #20]
 800d5e8:	ea41 0909 	orr.w	r9, r1, r9
 800d5ec:	9906      	ldr	r1, [sp, #24]
 800d5ee:	ea59 0101 	orrs.w	r1, r9, r1
 800d5f2:	d120      	bne.n	800d636 <_dtoa_r+0xad6>
 800d5f4:	2a00      	cmp	r2, #0
 800d5f6:	ddec      	ble.n	800d5d2 <_dtoa_r+0xa72>
 800d5f8:	4659      	mov	r1, fp
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	9301      	str	r3, [sp, #4]
 800d600:	f000 fe92 	bl	800e328 <__lshift>
 800d604:	4631      	mov	r1, r6
 800d606:	4683      	mov	fp, r0
 800d608:	f000 fefa 	bl	800e400 <__mcmp>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	9b01      	ldr	r3, [sp, #4]
 800d610:	dc02      	bgt.n	800d618 <_dtoa_r+0xab8>
 800d612:	d1de      	bne.n	800d5d2 <_dtoa_r+0xa72>
 800d614:	07da      	lsls	r2, r3, #31
 800d616:	d5dc      	bpl.n	800d5d2 <_dtoa_r+0xa72>
 800d618:	2b39      	cmp	r3, #57	; 0x39
 800d61a:	d1d8      	bne.n	800d5ce <_dtoa_r+0xa6e>
 800d61c:	9a02      	ldr	r2, [sp, #8]
 800d61e:	2339      	movs	r3, #57	; 0x39
 800d620:	7013      	strb	r3, [r2, #0]
 800d622:	462b      	mov	r3, r5
 800d624:	461d      	mov	r5, r3
 800d626:	3b01      	subs	r3, #1
 800d628:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d62c:	2a39      	cmp	r2, #57	; 0x39
 800d62e:	d050      	beq.n	800d6d2 <_dtoa_r+0xb72>
 800d630:	3201      	adds	r2, #1
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	e745      	b.n	800d4c2 <_dtoa_r+0x962>
 800d636:	2a00      	cmp	r2, #0
 800d638:	dd03      	ble.n	800d642 <_dtoa_r+0xae2>
 800d63a:	2b39      	cmp	r3, #57	; 0x39
 800d63c:	d0ee      	beq.n	800d61c <_dtoa_r+0xabc>
 800d63e:	3301      	adds	r3, #1
 800d640:	e7c7      	b.n	800d5d2 <_dtoa_r+0xa72>
 800d642:	9a01      	ldr	r2, [sp, #4]
 800d644:	9907      	ldr	r1, [sp, #28]
 800d646:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d64a:	428a      	cmp	r2, r1
 800d64c:	d02a      	beq.n	800d6a4 <_dtoa_r+0xb44>
 800d64e:	4659      	mov	r1, fp
 800d650:	2300      	movs	r3, #0
 800d652:	220a      	movs	r2, #10
 800d654:	4620      	mov	r0, r4
 800d656:	f000 fc6d 	bl	800df34 <__multadd>
 800d65a:	45b8      	cmp	r8, r7
 800d65c:	4683      	mov	fp, r0
 800d65e:	f04f 0300 	mov.w	r3, #0
 800d662:	f04f 020a 	mov.w	r2, #10
 800d666:	4641      	mov	r1, r8
 800d668:	4620      	mov	r0, r4
 800d66a:	d107      	bne.n	800d67c <_dtoa_r+0xb1c>
 800d66c:	f000 fc62 	bl	800df34 <__multadd>
 800d670:	4680      	mov	r8, r0
 800d672:	4607      	mov	r7, r0
 800d674:	9b01      	ldr	r3, [sp, #4]
 800d676:	3301      	adds	r3, #1
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	e775      	b.n	800d568 <_dtoa_r+0xa08>
 800d67c:	f000 fc5a 	bl	800df34 <__multadd>
 800d680:	4639      	mov	r1, r7
 800d682:	4680      	mov	r8, r0
 800d684:	2300      	movs	r3, #0
 800d686:	220a      	movs	r2, #10
 800d688:	4620      	mov	r0, r4
 800d68a:	f000 fc53 	bl	800df34 <__multadd>
 800d68e:	4607      	mov	r7, r0
 800d690:	e7f0      	b.n	800d674 <_dtoa_r+0xb14>
 800d692:	f1b9 0f00 	cmp.w	r9, #0
 800d696:	9a00      	ldr	r2, [sp, #0]
 800d698:	bfcc      	ite	gt
 800d69a:	464d      	movgt	r5, r9
 800d69c:	2501      	movle	r5, #1
 800d69e:	4415      	add	r5, r2
 800d6a0:	f04f 0800 	mov.w	r8, #0
 800d6a4:	4659      	mov	r1, fp
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	9301      	str	r3, [sp, #4]
 800d6ac:	f000 fe3c 	bl	800e328 <__lshift>
 800d6b0:	4631      	mov	r1, r6
 800d6b2:	4683      	mov	fp, r0
 800d6b4:	f000 fea4 	bl	800e400 <__mcmp>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	dcb2      	bgt.n	800d622 <_dtoa_r+0xac2>
 800d6bc:	d102      	bne.n	800d6c4 <_dtoa_r+0xb64>
 800d6be:	9b01      	ldr	r3, [sp, #4]
 800d6c0:	07db      	lsls	r3, r3, #31
 800d6c2:	d4ae      	bmi.n	800d622 <_dtoa_r+0xac2>
 800d6c4:	462b      	mov	r3, r5
 800d6c6:	461d      	mov	r5, r3
 800d6c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6cc:	2a30      	cmp	r2, #48	; 0x30
 800d6ce:	d0fa      	beq.n	800d6c6 <_dtoa_r+0xb66>
 800d6d0:	e6f7      	b.n	800d4c2 <_dtoa_r+0x962>
 800d6d2:	9a00      	ldr	r2, [sp, #0]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d1a5      	bne.n	800d624 <_dtoa_r+0xac4>
 800d6d8:	f10a 0a01 	add.w	sl, sl, #1
 800d6dc:	2331      	movs	r3, #49	; 0x31
 800d6de:	e779      	b.n	800d5d4 <_dtoa_r+0xa74>
 800d6e0:	4b13      	ldr	r3, [pc, #76]	; (800d730 <_dtoa_r+0xbd0>)
 800d6e2:	f7ff baaf 	b.w	800cc44 <_dtoa_r+0xe4>
 800d6e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f47f aa86 	bne.w	800cbfa <_dtoa_r+0x9a>
 800d6ee:	4b11      	ldr	r3, [pc, #68]	; (800d734 <_dtoa_r+0xbd4>)
 800d6f0:	f7ff baa8 	b.w	800cc44 <_dtoa_r+0xe4>
 800d6f4:	f1b9 0f00 	cmp.w	r9, #0
 800d6f8:	dc03      	bgt.n	800d702 <_dtoa_r+0xba2>
 800d6fa:	9b05      	ldr	r3, [sp, #20]
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	f73f aec9 	bgt.w	800d494 <_dtoa_r+0x934>
 800d702:	9d00      	ldr	r5, [sp, #0]
 800d704:	4631      	mov	r1, r6
 800d706:	4658      	mov	r0, fp
 800d708:	f7ff f99c 	bl	800ca44 <quorem>
 800d70c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d710:	f805 3b01 	strb.w	r3, [r5], #1
 800d714:	9a00      	ldr	r2, [sp, #0]
 800d716:	1aaa      	subs	r2, r5, r2
 800d718:	4591      	cmp	r9, r2
 800d71a:	ddba      	ble.n	800d692 <_dtoa_r+0xb32>
 800d71c:	4659      	mov	r1, fp
 800d71e:	2300      	movs	r3, #0
 800d720:	220a      	movs	r2, #10
 800d722:	4620      	mov	r0, r4
 800d724:	f000 fc06 	bl	800df34 <__multadd>
 800d728:	4683      	mov	fp, r0
 800d72a:	e7eb      	b.n	800d704 <_dtoa_r+0xba4>
 800d72c:	08023e14 	.word	0x08023e14
 800d730:	08023c10 	.word	0x08023c10
 800d734:	08023d91 	.word	0x08023d91

0800d738 <rshift>:
 800d738:	6903      	ldr	r3, [r0, #16]
 800d73a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d73e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d742:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d746:	f100 0414 	add.w	r4, r0, #20
 800d74a:	dd45      	ble.n	800d7d8 <rshift+0xa0>
 800d74c:	f011 011f 	ands.w	r1, r1, #31
 800d750:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d754:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d758:	d10c      	bne.n	800d774 <rshift+0x3c>
 800d75a:	f100 0710 	add.w	r7, r0, #16
 800d75e:	4629      	mov	r1, r5
 800d760:	42b1      	cmp	r1, r6
 800d762:	d334      	bcc.n	800d7ce <rshift+0x96>
 800d764:	1a9b      	subs	r3, r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	1eea      	subs	r2, r5, #3
 800d76a:	4296      	cmp	r6, r2
 800d76c:	bf38      	it	cc
 800d76e:	2300      	movcc	r3, #0
 800d770:	4423      	add	r3, r4
 800d772:	e015      	b.n	800d7a0 <rshift+0x68>
 800d774:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d778:	f1c1 0820 	rsb	r8, r1, #32
 800d77c:	40cf      	lsrs	r7, r1
 800d77e:	f105 0e04 	add.w	lr, r5, #4
 800d782:	46a1      	mov	r9, r4
 800d784:	4576      	cmp	r6, lr
 800d786:	46f4      	mov	ip, lr
 800d788:	d815      	bhi.n	800d7b6 <rshift+0x7e>
 800d78a:	1a9b      	subs	r3, r3, r2
 800d78c:	009a      	lsls	r2, r3, #2
 800d78e:	3a04      	subs	r2, #4
 800d790:	3501      	adds	r5, #1
 800d792:	42ae      	cmp	r6, r5
 800d794:	bf38      	it	cc
 800d796:	2200      	movcc	r2, #0
 800d798:	18a3      	adds	r3, r4, r2
 800d79a:	50a7      	str	r7, [r4, r2]
 800d79c:	b107      	cbz	r7, 800d7a0 <rshift+0x68>
 800d79e:	3304      	adds	r3, #4
 800d7a0:	1b1a      	subs	r2, r3, r4
 800d7a2:	42a3      	cmp	r3, r4
 800d7a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7a8:	bf08      	it	eq
 800d7aa:	2300      	moveq	r3, #0
 800d7ac:	6102      	str	r2, [r0, #16]
 800d7ae:	bf08      	it	eq
 800d7b0:	6143      	streq	r3, [r0, #20]
 800d7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7b6:	f8dc c000 	ldr.w	ip, [ip]
 800d7ba:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7be:	ea4c 0707 	orr.w	r7, ip, r7
 800d7c2:	f849 7b04 	str.w	r7, [r9], #4
 800d7c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7ca:	40cf      	lsrs	r7, r1
 800d7cc:	e7da      	b.n	800d784 <rshift+0x4c>
 800d7ce:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7d2:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7d6:	e7c3      	b.n	800d760 <rshift+0x28>
 800d7d8:	4623      	mov	r3, r4
 800d7da:	e7e1      	b.n	800d7a0 <rshift+0x68>

0800d7dc <__hexdig_fun>:
 800d7dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d7e0:	2b09      	cmp	r3, #9
 800d7e2:	d802      	bhi.n	800d7ea <__hexdig_fun+0xe>
 800d7e4:	3820      	subs	r0, #32
 800d7e6:	b2c0      	uxtb	r0, r0
 800d7e8:	4770      	bx	lr
 800d7ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d7ee:	2b05      	cmp	r3, #5
 800d7f0:	d801      	bhi.n	800d7f6 <__hexdig_fun+0x1a>
 800d7f2:	3847      	subs	r0, #71	; 0x47
 800d7f4:	e7f7      	b.n	800d7e6 <__hexdig_fun+0xa>
 800d7f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d7fa:	2b05      	cmp	r3, #5
 800d7fc:	d801      	bhi.n	800d802 <__hexdig_fun+0x26>
 800d7fe:	3827      	subs	r0, #39	; 0x27
 800d800:	e7f1      	b.n	800d7e6 <__hexdig_fun+0xa>
 800d802:	2000      	movs	r0, #0
 800d804:	4770      	bx	lr
	...

0800d808 <__gethex>:
 800d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80c:	ed2d 8b02 	vpush	{d8}
 800d810:	b089      	sub	sp, #36	; 0x24
 800d812:	ee08 0a10 	vmov	s16, r0
 800d816:	9304      	str	r3, [sp, #16]
 800d818:	4bbc      	ldr	r3, [pc, #752]	; (800db0c <__gethex+0x304>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	9301      	str	r3, [sp, #4]
 800d81e:	4618      	mov	r0, r3
 800d820:	468b      	mov	fp, r1
 800d822:	4690      	mov	r8, r2
 800d824:	f7f2 fcdc 	bl	80001e0 <strlen>
 800d828:	9b01      	ldr	r3, [sp, #4]
 800d82a:	f8db 2000 	ldr.w	r2, [fp]
 800d82e:	4403      	add	r3, r0
 800d830:	4682      	mov	sl, r0
 800d832:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d836:	9305      	str	r3, [sp, #20]
 800d838:	1c93      	adds	r3, r2, #2
 800d83a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d83e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d842:	32fe      	adds	r2, #254	; 0xfe
 800d844:	18d1      	adds	r1, r2, r3
 800d846:	461f      	mov	r7, r3
 800d848:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d84c:	9100      	str	r1, [sp, #0]
 800d84e:	2830      	cmp	r0, #48	; 0x30
 800d850:	d0f8      	beq.n	800d844 <__gethex+0x3c>
 800d852:	f7ff ffc3 	bl	800d7dc <__hexdig_fun>
 800d856:	4604      	mov	r4, r0
 800d858:	2800      	cmp	r0, #0
 800d85a:	d13a      	bne.n	800d8d2 <__gethex+0xca>
 800d85c:	9901      	ldr	r1, [sp, #4]
 800d85e:	4652      	mov	r2, sl
 800d860:	4638      	mov	r0, r7
 800d862:	f001 f9ed 	bl	800ec40 <strncmp>
 800d866:	4605      	mov	r5, r0
 800d868:	2800      	cmp	r0, #0
 800d86a:	d168      	bne.n	800d93e <__gethex+0x136>
 800d86c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d870:	eb07 060a 	add.w	r6, r7, sl
 800d874:	f7ff ffb2 	bl	800d7dc <__hexdig_fun>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d062      	beq.n	800d942 <__gethex+0x13a>
 800d87c:	4633      	mov	r3, r6
 800d87e:	7818      	ldrb	r0, [r3, #0]
 800d880:	2830      	cmp	r0, #48	; 0x30
 800d882:	461f      	mov	r7, r3
 800d884:	f103 0301 	add.w	r3, r3, #1
 800d888:	d0f9      	beq.n	800d87e <__gethex+0x76>
 800d88a:	f7ff ffa7 	bl	800d7dc <__hexdig_fun>
 800d88e:	2301      	movs	r3, #1
 800d890:	fab0 f480 	clz	r4, r0
 800d894:	0964      	lsrs	r4, r4, #5
 800d896:	4635      	mov	r5, r6
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	463a      	mov	r2, r7
 800d89c:	4616      	mov	r6, r2
 800d89e:	3201      	adds	r2, #1
 800d8a0:	7830      	ldrb	r0, [r6, #0]
 800d8a2:	f7ff ff9b 	bl	800d7dc <__hexdig_fun>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d1f8      	bne.n	800d89c <__gethex+0x94>
 800d8aa:	9901      	ldr	r1, [sp, #4]
 800d8ac:	4652      	mov	r2, sl
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f001 f9c6 	bl	800ec40 <strncmp>
 800d8b4:	b980      	cbnz	r0, 800d8d8 <__gethex+0xd0>
 800d8b6:	b94d      	cbnz	r5, 800d8cc <__gethex+0xc4>
 800d8b8:	eb06 050a 	add.w	r5, r6, sl
 800d8bc:	462a      	mov	r2, r5
 800d8be:	4616      	mov	r6, r2
 800d8c0:	3201      	adds	r2, #1
 800d8c2:	7830      	ldrb	r0, [r6, #0]
 800d8c4:	f7ff ff8a 	bl	800d7dc <__hexdig_fun>
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	d1f8      	bne.n	800d8be <__gethex+0xb6>
 800d8cc:	1bad      	subs	r5, r5, r6
 800d8ce:	00ad      	lsls	r5, r5, #2
 800d8d0:	e004      	b.n	800d8dc <__gethex+0xd4>
 800d8d2:	2400      	movs	r4, #0
 800d8d4:	4625      	mov	r5, r4
 800d8d6:	e7e0      	b.n	800d89a <__gethex+0x92>
 800d8d8:	2d00      	cmp	r5, #0
 800d8da:	d1f7      	bne.n	800d8cc <__gethex+0xc4>
 800d8dc:	7833      	ldrb	r3, [r6, #0]
 800d8de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d8e2:	2b50      	cmp	r3, #80	; 0x50
 800d8e4:	d13b      	bne.n	800d95e <__gethex+0x156>
 800d8e6:	7873      	ldrb	r3, [r6, #1]
 800d8e8:	2b2b      	cmp	r3, #43	; 0x2b
 800d8ea:	d02c      	beq.n	800d946 <__gethex+0x13e>
 800d8ec:	2b2d      	cmp	r3, #45	; 0x2d
 800d8ee:	d02e      	beq.n	800d94e <__gethex+0x146>
 800d8f0:	1c71      	adds	r1, r6, #1
 800d8f2:	f04f 0900 	mov.w	r9, #0
 800d8f6:	7808      	ldrb	r0, [r1, #0]
 800d8f8:	f7ff ff70 	bl	800d7dc <__hexdig_fun>
 800d8fc:	1e43      	subs	r3, r0, #1
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b18      	cmp	r3, #24
 800d902:	d82c      	bhi.n	800d95e <__gethex+0x156>
 800d904:	f1a0 0210 	sub.w	r2, r0, #16
 800d908:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d90c:	f7ff ff66 	bl	800d7dc <__hexdig_fun>
 800d910:	1e43      	subs	r3, r0, #1
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b18      	cmp	r3, #24
 800d916:	d91d      	bls.n	800d954 <__gethex+0x14c>
 800d918:	f1b9 0f00 	cmp.w	r9, #0
 800d91c:	d000      	beq.n	800d920 <__gethex+0x118>
 800d91e:	4252      	negs	r2, r2
 800d920:	4415      	add	r5, r2
 800d922:	f8cb 1000 	str.w	r1, [fp]
 800d926:	b1e4      	cbz	r4, 800d962 <__gethex+0x15a>
 800d928:	9b00      	ldr	r3, [sp, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	bf14      	ite	ne
 800d92e:	2700      	movne	r7, #0
 800d930:	2706      	moveq	r7, #6
 800d932:	4638      	mov	r0, r7
 800d934:	b009      	add	sp, #36	; 0x24
 800d936:	ecbd 8b02 	vpop	{d8}
 800d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93e:	463e      	mov	r6, r7
 800d940:	4625      	mov	r5, r4
 800d942:	2401      	movs	r4, #1
 800d944:	e7ca      	b.n	800d8dc <__gethex+0xd4>
 800d946:	f04f 0900 	mov.w	r9, #0
 800d94a:	1cb1      	adds	r1, r6, #2
 800d94c:	e7d3      	b.n	800d8f6 <__gethex+0xee>
 800d94e:	f04f 0901 	mov.w	r9, #1
 800d952:	e7fa      	b.n	800d94a <__gethex+0x142>
 800d954:	230a      	movs	r3, #10
 800d956:	fb03 0202 	mla	r2, r3, r2, r0
 800d95a:	3a10      	subs	r2, #16
 800d95c:	e7d4      	b.n	800d908 <__gethex+0x100>
 800d95e:	4631      	mov	r1, r6
 800d960:	e7df      	b.n	800d922 <__gethex+0x11a>
 800d962:	1bf3      	subs	r3, r6, r7
 800d964:	3b01      	subs	r3, #1
 800d966:	4621      	mov	r1, r4
 800d968:	2b07      	cmp	r3, #7
 800d96a:	dc0b      	bgt.n	800d984 <__gethex+0x17c>
 800d96c:	ee18 0a10 	vmov	r0, s16
 800d970:	f000 fa7e 	bl	800de70 <_Balloc>
 800d974:	4604      	mov	r4, r0
 800d976:	b940      	cbnz	r0, 800d98a <__gethex+0x182>
 800d978:	4b65      	ldr	r3, [pc, #404]	; (800db10 <__gethex+0x308>)
 800d97a:	4602      	mov	r2, r0
 800d97c:	21de      	movs	r1, #222	; 0xde
 800d97e:	4865      	ldr	r0, [pc, #404]	; (800db14 <__gethex+0x30c>)
 800d980:	f001 f97e 	bl	800ec80 <__assert_func>
 800d984:	3101      	adds	r1, #1
 800d986:	105b      	asrs	r3, r3, #1
 800d988:	e7ee      	b.n	800d968 <__gethex+0x160>
 800d98a:	f100 0914 	add.w	r9, r0, #20
 800d98e:	f04f 0b00 	mov.w	fp, #0
 800d992:	f1ca 0301 	rsb	r3, sl, #1
 800d996:	f8cd 9008 	str.w	r9, [sp, #8]
 800d99a:	f8cd b000 	str.w	fp, [sp]
 800d99e:	9306      	str	r3, [sp, #24]
 800d9a0:	42b7      	cmp	r7, r6
 800d9a2:	d340      	bcc.n	800da26 <__gethex+0x21e>
 800d9a4:	9802      	ldr	r0, [sp, #8]
 800d9a6:	9b00      	ldr	r3, [sp, #0]
 800d9a8:	f840 3b04 	str.w	r3, [r0], #4
 800d9ac:	eba0 0009 	sub.w	r0, r0, r9
 800d9b0:	1080      	asrs	r0, r0, #2
 800d9b2:	0146      	lsls	r6, r0, #5
 800d9b4:	6120      	str	r0, [r4, #16]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 fb50 	bl	800e05c <__hi0bits>
 800d9bc:	1a30      	subs	r0, r6, r0
 800d9be:	f8d8 6000 	ldr.w	r6, [r8]
 800d9c2:	42b0      	cmp	r0, r6
 800d9c4:	dd63      	ble.n	800da8e <__gethex+0x286>
 800d9c6:	1b87      	subs	r7, r0, r6
 800d9c8:	4639      	mov	r1, r7
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	f000 feea 	bl	800e7a4 <__any_on>
 800d9d0:	4682      	mov	sl, r0
 800d9d2:	b1a8      	cbz	r0, 800da00 <__gethex+0x1f8>
 800d9d4:	1e7b      	subs	r3, r7, #1
 800d9d6:	1159      	asrs	r1, r3, #5
 800d9d8:	f003 021f 	and.w	r2, r3, #31
 800d9dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d9e0:	f04f 0a01 	mov.w	sl, #1
 800d9e4:	fa0a f202 	lsl.w	r2, sl, r2
 800d9e8:	420a      	tst	r2, r1
 800d9ea:	d009      	beq.n	800da00 <__gethex+0x1f8>
 800d9ec:	4553      	cmp	r3, sl
 800d9ee:	dd05      	ble.n	800d9fc <__gethex+0x1f4>
 800d9f0:	1eb9      	subs	r1, r7, #2
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f000 fed6 	bl	800e7a4 <__any_on>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d145      	bne.n	800da88 <__gethex+0x280>
 800d9fc:	f04f 0a02 	mov.w	sl, #2
 800da00:	4639      	mov	r1, r7
 800da02:	4620      	mov	r0, r4
 800da04:	f7ff fe98 	bl	800d738 <rshift>
 800da08:	443d      	add	r5, r7
 800da0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da0e:	42ab      	cmp	r3, r5
 800da10:	da4c      	bge.n	800daac <__gethex+0x2a4>
 800da12:	ee18 0a10 	vmov	r0, s16
 800da16:	4621      	mov	r1, r4
 800da18:	f000 fa6a 	bl	800def0 <_Bfree>
 800da1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da1e:	2300      	movs	r3, #0
 800da20:	6013      	str	r3, [r2, #0]
 800da22:	27a3      	movs	r7, #163	; 0xa3
 800da24:	e785      	b.n	800d932 <__gethex+0x12a>
 800da26:	1e73      	subs	r3, r6, #1
 800da28:	9a05      	ldr	r2, [sp, #20]
 800da2a:	9303      	str	r3, [sp, #12]
 800da2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da30:	4293      	cmp	r3, r2
 800da32:	d019      	beq.n	800da68 <__gethex+0x260>
 800da34:	f1bb 0f20 	cmp.w	fp, #32
 800da38:	d107      	bne.n	800da4a <__gethex+0x242>
 800da3a:	9b02      	ldr	r3, [sp, #8]
 800da3c:	9a00      	ldr	r2, [sp, #0]
 800da3e:	f843 2b04 	str.w	r2, [r3], #4
 800da42:	9302      	str	r3, [sp, #8]
 800da44:	2300      	movs	r3, #0
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	469b      	mov	fp, r3
 800da4a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800da4e:	f7ff fec5 	bl	800d7dc <__hexdig_fun>
 800da52:	9b00      	ldr	r3, [sp, #0]
 800da54:	f000 000f 	and.w	r0, r0, #15
 800da58:	fa00 f00b 	lsl.w	r0, r0, fp
 800da5c:	4303      	orrs	r3, r0
 800da5e:	9300      	str	r3, [sp, #0]
 800da60:	f10b 0b04 	add.w	fp, fp, #4
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	e00d      	b.n	800da84 <__gethex+0x27c>
 800da68:	9b03      	ldr	r3, [sp, #12]
 800da6a:	9a06      	ldr	r2, [sp, #24]
 800da6c:	4413      	add	r3, r2
 800da6e:	42bb      	cmp	r3, r7
 800da70:	d3e0      	bcc.n	800da34 <__gethex+0x22c>
 800da72:	4618      	mov	r0, r3
 800da74:	9901      	ldr	r1, [sp, #4]
 800da76:	9307      	str	r3, [sp, #28]
 800da78:	4652      	mov	r2, sl
 800da7a:	f001 f8e1 	bl	800ec40 <strncmp>
 800da7e:	9b07      	ldr	r3, [sp, #28]
 800da80:	2800      	cmp	r0, #0
 800da82:	d1d7      	bne.n	800da34 <__gethex+0x22c>
 800da84:	461e      	mov	r6, r3
 800da86:	e78b      	b.n	800d9a0 <__gethex+0x198>
 800da88:	f04f 0a03 	mov.w	sl, #3
 800da8c:	e7b8      	b.n	800da00 <__gethex+0x1f8>
 800da8e:	da0a      	bge.n	800daa6 <__gethex+0x29e>
 800da90:	1a37      	subs	r7, r6, r0
 800da92:	4621      	mov	r1, r4
 800da94:	ee18 0a10 	vmov	r0, s16
 800da98:	463a      	mov	r2, r7
 800da9a:	f000 fc45 	bl	800e328 <__lshift>
 800da9e:	1bed      	subs	r5, r5, r7
 800daa0:	4604      	mov	r4, r0
 800daa2:	f100 0914 	add.w	r9, r0, #20
 800daa6:	f04f 0a00 	mov.w	sl, #0
 800daaa:	e7ae      	b.n	800da0a <__gethex+0x202>
 800daac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dab0:	42a8      	cmp	r0, r5
 800dab2:	dd72      	ble.n	800db9a <__gethex+0x392>
 800dab4:	1b45      	subs	r5, r0, r5
 800dab6:	42ae      	cmp	r6, r5
 800dab8:	dc36      	bgt.n	800db28 <__gethex+0x320>
 800daba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d02a      	beq.n	800db18 <__gethex+0x310>
 800dac2:	2b03      	cmp	r3, #3
 800dac4:	d02c      	beq.n	800db20 <__gethex+0x318>
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d115      	bne.n	800daf6 <__gethex+0x2ee>
 800daca:	42ae      	cmp	r6, r5
 800dacc:	d113      	bne.n	800daf6 <__gethex+0x2ee>
 800dace:	2e01      	cmp	r6, #1
 800dad0:	d10b      	bne.n	800daea <__gethex+0x2e2>
 800dad2:	9a04      	ldr	r2, [sp, #16]
 800dad4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dad8:	6013      	str	r3, [r2, #0]
 800dada:	2301      	movs	r3, #1
 800dadc:	6123      	str	r3, [r4, #16]
 800dade:	f8c9 3000 	str.w	r3, [r9]
 800dae2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dae4:	2762      	movs	r7, #98	; 0x62
 800dae6:	601c      	str	r4, [r3, #0]
 800dae8:	e723      	b.n	800d932 <__gethex+0x12a>
 800daea:	1e71      	subs	r1, r6, #1
 800daec:	4620      	mov	r0, r4
 800daee:	f000 fe59 	bl	800e7a4 <__any_on>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d1ed      	bne.n	800dad2 <__gethex+0x2ca>
 800daf6:	ee18 0a10 	vmov	r0, s16
 800dafa:	4621      	mov	r1, r4
 800dafc:	f000 f9f8 	bl	800def0 <_Bfree>
 800db00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db02:	2300      	movs	r3, #0
 800db04:	6013      	str	r3, [r2, #0]
 800db06:	2750      	movs	r7, #80	; 0x50
 800db08:	e713      	b.n	800d932 <__gethex+0x12a>
 800db0a:	bf00      	nop
 800db0c:	08023e90 	.word	0x08023e90
 800db10:	08023e14 	.word	0x08023e14
 800db14:	08023e25 	.word	0x08023e25
 800db18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1eb      	bne.n	800daf6 <__gethex+0x2ee>
 800db1e:	e7d8      	b.n	800dad2 <__gethex+0x2ca>
 800db20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1d5      	bne.n	800dad2 <__gethex+0x2ca>
 800db26:	e7e6      	b.n	800daf6 <__gethex+0x2ee>
 800db28:	1e6f      	subs	r7, r5, #1
 800db2a:	f1ba 0f00 	cmp.w	sl, #0
 800db2e:	d131      	bne.n	800db94 <__gethex+0x38c>
 800db30:	b127      	cbz	r7, 800db3c <__gethex+0x334>
 800db32:	4639      	mov	r1, r7
 800db34:	4620      	mov	r0, r4
 800db36:	f000 fe35 	bl	800e7a4 <__any_on>
 800db3a:	4682      	mov	sl, r0
 800db3c:	117b      	asrs	r3, r7, #5
 800db3e:	2101      	movs	r1, #1
 800db40:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800db44:	f007 071f 	and.w	r7, r7, #31
 800db48:	fa01 f707 	lsl.w	r7, r1, r7
 800db4c:	421f      	tst	r7, r3
 800db4e:	4629      	mov	r1, r5
 800db50:	4620      	mov	r0, r4
 800db52:	bf18      	it	ne
 800db54:	f04a 0a02 	orrne.w	sl, sl, #2
 800db58:	1b76      	subs	r6, r6, r5
 800db5a:	f7ff fded 	bl	800d738 <rshift>
 800db5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db62:	2702      	movs	r7, #2
 800db64:	f1ba 0f00 	cmp.w	sl, #0
 800db68:	d048      	beq.n	800dbfc <__gethex+0x3f4>
 800db6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db6e:	2b02      	cmp	r3, #2
 800db70:	d015      	beq.n	800db9e <__gethex+0x396>
 800db72:	2b03      	cmp	r3, #3
 800db74:	d017      	beq.n	800dba6 <__gethex+0x39e>
 800db76:	2b01      	cmp	r3, #1
 800db78:	d109      	bne.n	800db8e <__gethex+0x386>
 800db7a:	f01a 0f02 	tst.w	sl, #2
 800db7e:	d006      	beq.n	800db8e <__gethex+0x386>
 800db80:	f8d9 0000 	ldr.w	r0, [r9]
 800db84:	ea4a 0a00 	orr.w	sl, sl, r0
 800db88:	f01a 0f01 	tst.w	sl, #1
 800db8c:	d10e      	bne.n	800dbac <__gethex+0x3a4>
 800db8e:	f047 0710 	orr.w	r7, r7, #16
 800db92:	e033      	b.n	800dbfc <__gethex+0x3f4>
 800db94:	f04f 0a01 	mov.w	sl, #1
 800db98:	e7d0      	b.n	800db3c <__gethex+0x334>
 800db9a:	2701      	movs	r7, #1
 800db9c:	e7e2      	b.n	800db64 <__gethex+0x35c>
 800db9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dba0:	f1c3 0301 	rsb	r3, r3, #1
 800dba4:	9315      	str	r3, [sp, #84]	; 0x54
 800dba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d0f0      	beq.n	800db8e <__gethex+0x386>
 800dbac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbb0:	f104 0314 	add.w	r3, r4, #20
 800dbb4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dbb8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dbbc:	f04f 0c00 	mov.w	ip, #0
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbc6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dbca:	d01c      	beq.n	800dc06 <__gethex+0x3fe>
 800dbcc:	3201      	adds	r2, #1
 800dbce:	6002      	str	r2, [r0, #0]
 800dbd0:	2f02      	cmp	r7, #2
 800dbd2:	f104 0314 	add.w	r3, r4, #20
 800dbd6:	d13f      	bne.n	800dc58 <__gethex+0x450>
 800dbd8:	f8d8 2000 	ldr.w	r2, [r8]
 800dbdc:	3a01      	subs	r2, #1
 800dbde:	42b2      	cmp	r2, r6
 800dbe0:	d10a      	bne.n	800dbf8 <__gethex+0x3f0>
 800dbe2:	1171      	asrs	r1, r6, #5
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbea:	f006 061f 	and.w	r6, r6, #31
 800dbee:	fa02 f606 	lsl.w	r6, r2, r6
 800dbf2:	421e      	tst	r6, r3
 800dbf4:	bf18      	it	ne
 800dbf6:	4617      	movne	r7, r2
 800dbf8:	f047 0720 	orr.w	r7, r7, #32
 800dbfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dbfe:	601c      	str	r4, [r3, #0]
 800dc00:	9b04      	ldr	r3, [sp, #16]
 800dc02:	601d      	str	r5, [r3, #0]
 800dc04:	e695      	b.n	800d932 <__gethex+0x12a>
 800dc06:	4299      	cmp	r1, r3
 800dc08:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc0c:	d8d8      	bhi.n	800dbc0 <__gethex+0x3b8>
 800dc0e:	68a3      	ldr	r3, [r4, #8]
 800dc10:	459b      	cmp	fp, r3
 800dc12:	db19      	blt.n	800dc48 <__gethex+0x440>
 800dc14:	6861      	ldr	r1, [r4, #4]
 800dc16:	ee18 0a10 	vmov	r0, s16
 800dc1a:	3101      	adds	r1, #1
 800dc1c:	f000 f928 	bl	800de70 <_Balloc>
 800dc20:	4681      	mov	r9, r0
 800dc22:	b918      	cbnz	r0, 800dc2c <__gethex+0x424>
 800dc24:	4b1a      	ldr	r3, [pc, #104]	; (800dc90 <__gethex+0x488>)
 800dc26:	4602      	mov	r2, r0
 800dc28:	2184      	movs	r1, #132	; 0x84
 800dc2a:	e6a8      	b.n	800d97e <__gethex+0x176>
 800dc2c:	6922      	ldr	r2, [r4, #16]
 800dc2e:	3202      	adds	r2, #2
 800dc30:	f104 010c 	add.w	r1, r4, #12
 800dc34:	0092      	lsls	r2, r2, #2
 800dc36:	300c      	adds	r0, #12
 800dc38:	f000 f90c 	bl	800de54 <memcpy>
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	ee18 0a10 	vmov	r0, s16
 800dc42:	f000 f955 	bl	800def0 <_Bfree>
 800dc46:	464c      	mov	r4, r9
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc50:	6122      	str	r2, [r4, #16]
 800dc52:	2201      	movs	r2, #1
 800dc54:	615a      	str	r2, [r3, #20]
 800dc56:	e7bb      	b.n	800dbd0 <__gethex+0x3c8>
 800dc58:	6922      	ldr	r2, [r4, #16]
 800dc5a:	455a      	cmp	r2, fp
 800dc5c:	dd0b      	ble.n	800dc76 <__gethex+0x46e>
 800dc5e:	2101      	movs	r1, #1
 800dc60:	4620      	mov	r0, r4
 800dc62:	f7ff fd69 	bl	800d738 <rshift>
 800dc66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc6a:	3501      	adds	r5, #1
 800dc6c:	42ab      	cmp	r3, r5
 800dc6e:	f6ff aed0 	blt.w	800da12 <__gethex+0x20a>
 800dc72:	2701      	movs	r7, #1
 800dc74:	e7c0      	b.n	800dbf8 <__gethex+0x3f0>
 800dc76:	f016 061f 	ands.w	r6, r6, #31
 800dc7a:	d0fa      	beq.n	800dc72 <__gethex+0x46a>
 800dc7c:	449a      	add	sl, r3
 800dc7e:	f1c6 0620 	rsb	r6, r6, #32
 800dc82:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800dc86:	f000 f9e9 	bl	800e05c <__hi0bits>
 800dc8a:	42b0      	cmp	r0, r6
 800dc8c:	dbe7      	blt.n	800dc5e <__gethex+0x456>
 800dc8e:	e7f0      	b.n	800dc72 <__gethex+0x46a>
 800dc90:	08023e14 	.word	0x08023e14

0800dc94 <L_shift>:
 800dc94:	f1c2 0208 	rsb	r2, r2, #8
 800dc98:	0092      	lsls	r2, r2, #2
 800dc9a:	b570      	push	{r4, r5, r6, lr}
 800dc9c:	f1c2 0620 	rsb	r6, r2, #32
 800dca0:	6843      	ldr	r3, [r0, #4]
 800dca2:	6804      	ldr	r4, [r0, #0]
 800dca4:	fa03 f506 	lsl.w	r5, r3, r6
 800dca8:	432c      	orrs	r4, r5
 800dcaa:	40d3      	lsrs	r3, r2
 800dcac:	6004      	str	r4, [r0, #0]
 800dcae:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcb2:	4288      	cmp	r0, r1
 800dcb4:	d3f4      	bcc.n	800dca0 <L_shift+0xc>
 800dcb6:	bd70      	pop	{r4, r5, r6, pc}

0800dcb8 <__match>:
 800dcb8:	b530      	push	{r4, r5, lr}
 800dcba:	6803      	ldr	r3, [r0, #0]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcc2:	b914      	cbnz	r4, 800dcca <__match+0x12>
 800dcc4:	6003      	str	r3, [r0, #0]
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	bd30      	pop	{r4, r5, pc}
 800dcca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dcd2:	2d19      	cmp	r5, #25
 800dcd4:	bf98      	it	ls
 800dcd6:	3220      	addls	r2, #32
 800dcd8:	42a2      	cmp	r2, r4
 800dcda:	d0f0      	beq.n	800dcbe <__match+0x6>
 800dcdc:	2000      	movs	r0, #0
 800dcde:	e7f3      	b.n	800dcc8 <__match+0x10>

0800dce0 <__hexnan>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	680b      	ldr	r3, [r1, #0]
 800dce6:	6801      	ldr	r1, [r0, #0]
 800dce8:	115e      	asrs	r6, r3, #5
 800dcea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dcee:	f013 031f 	ands.w	r3, r3, #31
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	bf18      	it	ne
 800dcf6:	3604      	addne	r6, #4
 800dcf8:	2500      	movs	r5, #0
 800dcfa:	1f37      	subs	r7, r6, #4
 800dcfc:	4682      	mov	sl, r0
 800dcfe:	4690      	mov	r8, r2
 800dd00:	9301      	str	r3, [sp, #4]
 800dd02:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd06:	46b9      	mov	r9, r7
 800dd08:	463c      	mov	r4, r7
 800dd0a:	9502      	str	r5, [sp, #8]
 800dd0c:	46ab      	mov	fp, r5
 800dd0e:	784a      	ldrb	r2, [r1, #1]
 800dd10:	1c4b      	adds	r3, r1, #1
 800dd12:	9303      	str	r3, [sp, #12]
 800dd14:	b342      	cbz	r2, 800dd68 <__hexnan+0x88>
 800dd16:	4610      	mov	r0, r2
 800dd18:	9105      	str	r1, [sp, #20]
 800dd1a:	9204      	str	r2, [sp, #16]
 800dd1c:	f7ff fd5e 	bl	800d7dc <__hexdig_fun>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d14f      	bne.n	800ddc4 <__hexnan+0xe4>
 800dd24:	9a04      	ldr	r2, [sp, #16]
 800dd26:	9905      	ldr	r1, [sp, #20]
 800dd28:	2a20      	cmp	r2, #32
 800dd2a:	d818      	bhi.n	800dd5e <__hexnan+0x7e>
 800dd2c:	9b02      	ldr	r3, [sp, #8]
 800dd2e:	459b      	cmp	fp, r3
 800dd30:	dd13      	ble.n	800dd5a <__hexnan+0x7a>
 800dd32:	454c      	cmp	r4, r9
 800dd34:	d206      	bcs.n	800dd44 <__hexnan+0x64>
 800dd36:	2d07      	cmp	r5, #7
 800dd38:	dc04      	bgt.n	800dd44 <__hexnan+0x64>
 800dd3a:	462a      	mov	r2, r5
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f7ff ffa8 	bl	800dc94 <L_shift>
 800dd44:	4544      	cmp	r4, r8
 800dd46:	d950      	bls.n	800ddea <__hexnan+0x10a>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f1a4 0904 	sub.w	r9, r4, #4
 800dd4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd52:	f8cd b008 	str.w	fp, [sp, #8]
 800dd56:	464c      	mov	r4, r9
 800dd58:	461d      	mov	r5, r3
 800dd5a:	9903      	ldr	r1, [sp, #12]
 800dd5c:	e7d7      	b.n	800dd0e <__hexnan+0x2e>
 800dd5e:	2a29      	cmp	r2, #41	; 0x29
 800dd60:	d156      	bne.n	800de10 <__hexnan+0x130>
 800dd62:	3102      	adds	r1, #2
 800dd64:	f8ca 1000 	str.w	r1, [sl]
 800dd68:	f1bb 0f00 	cmp.w	fp, #0
 800dd6c:	d050      	beq.n	800de10 <__hexnan+0x130>
 800dd6e:	454c      	cmp	r4, r9
 800dd70:	d206      	bcs.n	800dd80 <__hexnan+0xa0>
 800dd72:	2d07      	cmp	r5, #7
 800dd74:	dc04      	bgt.n	800dd80 <__hexnan+0xa0>
 800dd76:	462a      	mov	r2, r5
 800dd78:	4649      	mov	r1, r9
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f7ff ff8a 	bl	800dc94 <L_shift>
 800dd80:	4544      	cmp	r4, r8
 800dd82:	d934      	bls.n	800ddee <__hexnan+0x10e>
 800dd84:	f1a8 0204 	sub.w	r2, r8, #4
 800dd88:	4623      	mov	r3, r4
 800dd8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dd92:	429f      	cmp	r7, r3
 800dd94:	d2f9      	bcs.n	800dd8a <__hexnan+0xaa>
 800dd96:	1b3b      	subs	r3, r7, r4
 800dd98:	f023 0303 	bic.w	r3, r3, #3
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	3401      	adds	r4, #1
 800dda0:	3e03      	subs	r6, #3
 800dda2:	42b4      	cmp	r4, r6
 800dda4:	bf88      	it	hi
 800dda6:	2304      	movhi	r3, #4
 800dda8:	4443      	add	r3, r8
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f843 2b04 	str.w	r2, [r3], #4
 800ddb0:	429f      	cmp	r7, r3
 800ddb2:	d2fb      	bcs.n	800ddac <__hexnan+0xcc>
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	b91b      	cbnz	r3, 800ddc0 <__hexnan+0xe0>
 800ddb8:	4547      	cmp	r7, r8
 800ddba:	d127      	bne.n	800de0c <__hexnan+0x12c>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	603b      	str	r3, [r7, #0]
 800ddc0:	2005      	movs	r0, #5
 800ddc2:	e026      	b.n	800de12 <__hexnan+0x132>
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	2d08      	cmp	r5, #8
 800ddc8:	f10b 0b01 	add.w	fp, fp, #1
 800ddcc:	dd06      	ble.n	800dddc <__hexnan+0xfc>
 800ddce:	4544      	cmp	r4, r8
 800ddd0:	d9c3      	bls.n	800dd5a <__hexnan+0x7a>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddd8:	2501      	movs	r5, #1
 800ddda:	3c04      	subs	r4, #4
 800dddc:	6822      	ldr	r2, [r4, #0]
 800ddde:	f000 000f 	and.w	r0, r0, #15
 800dde2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dde6:	6022      	str	r2, [r4, #0]
 800dde8:	e7b7      	b.n	800dd5a <__hexnan+0x7a>
 800ddea:	2508      	movs	r5, #8
 800ddec:	e7b5      	b.n	800dd5a <__hexnan+0x7a>
 800ddee:	9b01      	ldr	r3, [sp, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d0df      	beq.n	800ddb4 <__hexnan+0xd4>
 800ddf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf8:	f1c3 0320 	rsb	r3, r3, #32
 800ddfc:	fa22 f303 	lsr.w	r3, r2, r3
 800de00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de04:	401a      	ands	r2, r3
 800de06:	f846 2c04 	str.w	r2, [r6, #-4]
 800de0a:	e7d3      	b.n	800ddb4 <__hexnan+0xd4>
 800de0c:	3f04      	subs	r7, #4
 800de0e:	e7d1      	b.n	800ddb4 <__hexnan+0xd4>
 800de10:	2004      	movs	r0, #4
 800de12:	b007      	add	sp, #28
 800de14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de18 <_localeconv_r>:
 800de18:	4800      	ldr	r0, [pc, #0]	; (800de1c <_localeconv_r+0x4>)
 800de1a:	4770      	bx	lr
 800de1c:	20002b50 	.word	0x20002b50

0800de20 <malloc>:
 800de20:	4b02      	ldr	r3, [pc, #8]	; (800de2c <malloc+0xc>)
 800de22:	4601      	mov	r1, r0
 800de24:	6818      	ldr	r0, [r3, #0]
 800de26:	f000 bd3d 	b.w	800e8a4 <_malloc_r>
 800de2a:	bf00      	nop
 800de2c:	200029f8 	.word	0x200029f8

0800de30 <__ascii_mbtowc>:
 800de30:	b082      	sub	sp, #8
 800de32:	b901      	cbnz	r1, 800de36 <__ascii_mbtowc+0x6>
 800de34:	a901      	add	r1, sp, #4
 800de36:	b142      	cbz	r2, 800de4a <__ascii_mbtowc+0x1a>
 800de38:	b14b      	cbz	r3, 800de4e <__ascii_mbtowc+0x1e>
 800de3a:	7813      	ldrb	r3, [r2, #0]
 800de3c:	600b      	str	r3, [r1, #0]
 800de3e:	7812      	ldrb	r2, [r2, #0]
 800de40:	1e10      	subs	r0, r2, #0
 800de42:	bf18      	it	ne
 800de44:	2001      	movne	r0, #1
 800de46:	b002      	add	sp, #8
 800de48:	4770      	bx	lr
 800de4a:	4610      	mov	r0, r2
 800de4c:	e7fb      	b.n	800de46 <__ascii_mbtowc+0x16>
 800de4e:	f06f 0001 	mvn.w	r0, #1
 800de52:	e7f8      	b.n	800de46 <__ascii_mbtowc+0x16>

0800de54 <memcpy>:
 800de54:	440a      	add	r2, r1
 800de56:	4291      	cmp	r1, r2
 800de58:	f100 33ff 	add.w	r3, r0, #4294967295
 800de5c:	d100      	bne.n	800de60 <memcpy+0xc>
 800de5e:	4770      	bx	lr
 800de60:	b510      	push	{r4, lr}
 800de62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de6a:	4291      	cmp	r1, r2
 800de6c:	d1f9      	bne.n	800de62 <memcpy+0xe>
 800de6e:	bd10      	pop	{r4, pc}

0800de70 <_Balloc>:
 800de70:	b570      	push	{r4, r5, r6, lr}
 800de72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de74:	4604      	mov	r4, r0
 800de76:	460d      	mov	r5, r1
 800de78:	b976      	cbnz	r6, 800de98 <_Balloc+0x28>
 800de7a:	2010      	movs	r0, #16
 800de7c:	f7ff ffd0 	bl	800de20 <malloc>
 800de80:	4602      	mov	r2, r0
 800de82:	6260      	str	r0, [r4, #36]	; 0x24
 800de84:	b920      	cbnz	r0, 800de90 <_Balloc+0x20>
 800de86:	4b18      	ldr	r3, [pc, #96]	; (800dee8 <_Balloc+0x78>)
 800de88:	4818      	ldr	r0, [pc, #96]	; (800deec <_Balloc+0x7c>)
 800de8a:	2166      	movs	r1, #102	; 0x66
 800de8c:	f000 fef8 	bl	800ec80 <__assert_func>
 800de90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de94:	6006      	str	r6, [r0, #0]
 800de96:	60c6      	str	r6, [r0, #12]
 800de98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800de9a:	68f3      	ldr	r3, [r6, #12]
 800de9c:	b183      	cbz	r3, 800dec0 <_Balloc+0x50>
 800de9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dea6:	b9b8      	cbnz	r0, 800ded8 <_Balloc+0x68>
 800dea8:	2101      	movs	r1, #1
 800deaa:	fa01 f605 	lsl.w	r6, r1, r5
 800deae:	1d72      	adds	r2, r6, #5
 800deb0:	0092      	lsls	r2, r2, #2
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 fc97 	bl	800e7e6 <_calloc_r>
 800deb8:	b160      	cbz	r0, 800ded4 <_Balloc+0x64>
 800deba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800debe:	e00e      	b.n	800dede <_Balloc+0x6e>
 800dec0:	2221      	movs	r2, #33	; 0x21
 800dec2:	2104      	movs	r1, #4
 800dec4:	4620      	mov	r0, r4
 800dec6:	f000 fc8e 	bl	800e7e6 <_calloc_r>
 800deca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800decc:	60f0      	str	r0, [r6, #12]
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e4      	bne.n	800de9e <_Balloc+0x2e>
 800ded4:	2000      	movs	r0, #0
 800ded6:	bd70      	pop	{r4, r5, r6, pc}
 800ded8:	6802      	ldr	r2, [r0, #0]
 800deda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dede:	2300      	movs	r3, #0
 800dee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dee4:	e7f7      	b.n	800ded6 <_Balloc+0x66>
 800dee6:	bf00      	nop
 800dee8:	08023d9e 	.word	0x08023d9e
 800deec:	08023ea4 	.word	0x08023ea4

0800def0 <_Bfree>:
 800def0:	b570      	push	{r4, r5, r6, lr}
 800def2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800def4:	4605      	mov	r5, r0
 800def6:	460c      	mov	r4, r1
 800def8:	b976      	cbnz	r6, 800df18 <_Bfree+0x28>
 800defa:	2010      	movs	r0, #16
 800defc:	f7ff ff90 	bl	800de20 <malloc>
 800df00:	4602      	mov	r2, r0
 800df02:	6268      	str	r0, [r5, #36]	; 0x24
 800df04:	b920      	cbnz	r0, 800df10 <_Bfree+0x20>
 800df06:	4b09      	ldr	r3, [pc, #36]	; (800df2c <_Bfree+0x3c>)
 800df08:	4809      	ldr	r0, [pc, #36]	; (800df30 <_Bfree+0x40>)
 800df0a:	218a      	movs	r1, #138	; 0x8a
 800df0c:	f000 feb8 	bl	800ec80 <__assert_func>
 800df10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df14:	6006      	str	r6, [r0, #0]
 800df16:	60c6      	str	r6, [r0, #12]
 800df18:	b13c      	cbz	r4, 800df2a <_Bfree+0x3a>
 800df1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df1c:	6862      	ldr	r2, [r4, #4]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df24:	6021      	str	r1, [r4, #0]
 800df26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df2a:	bd70      	pop	{r4, r5, r6, pc}
 800df2c:	08023d9e 	.word	0x08023d9e
 800df30:	08023ea4 	.word	0x08023ea4

0800df34 <__multadd>:
 800df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df38:	690e      	ldr	r6, [r1, #16]
 800df3a:	4607      	mov	r7, r0
 800df3c:	4698      	mov	r8, r3
 800df3e:	460c      	mov	r4, r1
 800df40:	f101 0014 	add.w	r0, r1, #20
 800df44:	2300      	movs	r3, #0
 800df46:	6805      	ldr	r5, [r0, #0]
 800df48:	b2a9      	uxth	r1, r5
 800df4a:	fb02 8101 	mla	r1, r2, r1, r8
 800df4e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800df52:	0c2d      	lsrs	r5, r5, #16
 800df54:	fb02 c505 	mla	r5, r2, r5, ip
 800df58:	b289      	uxth	r1, r1
 800df5a:	3301      	adds	r3, #1
 800df5c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800df60:	429e      	cmp	r6, r3
 800df62:	f840 1b04 	str.w	r1, [r0], #4
 800df66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800df6a:	dcec      	bgt.n	800df46 <__multadd+0x12>
 800df6c:	f1b8 0f00 	cmp.w	r8, #0
 800df70:	d022      	beq.n	800dfb8 <__multadd+0x84>
 800df72:	68a3      	ldr	r3, [r4, #8]
 800df74:	42b3      	cmp	r3, r6
 800df76:	dc19      	bgt.n	800dfac <__multadd+0x78>
 800df78:	6861      	ldr	r1, [r4, #4]
 800df7a:	4638      	mov	r0, r7
 800df7c:	3101      	adds	r1, #1
 800df7e:	f7ff ff77 	bl	800de70 <_Balloc>
 800df82:	4605      	mov	r5, r0
 800df84:	b928      	cbnz	r0, 800df92 <__multadd+0x5e>
 800df86:	4602      	mov	r2, r0
 800df88:	4b0d      	ldr	r3, [pc, #52]	; (800dfc0 <__multadd+0x8c>)
 800df8a:	480e      	ldr	r0, [pc, #56]	; (800dfc4 <__multadd+0x90>)
 800df8c:	21b5      	movs	r1, #181	; 0xb5
 800df8e:	f000 fe77 	bl	800ec80 <__assert_func>
 800df92:	6922      	ldr	r2, [r4, #16]
 800df94:	3202      	adds	r2, #2
 800df96:	f104 010c 	add.w	r1, r4, #12
 800df9a:	0092      	lsls	r2, r2, #2
 800df9c:	300c      	adds	r0, #12
 800df9e:	f7ff ff59 	bl	800de54 <memcpy>
 800dfa2:	4621      	mov	r1, r4
 800dfa4:	4638      	mov	r0, r7
 800dfa6:	f7ff ffa3 	bl	800def0 <_Bfree>
 800dfaa:	462c      	mov	r4, r5
 800dfac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dfb0:	3601      	adds	r6, #1
 800dfb2:	f8c3 8014 	str.w	r8, [r3, #20]
 800dfb6:	6126      	str	r6, [r4, #16]
 800dfb8:	4620      	mov	r0, r4
 800dfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfbe:	bf00      	nop
 800dfc0:	08023e14 	.word	0x08023e14
 800dfc4:	08023ea4 	.word	0x08023ea4

0800dfc8 <__s2b>:
 800dfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfcc:	460c      	mov	r4, r1
 800dfce:	4615      	mov	r5, r2
 800dfd0:	461f      	mov	r7, r3
 800dfd2:	2209      	movs	r2, #9
 800dfd4:	3308      	adds	r3, #8
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfdc:	2100      	movs	r1, #0
 800dfde:	2201      	movs	r2, #1
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	db09      	blt.n	800dff8 <__s2b+0x30>
 800dfe4:	4630      	mov	r0, r6
 800dfe6:	f7ff ff43 	bl	800de70 <_Balloc>
 800dfea:	b940      	cbnz	r0, 800dffe <__s2b+0x36>
 800dfec:	4602      	mov	r2, r0
 800dfee:	4b19      	ldr	r3, [pc, #100]	; (800e054 <__s2b+0x8c>)
 800dff0:	4819      	ldr	r0, [pc, #100]	; (800e058 <__s2b+0x90>)
 800dff2:	21ce      	movs	r1, #206	; 0xce
 800dff4:	f000 fe44 	bl	800ec80 <__assert_func>
 800dff8:	0052      	lsls	r2, r2, #1
 800dffa:	3101      	adds	r1, #1
 800dffc:	e7f0      	b.n	800dfe0 <__s2b+0x18>
 800dffe:	9b08      	ldr	r3, [sp, #32]
 800e000:	6143      	str	r3, [r0, #20]
 800e002:	2d09      	cmp	r5, #9
 800e004:	f04f 0301 	mov.w	r3, #1
 800e008:	6103      	str	r3, [r0, #16]
 800e00a:	dd16      	ble.n	800e03a <__s2b+0x72>
 800e00c:	f104 0909 	add.w	r9, r4, #9
 800e010:	46c8      	mov	r8, r9
 800e012:	442c      	add	r4, r5
 800e014:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e018:	4601      	mov	r1, r0
 800e01a:	3b30      	subs	r3, #48	; 0x30
 800e01c:	220a      	movs	r2, #10
 800e01e:	4630      	mov	r0, r6
 800e020:	f7ff ff88 	bl	800df34 <__multadd>
 800e024:	45a0      	cmp	r8, r4
 800e026:	d1f5      	bne.n	800e014 <__s2b+0x4c>
 800e028:	f1a5 0408 	sub.w	r4, r5, #8
 800e02c:	444c      	add	r4, r9
 800e02e:	1b2d      	subs	r5, r5, r4
 800e030:	1963      	adds	r3, r4, r5
 800e032:	42bb      	cmp	r3, r7
 800e034:	db04      	blt.n	800e040 <__s2b+0x78>
 800e036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e03a:	340a      	adds	r4, #10
 800e03c:	2509      	movs	r5, #9
 800e03e:	e7f6      	b.n	800e02e <__s2b+0x66>
 800e040:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e044:	4601      	mov	r1, r0
 800e046:	3b30      	subs	r3, #48	; 0x30
 800e048:	220a      	movs	r2, #10
 800e04a:	4630      	mov	r0, r6
 800e04c:	f7ff ff72 	bl	800df34 <__multadd>
 800e050:	e7ee      	b.n	800e030 <__s2b+0x68>
 800e052:	bf00      	nop
 800e054:	08023e14 	.word	0x08023e14
 800e058:	08023ea4 	.word	0x08023ea4

0800e05c <__hi0bits>:
 800e05c:	0c03      	lsrs	r3, r0, #16
 800e05e:	041b      	lsls	r3, r3, #16
 800e060:	b9d3      	cbnz	r3, 800e098 <__hi0bits+0x3c>
 800e062:	0400      	lsls	r0, r0, #16
 800e064:	2310      	movs	r3, #16
 800e066:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e06a:	bf04      	itt	eq
 800e06c:	0200      	lsleq	r0, r0, #8
 800e06e:	3308      	addeq	r3, #8
 800e070:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e074:	bf04      	itt	eq
 800e076:	0100      	lsleq	r0, r0, #4
 800e078:	3304      	addeq	r3, #4
 800e07a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e07e:	bf04      	itt	eq
 800e080:	0080      	lsleq	r0, r0, #2
 800e082:	3302      	addeq	r3, #2
 800e084:	2800      	cmp	r0, #0
 800e086:	db05      	blt.n	800e094 <__hi0bits+0x38>
 800e088:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e08c:	f103 0301 	add.w	r3, r3, #1
 800e090:	bf08      	it	eq
 800e092:	2320      	moveq	r3, #32
 800e094:	4618      	mov	r0, r3
 800e096:	4770      	bx	lr
 800e098:	2300      	movs	r3, #0
 800e09a:	e7e4      	b.n	800e066 <__hi0bits+0xa>

0800e09c <__lo0bits>:
 800e09c:	6803      	ldr	r3, [r0, #0]
 800e09e:	f013 0207 	ands.w	r2, r3, #7
 800e0a2:	4601      	mov	r1, r0
 800e0a4:	d00b      	beq.n	800e0be <__lo0bits+0x22>
 800e0a6:	07da      	lsls	r2, r3, #31
 800e0a8:	d424      	bmi.n	800e0f4 <__lo0bits+0x58>
 800e0aa:	0798      	lsls	r0, r3, #30
 800e0ac:	bf49      	itett	mi
 800e0ae:	085b      	lsrmi	r3, r3, #1
 800e0b0:	089b      	lsrpl	r3, r3, #2
 800e0b2:	2001      	movmi	r0, #1
 800e0b4:	600b      	strmi	r3, [r1, #0]
 800e0b6:	bf5c      	itt	pl
 800e0b8:	600b      	strpl	r3, [r1, #0]
 800e0ba:	2002      	movpl	r0, #2
 800e0bc:	4770      	bx	lr
 800e0be:	b298      	uxth	r0, r3
 800e0c0:	b9b0      	cbnz	r0, 800e0f0 <__lo0bits+0x54>
 800e0c2:	0c1b      	lsrs	r3, r3, #16
 800e0c4:	2010      	movs	r0, #16
 800e0c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e0ca:	bf04      	itt	eq
 800e0cc:	0a1b      	lsreq	r3, r3, #8
 800e0ce:	3008      	addeq	r0, #8
 800e0d0:	071a      	lsls	r2, r3, #28
 800e0d2:	bf04      	itt	eq
 800e0d4:	091b      	lsreq	r3, r3, #4
 800e0d6:	3004      	addeq	r0, #4
 800e0d8:	079a      	lsls	r2, r3, #30
 800e0da:	bf04      	itt	eq
 800e0dc:	089b      	lsreq	r3, r3, #2
 800e0de:	3002      	addeq	r0, #2
 800e0e0:	07da      	lsls	r2, r3, #31
 800e0e2:	d403      	bmi.n	800e0ec <__lo0bits+0x50>
 800e0e4:	085b      	lsrs	r3, r3, #1
 800e0e6:	f100 0001 	add.w	r0, r0, #1
 800e0ea:	d005      	beq.n	800e0f8 <__lo0bits+0x5c>
 800e0ec:	600b      	str	r3, [r1, #0]
 800e0ee:	4770      	bx	lr
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	e7e8      	b.n	800e0c6 <__lo0bits+0x2a>
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	4770      	bx	lr
 800e0f8:	2020      	movs	r0, #32
 800e0fa:	4770      	bx	lr

0800e0fc <__i2b>:
 800e0fc:	b510      	push	{r4, lr}
 800e0fe:	460c      	mov	r4, r1
 800e100:	2101      	movs	r1, #1
 800e102:	f7ff feb5 	bl	800de70 <_Balloc>
 800e106:	4602      	mov	r2, r0
 800e108:	b928      	cbnz	r0, 800e116 <__i2b+0x1a>
 800e10a:	4b05      	ldr	r3, [pc, #20]	; (800e120 <__i2b+0x24>)
 800e10c:	4805      	ldr	r0, [pc, #20]	; (800e124 <__i2b+0x28>)
 800e10e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e112:	f000 fdb5 	bl	800ec80 <__assert_func>
 800e116:	2301      	movs	r3, #1
 800e118:	6144      	str	r4, [r0, #20]
 800e11a:	6103      	str	r3, [r0, #16]
 800e11c:	bd10      	pop	{r4, pc}
 800e11e:	bf00      	nop
 800e120:	08023e14 	.word	0x08023e14
 800e124:	08023ea4 	.word	0x08023ea4

0800e128 <__multiply>:
 800e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12c:	4614      	mov	r4, r2
 800e12e:	690a      	ldr	r2, [r1, #16]
 800e130:	6923      	ldr	r3, [r4, #16]
 800e132:	429a      	cmp	r2, r3
 800e134:	bfb8      	it	lt
 800e136:	460b      	movlt	r3, r1
 800e138:	460d      	mov	r5, r1
 800e13a:	bfbc      	itt	lt
 800e13c:	4625      	movlt	r5, r4
 800e13e:	461c      	movlt	r4, r3
 800e140:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e144:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e148:	68ab      	ldr	r3, [r5, #8]
 800e14a:	6869      	ldr	r1, [r5, #4]
 800e14c:	eb0a 0709 	add.w	r7, sl, r9
 800e150:	42bb      	cmp	r3, r7
 800e152:	b085      	sub	sp, #20
 800e154:	bfb8      	it	lt
 800e156:	3101      	addlt	r1, #1
 800e158:	f7ff fe8a 	bl	800de70 <_Balloc>
 800e15c:	b930      	cbnz	r0, 800e16c <__multiply+0x44>
 800e15e:	4602      	mov	r2, r0
 800e160:	4b42      	ldr	r3, [pc, #264]	; (800e26c <__multiply+0x144>)
 800e162:	4843      	ldr	r0, [pc, #268]	; (800e270 <__multiply+0x148>)
 800e164:	f240 115d 	movw	r1, #349	; 0x15d
 800e168:	f000 fd8a 	bl	800ec80 <__assert_func>
 800e16c:	f100 0614 	add.w	r6, r0, #20
 800e170:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e174:	4633      	mov	r3, r6
 800e176:	2200      	movs	r2, #0
 800e178:	4543      	cmp	r3, r8
 800e17a:	d31e      	bcc.n	800e1ba <__multiply+0x92>
 800e17c:	f105 0c14 	add.w	ip, r5, #20
 800e180:	f104 0314 	add.w	r3, r4, #20
 800e184:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e188:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e18c:	9202      	str	r2, [sp, #8]
 800e18e:	ebac 0205 	sub.w	r2, ip, r5
 800e192:	3a15      	subs	r2, #21
 800e194:	f022 0203 	bic.w	r2, r2, #3
 800e198:	3204      	adds	r2, #4
 800e19a:	f105 0115 	add.w	r1, r5, #21
 800e19e:	458c      	cmp	ip, r1
 800e1a0:	bf38      	it	cc
 800e1a2:	2204      	movcc	r2, #4
 800e1a4:	9201      	str	r2, [sp, #4]
 800e1a6:	9a02      	ldr	r2, [sp, #8]
 800e1a8:	9303      	str	r3, [sp, #12]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d808      	bhi.n	800e1c0 <__multiply+0x98>
 800e1ae:	2f00      	cmp	r7, #0
 800e1b0:	dc55      	bgt.n	800e25e <__multiply+0x136>
 800e1b2:	6107      	str	r7, [r0, #16]
 800e1b4:	b005      	add	sp, #20
 800e1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ba:	f843 2b04 	str.w	r2, [r3], #4
 800e1be:	e7db      	b.n	800e178 <__multiply+0x50>
 800e1c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800e1c4:	f1ba 0f00 	cmp.w	sl, #0
 800e1c8:	d020      	beq.n	800e20c <__multiply+0xe4>
 800e1ca:	f105 0e14 	add.w	lr, r5, #20
 800e1ce:	46b1      	mov	r9, r6
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e1d6:	f8d9 b000 	ldr.w	fp, [r9]
 800e1da:	b2a1      	uxth	r1, r4
 800e1dc:	fa1f fb8b 	uxth.w	fp, fp
 800e1e0:	fb0a b101 	mla	r1, sl, r1, fp
 800e1e4:	4411      	add	r1, r2
 800e1e6:	f8d9 2000 	ldr.w	r2, [r9]
 800e1ea:	0c24      	lsrs	r4, r4, #16
 800e1ec:	0c12      	lsrs	r2, r2, #16
 800e1ee:	fb0a 2404 	mla	r4, sl, r4, r2
 800e1f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e1f6:	b289      	uxth	r1, r1
 800e1f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e1fc:	45f4      	cmp	ip, lr
 800e1fe:	f849 1b04 	str.w	r1, [r9], #4
 800e202:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e206:	d8e4      	bhi.n	800e1d2 <__multiply+0xaa>
 800e208:	9901      	ldr	r1, [sp, #4]
 800e20a:	5072      	str	r2, [r6, r1]
 800e20c:	9a03      	ldr	r2, [sp, #12]
 800e20e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e212:	3304      	adds	r3, #4
 800e214:	f1b9 0f00 	cmp.w	r9, #0
 800e218:	d01f      	beq.n	800e25a <__multiply+0x132>
 800e21a:	6834      	ldr	r4, [r6, #0]
 800e21c:	f105 0114 	add.w	r1, r5, #20
 800e220:	46b6      	mov	lr, r6
 800e222:	f04f 0a00 	mov.w	sl, #0
 800e226:	880a      	ldrh	r2, [r1, #0]
 800e228:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e22c:	fb09 b202 	mla	r2, r9, r2, fp
 800e230:	4492      	add	sl, r2
 800e232:	b2a4      	uxth	r4, r4
 800e234:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e238:	f84e 4b04 	str.w	r4, [lr], #4
 800e23c:	f851 4b04 	ldr.w	r4, [r1], #4
 800e240:	f8be 2000 	ldrh.w	r2, [lr]
 800e244:	0c24      	lsrs	r4, r4, #16
 800e246:	fb09 2404 	mla	r4, r9, r4, r2
 800e24a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e24e:	458c      	cmp	ip, r1
 800e250:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e254:	d8e7      	bhi.n	800e226 <__multiply+0xfe>
 800e256:	9a01      	ldr	r2, [sp, #4]
 800e258:	50b4      	str	r4, [r6, r2]
 800e25a:	3604      	adds	r6, #4
 800e25c:	e7a3      	b.n	800e1a6 <__multiply+0x7e>
 800e25e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1a5      	bne.n	800e1b2 <__multiply+0x8a>
 800e266:	3f01      	subs	r7, #1
 800e268:	e7a1      	b.n	800e1ae <__multiply+0x86>
 800e26a:	bf00      	nop
 800e26c:	08023e14 	.word	0x08023e14
 800e270:	08023ea4 	.word	0x08023ea4

0800e274 <__pow5mult>:
 800e274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e278:	4615      	mov	r5, r2
 800e27a:	f012 0203 	ands.w	r2, r2, #3
 800e27e:	4606      	mov	r6, r0
 800e280:	460f      	mov	r7, r1
 800e282:	d007      	beq.n	800e294 <__pow5mult+0x20>
 800e284:	4c25      	ldr	r4, [pc, #148]	; (800e31c <__pow5mult+0xa8>)
 800e286:	3a01      	subs	r2, #1
 800e288:	2300      	movs	r3, #0
 800e28a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e28e:	f7ff fe51 	bl	800df34 <__multadd>
 800e292:	4607      	mov	r7, r0
 800e294:	10ad      	asrs	r5, r5, #2
 800e296:	d03d      	beq.n	800e314 <__pow5mult+0xa0>
 800e298:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e29a:	b97c      	cbnz	r4, 800e2bc <__pow5mult+0x48>
 800e29c:	2010      	movs	r0, #16
 800e29e:	f7ff fdbf 	bl	800de20 <malloc>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	6270      	str	r0, [r6, #36]	; 0x24
 800e2a6:	b928      	cbnz	r0, 800e2b4 <__pow5mult+0x40>
 800e2a8:	4b1d      	ldr	r3, [pc, #116]	; (800e320 <__pow5mult+0xac>)
 800e2aa:	481e      	ldr	r0, [pc, #120]	; (800e324 <__pow5mult+0xb0>)
 800e2ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e2b0:	f000 fce6 	bl	800ec80 <__assert_func>
 800e2b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2b8:	6004      	str	r4, [r0, #0]
 800e2ba:	60c4      	str	r4, [r0, #12]
 800e2bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e2c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2c4:	b94c      	cbnz	r4, 800e2da <__pow5mult+0x66>
 800e2c6:	f240 2171 	movw	r1, #625	; 0x271
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	f7ff ff16 	bl	800e0fc <__i2b>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	f04f 0900 	mov.w	r9, #0
 800e2de:	07eb      	lsls	r3, r5, #31
 800e2e0:	d50a      	bpl.n	800e2f8 <__pow5mult+0x84>
 800e2e2:	4639      	mov	r1, r7
 800e2e4:	4622      	mov	r2, r4
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	f7ff ff1e 	bl	800e128 <__multiply>
 800e2ec:	4639      	mov	r1, r7
 800e2ee:	4680      	mov	r8, r0
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f7ff fdfd 	bl	800def0 <_Bfree>
 800e2f6:	4647      	mov	r7, r8
 800e2f8:	106d      	asrs	r5, r5, #1
 800e2fa:	d00b      	beq.n	800e314 <__pow5mult+0xa0>
 800e2fc:	6820      	ldr	r0, [r4, #0]
 800e2fe:	b938      	cbnz	r0, 800e310 <__pow5mult+0x9c>
 800e300:	4622      	mov	r2, r4
 800e302:	4621      	mov	r1, r4
 800e304:	4630      	mov	r0, r6
 800e306:	f7ff ff0f 	bl	800e128 <__multiply>
 800e30a:	6020      	str	r0, [r4, #0]
 800e30c:	f8c0 9000 	str.w	r9, [r0]
 800e310:	4604      	mov	r4, r0
 800e312:	e7e4      	b.n	800e2de <__pow5mult+0x6a>
 800e314:	4638      	mov	r0, r7
 800e316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e31a:	bf00      	nop
 800e31c:	08023ff8 	.word	0x08023ff8
 800e320:	08023d9e 	.word	0x08023d9e
 800e324:	08023ea4 	.word	0x08023ea4

0800e328 <__lshift>:
 800e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e32c:	460c      	mov	r4, r1
 800e32e:	6849      	ldr	r1, [r1, #4]
 800e330:	6923      	ldr	r3, [r4, #16]
 800e332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e336:	68a3      	ldr	r3, [r4, #8]
 800e338:	4607      	mov	r7, r0
 800e33a:	4691      	mov	r9, r2
 800e33c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e340:	f108 0601 	add.w	r6, r8, #1
 800e344:	42b3      	cmp	r3, r6
 800e346:	db0b      	blt.n	800e360 <__lshift+0x38>
 800e348:	4638      	mov	r0, r7
 800e34a:	f7ff fd91 	bl	800de70 <_Balloc>
 800e34e:	4605      	mov	r5, r0
 800e350:	b948      	cbnz	r0, 800e366 <__lshift+0x3e>
 800e352:	4602      	mov	r2, r0
 800e354:	4b28      	ldr	r3, [pc, #160]	; (800e3f8 <__lshift+0xd0>)
 800e356:	4829      	ldr	r0, [pc, #164]	; (800e3fc <__lshift+0xd4>)
 800e358:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e35c:	f000 fc90 	bl	800ec80 <__assert_func>
 800e360:	3101      	adds	r1, #1
 800e362:	005b      	lsls	r3, r3, #1
 800e364:	e7ee      	b.n	800e344 <__lshift+0x1c>
 800e366:	2300      	movs	r3, #0
 800e368:	f100 0114 	add.w	r1, r0, #20
 800e36c:	f100 0210 	add.w	r2, r0, #16
 800e370:	4618      	mov	r0, r3
 800e372:	4553      	cmp	r3, sl
 800e374:	db33      	blt.n	800e3de <__lshift+0xb6>
 800e376:	6920      	ldr	r0, [r4, #16]
 800e378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e37c:	f104 0314 	add.w	r3, r4, #20
 800e380:	f019 091f 	ands.w	r9, r9, #31
 800e384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e38c:	d02b      	beq.n	800e3e6 <__lshift+0xbe>
 800e38e:	f1c9 0e20 	rsb	lr, r9, #32
 800e392:	468a      	mov	sl, r1
 800e394:	2200      	movs	r2, #0
 800e396:	6818      	ldr	r0, [r3, #0]
 800e398:	fa00 f009 	lsl.w	r0, r0, r9
 800e39c:	4302      	orrs	r2, r0
 800e39e:	f84a 2b04 	str.w	r2, [sl], #4
 800e3a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3a6:	459c      	cmp	ip, r3
 800e3a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3ac:	d8f3      	bhi.n	800e396 <__lshift+0x6e>
 800e3ae:	ebac 0304 	sub.w	r3, ip, r4
 800e3b2:	3b15      	subs	r3, #21
 800e3b4:	f023 0303 	bic.w	r3, r3, #3
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	f104 0015 	add.w	r0, r4, #21
 800e3be:	4584      	cmp	ip, r0
 800e3c0:	bf38      	it	cc
 800e3c2:	2304      	movcc	r3, #4
 800e3c4:	50ca      	str	r2, [r1, r3]
 800e3c6:	b10a      	cbz	r2, 800e3cc <__lshift+0xa4>
 800e3c8:	f108 0602 	add.w	r6, r8, #2
 800e3cc:	3e01      	subs	r6, #1
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	612e      	str	r6, [r5, #16]
 800e3d2:	4621      	mov	r1, r4
 800e3d4:	f7ff fd8c 	bl	800def0 <_Bfree>
 800e3d8:	4628      	mov	r0, r5
 800e3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3de:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	e7c5      	b.n	800e372 <__lshift+0x4a>
 800e3e6:	3904      	subs	r1, #4
 800e3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3f0:	459c      	cmp	ip, r3
 800e3f2:	d8f9      	bhi.n	800e3e8 <__lshift+0xc0>
 800e3f4:	e7ea      	b.n	800e3cc <__lshift+0xa4>
 800e3f6:	bf00      	nop
 800e3f8:	08023e14 	.word	0x08023e14
 800e3fc:	08023ea4 	.word	0x08023ea4

0800e400 <__mcmp>:
 800e400:	b530      	push	{r4, r5, lr}
 800e402:	6902      	ldr	r2, [r0, #16]
 800e404:	690c      	ldr	r4, [r1, #16]
 800e406:	1b12      	subs	r2, r2, r4
 800e408:	d10e      	bne.n	800e428 <__mcmp+0x28>
 800e40a:	f100 0314 	add.w	r3, r0, #20
 800e40e:	3114      	adds	r1, #20
 800e410:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e414:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e418:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e41c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e420:	42a5      	cmp	r5, r4
 800e422:	d003      	beq.n	800e42c <__mcmp+0x2c>
 800e424:	d305      	bcc.n	800e432 <__mcmp+0x32>
 800e426:	2201      	movs	r2, #1
 800e428:	4610      	mov	r0, r2
 800e42a:	bd30      	pop	{r4, r5, pc}
 800e42c:	4283      	cmp	r3, r0
 800e42e:	d3f3      	bcc.n	800e418 <__mcmp+0x18>
 800e430:	e7fa      	b.n	800e428 <__mcmp+0x28>
 800e432:	f04f 32ff 	mov.w	r2, #4294967295
 800e436:	e7f7      	b.n	800e428 <__mcmp+0x28>

0800e438 <__mdiff>:
 800e438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	460c      	mov	r4, r1
 800e43e:	4606      	mov	r6, r0
 800e440:	4611      	mov	r1, r2
 800e442:	4620      	mov	r0, r4
 800e444:	4617      	mov	r7, r2
 800e446:	f7ff ffdb 	bl	800e400 <__mcmp>
 800e44a:	1e05      	subs	r5, r0, #0
 800e44c:	d110      	bne.n	800e470 <__mdiff+0x38>
 800e44e:	4629      	mov	r1, r5
 800e450:	4630      	mov	r0, r6
 800e452:	f7ff fd0d 	bl	800de70 <_Balloc>
 800e456:	b930      	cbnz	r0, 800e466 <__mdiff+0x2e>
 800e458:	4b39      	ldr	r3, [pc, #228]	; (800e540 <__mdiff+0x108>)
 800e45a:	4602      	mov	r2, r0
 800e45c:	f240 2132 	movw	r1, #562	; 0x232
 800e460:	4838      	ldr	r0, [pc, #224]	; (800e544 <__mdiff+0x10c>)
 800e462:	f000 fc0d 	bl	800ec80 <__assert_func>
 800e466:	2301      	movs	r3, #1
 800e468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e46c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e470:	bfa4      	itt	ge
 800e472:	463b      	movge	r3, r7
 800e474:	4627      	movge	r7, r4
 800e476:	4630      	mov	r0, r6
 800e478:	6879      	ldr	r1, [r7, #4]
 800e47a:	bfa6      	itte	ge
 800e47c:	461c      	movge	r4, r3
 800e47e:	2500      	movge	r5, #0
 800e480:	2501      	movlt	r5, #1
 800e482:	f7ff fcf5 	bl	800de70 <_Balloc>
 800e486:	b920      	cbnz	r0, 800e492 <__mdiff+0x5a>
 800e488:	4b2d      	ldr	r3, [pc, #180]	; (800e540 <__mdiff+0x108>)
 800e48a:	4602      	mov	r2, r0
 800e48c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e490:	e7e6      	b.n	800e460 <__mdiff+0x28>
 800e492:	693e      	ldr	r6, [r7, #16]
 800e494:	60c5      	str	r5, [r0, #12]
 800e496:	6925      	ldr	r5, [r4, #16]
 800e498:	f107 0114 	add.w	r1, r7, #20
 800e49c:	f104 0914 	add.w	r9, r4, #20
 800e4a0:	f100 0e14 	add.w	lr, r0, #20
 800e4a4:	f107 0210 	add.w	r2, r7, #16
 800e4a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e4ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e4b0:	46f2      	mov	sl, lr
 800e4b2:	2700      	movs	r7, #0
 800e4b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e4b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e4bc:	fa1f f883 	uxth.w	r8, r3
 800e4c0:	fa17 f78b 	uxtah	r7, r7, fp
 800e4c4:	0c1b      	lsrs	r3, r3, #16
 800e4c6:	eba7 0808 	sub.w	r8, r7, r8
 800e4ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e4ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e4d2:	fa1f f888 	uxth.w	r8, r8
 800e4d6:	141f      	asrs	r7, r3, #16
 800e4d8:	454d      	cmp	r5, r9
 800e4da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e4de:	f84a 3b04 	str.w	r3, [sl], #4
 800e4e2:	d8e7      	bhi.n	800e4b4 <__mdiff+0x7c>
 800e4e4:	1b2b      	subs	r3, r5, r4
 800e4e6:	3b15      	subs	r3, #21
 800e4e8:	f023 0303 	bic.w	r3, r3, #3
 800e4ec:	3304      	adds	r3, #4
 800e4ee:	3415      	adds	r4, #21
 800e4f0:	42a5      	cmp	r5, r4
 800e4f2:	bf38      	it	cc
 800e4f4:	2304      	movcc	r3, #4
 800e4f6:	4419      	add	r1, r3
 800e4f8:	4473      	add	r3, lr
 800e4fa:	469e      	mov	lr, r3
 800e4fc:	460d      	mov	r5, r1
 800e4fe:	4565      	cmp	r5, ip
 800e500:	d30e      	bcc.n	800e520 <__mdiff+0xe8>
 800e502:	f10c 0203 	add.w	r2, ip, #3
 800e506:	1a52      	subs	r2, r2, r1
 800e508:	f022 0203 	bic.w	r2, r2, #3
 800e50c:	3903      	subs	r1, #3
 800e50e:	458c      	cmp	ip, r1
 800e510:	bf38      	it	cc
 800e512:	2200      	movcc	r2, #0
 800e514:	441a      	add	r2, r3
 800e516:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e51a:	b17b      	cbz	r3, 800e53c <__mdiff+0x104>
 800e51c:	6106      	str	r6, [r0, #16]
 800e51e:	e7a5      	b.n	800e46c <__mdiff+0x34>
 800e520:	f855 8b04 	ldr.w	r8, [r5], #4
 800e524:	fa17 f488 	uxtah	r4, r7, r8
 800e528:	1422      	asrs	r2, r4, #16
 800e52a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e52e:	b2a4      	uxth	r4, r4
 800e530:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e534:	f84e 4b04 	str.w	r4, [lr], #4
 800e538:	1417      	asrs	r7, r2, #16
 800e53a:	e7e0      	b.n	800e4fe <__mdiff+0xc6>
 800e53c:	3e01      	subs	r6, #1
 800e53e:	e7ea      	b.n	800e516 <__mdiff+0xde>
 800e540:	08023e14 	.word	0x08023e14
 800e544:	08023ea4 	.word	0x08023ea4

0800e548 <__ulp>:
 800e548:	b082      	sub	sp, #8
 800e54a:	ed8d 0b00 	vstr	d0, [sp]
 800e54e:	9b01      	ldr	r3, [sp, #4]
 800e550:	4912      	ldr	r1, [pc, #72]	; (800e59c <__ulp+0x54>)
 800e552:	4019      	ands	r1, r3
 800e554:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e558:	2900      	cmp	r1, #0
 800e55a:	dd05      	ble.n	800e568 <__ulp+0x20>
 800e55c:	2200      	movs	r2, #0
 800e55e:	460b      	mov	r3, r1
 800e560:	ec43 2b10 	vmov	d0, r2, r3
 800e564:	b002      	add	sp, #8
 800e566:	4770      	bx	lr
 800e568:	4249      	negs	r1, r1
 800e56a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e56e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e572:	f04f 0200 	mov.w	r2, #0
 800e576:	f04f 0300 	mov.w	r3, #0
 800e57a:	da04      	bge.n	800e586 <__ulp+0x3e>
 800e57c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e580:	fa41 f300 	asr.w	r3, r1, r0
 800e584:	e7ec      	b.n	800e560 <__ulp+0x18>
 800e586:	f1a0 0114 	sub.w	r1, r0, #20
 800e58a:	291e      	cmp	r1, #30
 800e58c:	bfda      	itte	le
 800e58e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e592:	fa20 f101 	lsrle.w	r1, r0, r1
 800e596:	2101      	movgt	r1, #1
 800e598:	460a      	mov	r2, r1
 800e59a:	e7e1      	b.n	800e560 <__ulp+0x18>
 800e59c:	7ff00000 	.word	0x7ff00000

0800e5a0 <__b2d>:
 800e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a2:	6905      	ldr	r5, [r0, #16]
 800e5a4:	f100 0714 	add.w	r7, r0, #20
 800e5a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e5ac:	1f2e      	subs	r6, r5, #4
 800e5ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f7ff fd52 	bl	800e05c <__hi0bits>
 800e5b8:	f1c0 0320 	rsb	r3, r0, #32
 800e5bc:	280a      	cmp	r0, #10
 800e5be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e63c <__b2d+0x9c>
 800e5c2:	600b      	str	r3, [r1, #0]
 800e5c4:	dc14      	bgt.n	800e5f0 <__b2d+0x50>
 800e5c6:	f1c0 0e0b 	rsb	lr, r0, #11
 800e5ca:	fa24 f10e 	lsr.w	r1, r4, lr
 800e5ce:	42b7      	cmp	r7, r6
 800e5d0:	ea41 030c 	orr.w	r3, r1, ip
 800e5d4:	bf34      	ite	cc
 800e5d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e5da:	2100      	movcs	r1, #0
 800e5dc:	3015      	adds	r0, #21
 800e5de:	fa04 f000 	lsl.w	r0, r4, r0
 800e5e2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e5e6:	ea40 0201 	orr.w	r2, r0, r1
 800e5ea:	ec43 2b10 	vmov	d0, r2, r3
 800e5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5f0:	42b7      	cmp	r7, r6
 800e5f2:	bf3a      	itte	cc
 800e5f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e5f8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e5fc:	2100      	movcs	r1, #0
 800e5fe:	380b      	subs	r0, #11
 800e600:	d017      	beq.n	800e632 <__b2d+0x92>
 800e602:	f1c0 0c20 	rsb	ip, r0, #32
 800e606:	fa04 f500 	lsl.w	r5, r4, r0
 800e60a:	42be      	cmp	r6, r7
 800e60c:	fa21 f40c 	lsr.w	r4, r1, ip
 800e610:	ea45 0504 	orr.w	r5, r5, r4
 800e614:	bf8c      	ite	hi
 800e616:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e61a:	2400      	movls	r4, #0
 800e61c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e620:	fa01 f000 	lsl.w	r0, r1, r0
 800e624:	fa24 f40c 	lsr.w	r4, r4, ip
 800e628:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e62c:	ea40 0204 	orr.w	r2, r0, r4
 800e630:	e7db      	b.n	800e5ea <__b2d+0x4a>
 800e632:	ea44 030c 	orr.w	r3, r4, ip
 800e636:	460a      	mov	r2, r1
 800e638:	e7d7      	b.n	800e5ea <__b2d+0x4a>
 800e63a:	bf00      	nop
 800e63c:	3ff00000 	.word	0x3ff00000

0800e640 <__d2b>:
 800e640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e644:	4689      	mov	r9, r1
 800e646:	2101      	movs	r1, #1
 800e648:	ec57 6b10 	vmov	r6, r7, d0
 800e64c:	4690      	mov	r8, r2
 800e64e:	f7ff fc0f 	bl	800de70 <_Balloc>
 800e652:	4604      	mov	r4, r0
 800e654:	b930      	cbnz	r0, 800e664 <__d2b+0x24>
 800e656:	4602      	mov	r2, r0
 800e658:	4b25      	ldr	r3, [pc, #148]	; (800e6f0 <__d2b+0xb0>)
 800e65a:	4826      	ldr	r0, [pc, #152]	; (800e6f4 <__d2b+0xb4>)
 800e65c:	f240 310a 	movw	r1, #778	; 0x30a
 800e660:	f000 fb0e 	bl	800ec80 <__assert_func>
 800e664:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e66c:	bb35      	cbnz	r5, 800e6bc <__d2b+0x7c>
 800e66e:	2e00      	cmp	r6, #0
 800e670:	9301      	str	r3, [sp, #4]
 800e672:	d028      	beq.n	800e6c6 <__d2b+0x86>
 800e674:	4668      	mov	r0, sp
 800e676:	9600      	str	r6, [sp, #0]
 800e678:	f7ff fd10 	bl	800e09c <__lo0bits>
 800e67c:	9900      	ldr	r1, [sp, #0]
 800e67e:	b300      	cbz	r0, 800e6c2 <__d2b+0x82>
 800e680:	9a01      	ldr	r2, [sp, #4]
 800e682:	f1c0 0320 	rsb	r3, r0, #32
 800e686:	fa02 f303 	lsl.w	r3, r2, r3
 800e68a:	430b      	orrs	r3, r1
 800e68c:	40c2      	lsrs	r2, r0
 800e68e:	6163      	str	r3, [r4, #20]
 800e690:	9201      	str	r2, [sp, #4]
 800e692:	9b01      	ldr	r3, [sp, #4]
 800e694:	61a3      	str	r3, [r4, #24]
 800e696:	2b00      	cmp	r3, #0
 800e698:	bf14      	ite	ne
 800e69a:	2202      	movne	r2, #2
 800e69c:	2201      	moveq	r2, #1
 800e69e:	6122      	str	r2, [r4, #16]
 800e6a0:	b1d5      	cbz	r5, 800e6d8 <__d2b+0x98>
 800e6a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e6a6:	4405      	add	r5, r0
 800e6a8:	f8c9 5000 	str.w	r5, [r9]
 800e6ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6b0:	f8c8 0000 	str.w	r0, [r8]
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	b003      	add	sp, #12
 800e6b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6c0:	e7d5      	b.n	800e66e <__d2b+0x2e>
 800e6c2:	6161      	str	r1, [r4, #20]
 800e6c4:	e7e5      	b.n	800e692 <__d2b+0x52>
 800e6c6:	a801      	add	r0, sp, #4
 800e6c8:	f7ff fce8 	bl	800e09c <__lo0bits>
 800e6cc:	9b01      	ldr	r3, [sp, #4]
 800e6ce:	6163      	str	r3, [r4, #20]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	6122      	str	r2, [r4, #16]
 800e6d4:	3020      	adds	r0, #32
 800e6d6:	e7e3      	b.n	800e6a0 <__d2b+0x60>
 800e6d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6e0:	f8c9 0000 	str.w	r0, [r9]
 800e6e4:	6918      	ldr	r0, [r3, #16]
 800e6e6:	f7ff fcb9 	bl	800e05c <__hi0bits>
 800e6ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6ee:	e7df      	b.n	800e6b0 <__d2b+0x70>
 800e6f0:	08023e14 	.word	0x08023e14
 800e6f4:	08023ea4 	.word	0x08023ea4

0800e6f8 <__ratio>:
 800e6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	4688      	mov	r8, r1
 800e6fe:	4669      	mov	r1, sp
 800e700:	4681      	mov	r9, r0
 800e702:	f7ff ff4d 	bl	800e5a0 <__b2d>
 800e706:	a901      	add	r1, sp, #4
 800e708:	4640      	mov	r0, r8
 800e70a:	ec55 4b10 	vmov	r4, r5, d0
 800e70e:	f7ff ff47 	bl	800e5a0 <__b2d>
 800e712:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e716:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e71a:	eba3 0c02 	sub.w	ip, r3, r2
 800e71e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e722:	1a9b      	subs	r3, r3, r2
 800e724:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e728:	ec51 0b10 	vmov	r0, r1, d0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	bfd6      	itet	le
 800e730:	460a      	movle	r2, r1
 800e732:	462a      	movgt	r2, r5
 800e734:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e738:	468b      	mov	fp, r1
 800e73a:	462f      	mov	r7, r5
 800e73c:	bfd4      	ite	le
 800e73e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e742:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e746:	4620      	mov	r0, r4
 800e748:	ee10 2a10 	vmov	r2, s0
 800e74c:	465b      	mov	r3, fp
 800e74e:	4639      	mov	r1, r7
 800e750:	f7f2 f884 	bl	800085c <__aeabi_ddiv>
 800e754:	ec41 0b10 	vmov	d0, r0, r1
 800e758:	b003      	add	sp, #12
 800e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e75e <__copybits>:
 800e75e:	3901      	subs	r1, #1
 800e760:	b570      	push	{r4, r5, r6, lr}
 800e762:	1149      	asrs	r1, r1, #5
 800e764:	6914      	ldr	r4, [r2, #16]
 800e766:	3101      	adds	r1, #1
 800e768:	f102 0314 	add.w	r3, r2, #20
 800e76c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e770:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e774:	1f05      	subs	r5, r0, #4
 800e776:	42a3      	cmp	r3, r4
 800e778:	d30c      	bcc.n	800e794 <__copybits+0x36>
 800e77a:	1aa3      	subs	r3, r4, r2
 800e77c:	3b11      	subs	r3, #17
 800e77e:	f023 0303 	bic.w	r3, r3, #3
 800e782:	3211      	adds	r2, #17
 800e784:	42a2      	cmp	r2, r4
 800e786:	bf88      	it	hi
 800e788:	2300      	movhi	r3, #0
 800e78a:	4418      	add	r0, r3
 800e78c:	2300      	movs	r3, #0
 800e78e:	4288      	cmp	r0, r1
 800e790:	d305      	bcc.n	800e79e <__copybits+0x40>
 800e792:	bd70      	pop	{r4, r5, r6, pc}
 800e794:	f853 6b04 	ldr.w	r6, [r3], #4
 800e798:	f845 6f04 	str.w	r6, [r5, #4]!
 800e79c:	e7eb      	b.n	800e776 <__copybits+0x18>
 800e79e:	f840 3b04 	str.w	r3, [r0], #4
 800e7a2:	e7f4      	b.n	800e78e <__copybits+0x30>

0800e7a4 <__any_on>:
 800e7a4:	f100 0214 	add.w	r2, r0, #20
 800e7a8:	6900      	ldr	r0, [r0, #16]
 800e7aa:	114b      	asrs	r3, r1, #5
 800e7ac:	4298      	cmp	r0, r3
 800e7ae:	b510      	push	{r4, lr}
 800e7b0:	db11      	blt.n	800e7d6 <__any_on+0x32>
 800e7b2:	dd0a      	ble.n	800e7ca <__any_on+0x26>
 800e7b4:	f011 011f 	ands.w	r1, r1, #31
 800e7b8:	d007      	beq.n	800e7ca <__any_on+0x26>
 800e7ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7be:	fa24 f001 	lsr.w	r0, r4, r1
 800e7c2:	fa00 f101 	lsl.w	r1, r0, r1
 800e7c6:	428c      	cmp	r4, r1
 800e7c8:	d10b      	bne.n	800e7e2 <__any_on+0x3e>
 800e7ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d803      	bhi.n	800e7da <__any_on+0x36>
 800e7d2:	2000      	movs	r0, #0
 800e7d4:	bd10      	pop	{r4, pc}
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	e7f7      	b.n	800e7ca <__any_on+0x26>
 800e7da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7de:	2900      	cmp	r1, #0
 800e7e0:	d0f5      	beq.n	800e7ce <__any_on+0x2a>
 800e7e2:	2001      	movs	r0, #1
 800e7e4:	e7f6      	b.n	800e7d4 <__any_on+0x30>

0800e7e6 <_calloc_r>:
 800e7e6:	b513      	push	{r0, r1, r4, lr}
 800e7e8:	434a      	muls	r2, r1
 800e7ea:	4611      	mov	r1, r2
 800e7ec:	9201      	str	r2, [sp, #4]
 800e7ee:	f000 f859 	bl	800e8a4 <_malloc_r>
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	b118      	cbz	r0, 800e7fe <_calloc_r+0x18>
 800e7f6:	9a01      	ldr	r2, [sp, #4]
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	f7fc fbc7 	bl	800af8c <memset>
 800e7fe:	4620      	mov	r0, r4
 800e800:	b002      	add	sp, #8
 800e802:	bd10      	pop	{r4, pc}

0800e804 <_free_r>:
 800e804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e806:	2900      	cmp	r1, #0
 800e808:	d048      	beq.n	800e89c <_free_r+0x98>
 800e80a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e80e:	9001      	str	r0, [sp, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	f1a1 0404 	sub.w	r4, r1, #4
 800e816:	bfb8      	it	lt
 800e818:	18e4      	addlt	r4, r4, r3
 800e81a:	f000 fa7b 	bl	800ed14 <__malloc_lock>
 800e81e:	4a20      	ldr	r2, [pc, #128]	; (800e8a0 <_free_r+0x9c>)
 800e820:	9801      	ldr	r0, [sp, #4]
 800e822:	6813      	ldr	r3, [r2, #0]
 800e824:	4615      	mov	r5, r2
 800e826:	b933      	cbnz	r3, 800e836 <_free_r+0x32>
 800e828:	6063      	str	r3, [r4, #4]
 800e82a:	6014      	str	r4, [r2, #0]
 800e82c:	b003      	add	sp, #12
 800e82e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e832:	f000 ba75 	b.w	800ed20 <__malloc_unlock>
 800e836:	42a3      	cmp	r3, r4
 800e838:	d90b      	bls.n	800e852 <_free_r+0x4e>
 800e83a:	6821      	ldr	r1, [r4, #0]
 800e83c:	1862      	adds	r2, r4, r1
 800e83e:	4293      	cmp	r3, r2
 800e840:	bf04      	itt	eq
 800e842:	681a      	ldreq	r2, [r3, #0]
 800e844:	685b      	ldreq	r3, [r3, #4]
 800e846:	6063      	str	r3, [r4, #4]
 800e848:	bf04      	itt	eq
 800e84a:	1852      	addeq	r2, r2, r1
 800e84c:	6022      	streq	r2, [r4, #0]
 800e84e:	602c      	str	r4, [r5, #0]
 800e850:	e7ec      	b.n	800e82c <_free_r+0x28>
 800e852:	461a      	mov	r2, r3
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	b10b      	cbz	r3, 800e85c <_free_r+0x58>
 800e858:	42a3      	cmp	r3, r4
 800e85a:	d9fa      	bls.n	800e852 <_free_r+0x4e>
 800e85c:	6811      	ldr	r1, [r2, #0]
 800e85e:	1855      	adds	r5, r2, r1
 800e860:	42a5      	cmp	r5, r4
 800e862:	d10b      	bne.n	800e87c <_free_r+0x78>
 800e864:	6824      	ldr	r4, [r4, #0]
 800e866:	4421      	add	r1, r4
 800e868:	1854      	adds	r4, r2, r1
 800e86a:	42a3      	cmp	r3, r4
 800e86c:	6011      	str	r1, [r2, #0]
 800e86e:	d1dd      	bne.n	800e82c <_free_r+0x28>
 800e870:	681c      	ldr	r4, [r3, #0]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	6053      	str	r3, [r2, #4]
 800e876:	4421      	add	r1, r4
 800e878:	6011      	str	r1, [r2, #0]
 800e87a:	e7d7      	b.n	800e82c <_free_r+0x28>
 800e87c:	d902      	bls.n	800e884 <_free_r+0x80>
 800e87e:	230c      	movs	r3, #12
 800e880:	6003      	str	r3, [r0, #0]
 800e882:	e7d3      	b.n	800e82c <_free_r+0x28>
 800e884:	6825      	ldr	r5, [r4, #0]
 800e886:	1961      	adds	r1, r4, r5
 800e888:	428b      	cmp	r3, r1
 800e88a:	bf04      	itt	eq
 800e88c:	6819      	ldreq	r1, [r3, #0]
 800e88e:	685b      	ldreq	r3, [r3, #4]
 800e890:	6063      	str	r3, [r4, #4]
 800e892:	bf04      	itt	eq
 800e894:	1949      	addeq	r1, r1, r5
 800e896:	6021      	streq	r1, [r4, #0]
 800e898:	6054      	str	r4, [r2, #4]
 800e89a:	e7c7      	b.n	800e82c <_free_r+0x28>
 800e89c:	b003      	add	sp, #12
 800e89e:	bd30      	pop	{r4, r5, pc}
 800e8a0:	20002c1c 	.word	0x20002c1c

0800e8a4 <_malloc_r>:
 800e8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a6:	1ccd      	adds	r5, r1, #3
 800e8a8:	f025 0503 	bic.w	r5, r5, #3
 800e8ac:	3508      	adds	r5, #8
 800e8ae:	2d0c      	cmp	r5, #12
 800e8b0:	bf38      	it	cc
 800e8b2:	250c      	movcc	r5, #12
 800e8b4:	2d00      	cmp	r5, #0
 800e8b6:	4606      	mov	r6, r0
 800e8b8:	db01      	blt.n	800e8be <_malloc_r+0x1a>
 800e8ba:	42a9      	cmp	r1, r5
 800e8bc:	d903      	bls.n	800e8c6 <_malloc_r+0x22>
 800e8be:	230c      	movs	r3, #12
 800e8c0:	6033      	str	r3, [r6, #0]
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8c6:	f000 fa25 	bl	800ed14 <__malloc_lock>
 800e8ca:	4921      	ldr	r1, [pc, #132]	; (800e950 <_malloc_r+0xac>)
 800e8cc:	680a      	ldr	r2, [r1, #0]
 800e8ce:	4614      	mov	r4, r2
 800e8d0:	b99c      	cbnz	r4, 800e8fa <_malloc_r+0x56>
 800e8d2:	4f20      	ldr	r7, [pc, #128]	; (800e954 <_malloc_r+0xb0>)
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	b923      	cbnz	r3, 800e8e2 <_malloc_r+0x3e>
 800e8d8:	4621      	mov	r1, r4
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f000 f9a0 	bl	800ec20 <_sbrk_r>
 800e8e0:	6038      	str	r0, [r7, #0]
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	f000 f99b 	bl	800ec20 <_sbrk_r>
 800e8ea:	1c43      	adds	r3, r0, #1
 800e8ec:	d123      	bne.n	800e936 <_malloc_r+0x92>
 800e8ee:	230c      	movs	r3, #12
 800e8f0:	6033      	str	r3, [r6, #0]
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	f000 fa14 	bl	800ed20 <__malloc_unlock>
 800e8f8:	e7e3      	b.n	800e8c2 <_malloc_r+0x1e>
 800e8fa:	6823      	ldr	r3, [r4, #0]
 800e8fc:	1b5b      	subs	r3, r3, r5
 800e8fe:	d417      	bmi.n	800e930 <_malloc_r+0x8c>
 800e900:	2b0b      	cmp	r3, #11
 800e902:	d903      	bls.n	800e90c <_malloc_r+0x68>
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	441c      	add	r4, r3
 800e908:	6025      	str	r5, [r4, #0]
 800e90a:	e004      	b.n	800e916 <_malloc_r+0x72>
 800e90c:	6863      	ldr	r3, [r4, #4]
 800e90e:	42a2      	cmp	r2, r4
 800e910:	bf0c      	ite	eq
 800e912:	600b      	streq	r3, [r1, #0]
 800e914:	6053      	strne	r3, [r2, #4]
 800e916:	4630      	mov	r0, r6
 800e918:	f000 fa02 	bl	800ed20 <__malloc_unlock>
 800e91c:	f104 000b 	add.w	r0, r4, #11
 800e920:	1d23      	adds	r3, r4, #4
 800e922:	f020 0007 	bic.w	r0, r0, #7
 800e926:	1ac2      	subs	r2, r0, r3
 800e928:	d0cc      	beq.n	800e8c4 <_malloc_r+0x20>
 800e92a:	1a1b      	subs	r3, r3, r0
 800e92c:	50a3      	str	r3, [r4, r2]
 800e92e:	e7c9      	b.n	800e8c4 <_malloc_r+0x20>
 800e930:	4622      	mov	r2, r4
 800e932:	6864      	ldr	r4, [r4, #4]
 800e934:	e7cc      	b.n	800e8d0 <_malloc_r+0x2c>
 800e936:	1cc4      	adds	r4, r0, #3
 800e938:	f024 0403 	bic.w	r4, r4, #3
 800e93c:	42a0      	cmp	r0, r4
 800e93e:	d0e3      	beq.n	800e908 <_malloc_r+0x64>
 800e940:	1a21      	subs	r1, r4, r0
 800e942:	4630      	mov	r0, r6
 800e944:	f000 f96c 	bl	800ec20 <_sbrk_r>
 800e948:	3001      	adds	r0, #1
 800e94a:	d1dd      	bne.n	800e908 <_malloc_r+0x64>
 800e94c:	e7cf      	b.n	800e8ee <_malloc_r+0x4a>
 800e94e:	bf00      	nop
 800e950:	20002c1c 	.word	0x20002c1c
 800e954:	20002c20 	.word	0x20002c20

0800e958 <__ssputs_r>:
 800e958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e95c:	688e      	ldr	r6, [r1, #8]
 800e95e:	429e      	cmp	r6, r3
 800e960:	4682      	mov	sl, r0
 800e962:	460c      	mov	r4, r1
 800e964:	4690      	mov	r8, r2
 800e966:	461f      	mov	r7, r3
 800e968:	d838      	bhi.n	800e9dc <__ssputs_r+0x84>
 800e96a:	898a      	ldrh	r2, [r1, #12]
 800e96c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e970:	d032      	beq.n	800e9d8 <__ssputs_r+0x80>
 800e972:	6825      	ldr	r5, [r4, #0]
 800e974:	6909      	ldr	r1, [r1, #16]
 800e976:	eba5 0901 	sub.w	r9, r5, r1
 800e97a:	6965      	ldr	r5, [r4, #20]
 800e97c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e984:	3301      	adds	r3, #1
 800e986:	444b      	add	r3, r9
 800e988:	106d      	asrs	r5, r5, #1
 800e98a:	429d      	cmp	r5, r3
 800e98c:	bf38      	it	cc
 800e98e:	461d      	movcc	r5, r3
 800e990:	0553      	lsls	r3, r2, #21
 800e992:	d531      	bpl.n	800e9f8 <__ssputs_r+0xa0>
 800e994:	4629      	mov	r1, r5
 800e996:	f7ff ff85 	bl	800e8a4 <_malloc_r>
 800e99a:	4606      	mov	r6, r0
 800e99c:	b950      	cbnz	r0, 800e9b4 <__ssputs_r+0x5c>
 800e99e:	230c      	movs	r3, #12
 800e9a0:	f8ca 3000 	str.w	r3, [sl]
 800e9a4:	89a3      	ldrh	r3, [r4, #12]
 800e9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9aa:	81a3      	strh	r3, [r4, #12]
 800e9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b4:	6921      	ldr	r1, [r4, #16]
 800e9b6:	464a      	mov	r2, r9
 800e9b8:	f7ff fa4c 	bl	800de54 <memcpy>
 800e9bc:	89a3      	ldrh	r3, [r4, #12]
 800e9be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c6:	81a3      	strh	r3, [r4, #12]
 800e9c8:	6126      	str	r6, [r4, #16]
 800e9ca:	6165      	str	r5, [r4, #20]
 800e9cc:	444e      	add	r6, r9
 800e9ce:	eba5 0509 	sub.w	r5, r5, r9
 800e9d2:	6026      	str	r6, [r4, #0]
 800e9d4:	60a5      	str	r5, [r4, #8]
 800e9d6:	463e      	mov	r6, r7
 800e9d8:	42be      	cmp	r6, r7
 800e9da:	d900      	bls.n	800e9de <__ssputs_r+0x86>
 800e9dc:	463e      	mov	r6, r7
 800e9de:	4632      	mov	r2, r6
 800e9e0:	6820      	ldr	r0, [r4, #0]
 800e9e2:	4641      	mov	r1, r8
 800e9e4:	f000 f97c 	bl	800ece0 <memmove>
 800e9e8:	68a3      	ldr	r3, [r4, #8]
 800e9ea:	6822      	ldr	r2, [r4, #0]
 800e9ec:	1b9b      	subs	r3, r3, r6
 800e9ee:	4432      	add	r2, r6
 800e9f0:	60a3      	str	r3, [r4, #8]
 800e9f2:	6022      	str	r2, [r4, #0]
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	e7db      	b.n	800e9b0 <__ssputs_r+0x58>
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	f000 f997 	bl	800ed2c <_realloc_r>
 800e9fe:	4606      	mov	r6, r0
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d1e1      	bne.n	800e9c8 <__ssputs_r+0x70>
 800ea04:	6921      	ldr	r1, [r4, #16]
 800ea06:	4650      	mov	r0, sl
 800ea08:	f7ff fefc 	bl	800e804 <_free_r>
 800ea0c:	e7c7      	b.n	800e99e <__ssputs_r+0x46>
	...

0800ea10 <_svfiprintf_r>:
 800ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	4698      	mov	r8, r3
 800ea16:	898b      	ldrh	r3, [r1, #12]
 800ea18:	061b      	lsls	r3, r3, #24
 800ea1a:	b09d      	sub	sp, #116	; 0x74
 800ea1c:	4607      	mov	r7, r0
 800ea1e:	460d      	mov	r5, r1
 800ea20:	4614      	mov	r4, r2
 800ea22:	d50e      	bpl.n	800ea42 <_svfiprintf_r+0x32>
 800ea24:	690b      	ldr	r3, [r1, #16]
 800ea26:	b963      	cbnz	r3, 800ea42 <_svfiprintf_r+0x32>
 800ea28:	2140      	movs	r1, #64	; 0x40
 800ea2a:	f7ff ff3b 	bl	800e8a4 <_malloc_r>
 800ea2e:	6028      	str	r0, [r5, #0]
 800ea30:	6128      	str	r0, [r5, #16]
 800ea32:	b920      	cbnz	r0, 800ea3e <_svfiprintf_r+0x2e>
 800ea34:	230c      	movs	r3, #12
 800ea36:	603b      	str	r3, [r7, #0]
 800ea38:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3c:	e0d1      	b.n	800ebe2 <_svfiprintf_r+0x1d2>
 800ea3e:	2340      	movs	r3, #64	; 0x40
 800ea40:	616b      	str	r3, [r5, #20]
 800ea42:	2300      	movs	r3, #0
 800ea44:	9309      	str	r3, [sp, #36]	; 0x24
 800ea46:	2320      	movs	r3, #32
 800ea48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea50:	2330      	movs	r3, #48	; 0x30
 800ea52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ebfc <_svfiprintf_r+0x1ec>
 800ea56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea5a:	f04f 0901 	mov.w	r9, #1
 800ea5e:	4623      	mov	r3, r4
 800ea60:	469a      	mov	sl, r3
 800ea62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea66:	b10a      	cbz	r2, 800ea6c <_svfiprintf_r+0x5c>
 800ea68:	2a25      	cmp	r2, #37	; 0x25
 800ea6a:	d1f9      	bne.n	800ea60 <_svfiprintf_r+0x50>
 800ea6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ea70:	d00b      	beq.n	800ea8a <_svfiprintf_r+0x7a>
 800ea72:	465b      	mov	r3, fp
 800ea74:	4622      	mov	r2, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	4638      	mov	r0, r7
 800ea7a:	f7ff ff6d 	bl	800e958 <__ssputs_r>
 800ea7e:	3001      	adds	r0, #1
 800ea80:	f000 80aa 	beq.w	800ebd8 <_svfiprintf_r+0x1c8>
 800ea84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea86:	445a      	add	r2, fp
 800ea88:	9209      	str	r2, [sp, #36]	; 0x24
 800ea8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f000 80a2 	beq.w	800ebd8 <_svfiprintf_r+0x1c8>
 800ea94:	2300      	movs	r3, #0
 800ea96:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea9e:	f10a 0a01 	add.w	sl, sl, #1
 800eaa2:	9304      	str	r3, [sp, #16]
 800eaa4:	9307      	str	r3, [sp, #28]
 800eaa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaaa:	931a      	str	r3, [sp, #104]	; 0x68
 800eaac:	4654      	mov	r4, sl
 800eaae:	2205      	movs	r2, #5
 800eab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab4:	4851      	ldr	r0, [pc, #324]	; (800ebfc <_svfiprintf_r+0x1ec>)
 800eab6:	f7f1 fb9b 	bl	80001f0 <memchr>
 800eaba:	9a04      	ldr	r2, [sp, #16]
 800eabc:	b9d8      	cbnz	r0, 800eaf6 <_svfiprintf_r+0xe6>
 800eabe:	06d0      	lsls	r0, r2, #27
 800eac0:	bf44      	itt	mi
 800eac2:	2320      	movmi	r3, #32
 800eac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eac8:	0711      	lsls	r1, r2, #28
 800eaca:	bf44      	itt	mi
 800eacc:	232b      	movmi	r3, #43	; 0x2b
 800eace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ead2:	f89a 3000 	ldrb.w	r3, [sl]
 800ead6:	2b2a      	cmp	r3, #42	; 0x2a
 800ead8:	d015      	beq.n	800eb06 <_svfiprintf_r+0xf6>
 800eada:	9a07      	ldr	r2, [sp, #28]
 800eadc:	4654      	mov	r4, sl
 800eade:	2000      	movs	r0, #0
 800eae0:	f04f 0c0a 	mov.w	ip, #10
 800eae4:	4621      	mov	r1, r4
 800eae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaea:	3b30      	subs	r3, #48	; 0x30
 800eaec:	2b09      	cmp	r3, #9
 800eaee:	d94e      	bls.n	800eb8e <_svfiprintf_r+0x17e>
 800eaf0:	b1b0      	cbz	r0, 800eb20 <_svfiprintf_r+0x110>
 800eaf2:	9207      	str	r2, [sp, #28]
 800eaf4:	e014      	b.n	800eb20 <_svfiprintf_r+0x110>
 800eaf6:	eba0 0308 	sub.w	r3, r0, r8
 800eafa:	fa09 f303 	lsl.w	r3, r9, r3
 800eafe:	4313      	orrs	r3, r2
 800eb00:	9304      	str	r3, [sp, #16]
 800eb02:	46a2      	mov	sl, r4
 800eb04:	e7d2      	b.n	800eaac <_svfiprintf_r+0x9c>
 800eb06:	9b03      	ldr	r3, [sp, #12]
 800eb08:	1d19      	adds	r1, r3, #4
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	9103      	str	r1, [sp, #12]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	bfbb      	ittet	lt
 800eb12:	425b      	neglt	r3, r3
 800eb14:	f042 0202 	orrlt.w	r2, r2, #2
 800eb18:	9307      	strge	r3, [sp, #28]
 800eb1a:	9307      	strlt	r3, [sp, #28]
 800eb1c:	bfb8      	it	lt
 800eb1e:	9204      	strlt	r2, [sp, #16]
 800eb20:	7823      	ldrb	r3, [r4, #0]
 800eb22:	2b2e      	cmp	r3, #46	; 0x2e
 800eb24:	d10c      	bne.n	800eb40 <_svfiprintf_r+0x130>
 800eb26:	7863      	ldrb	r3, [r4, #1]
 800eb28:	2b2a      	cmp	r3, #42	; 0x2a
 800eb2a:	d135      	bne.n	800eb98 <_svfiprintf_r+0x188>
 800eb2c:	9b03      	ldr	r3, [sp, #12]
 800eb2e:	1d1a      	adds	r2, r3, #4
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	9203      	str	r2, [sp, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	bfb8      	it	lt
 800eb38:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb3c:	3402      	adds	r4, #2
 800eb3e:	9305      	str	r3, [sp, #20]
 800eb40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec0c <_svfiprintf_r+0x1fc>
 800eb44:	7821      	ldrb	r1, [r4, #0]
 800eb46:	2203      	movs	r2, #3
 800eb48:	4650      	mov	r0, sl
 800eb4a:	f7f1 fb51 	bl	80001f0 <memchr>
 800eb4e:	b140      	cbz	r0, 800eb62 <_svfiprintf_r+0x152>
 800eb50:	2340      	movs	r3, #64	; 0x40
 800eb52:	eba0 000a 	sub.w	r0, r0, sl
 800eb56:	fa03 f000 	lsl.w	r0, r3, r0
 800eb5a:	9b04      	ldr	r3, [sp, #16]
 800eb5c:	4303      	orrs	r3, r0
 800eb5e:	3401      	adds	r4, #1
 800eb60:	9304      	str	r3, [sp, #16]
 800eb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb66:	4826      	ldr	r0, [pc, #152]	; (800ec00 <_svfiprintf_r+0x1f0>)
 800eb68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb6c:	2206      	movs	r2, #6
 800eb6e:	f7f1 fb3f 	bl	80001f0 <memchr>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d038      	beq.n	800ebe8 <_svfiprintf_r+0x1d8>
 800eb76:	4b23      	ldr	r3, [pc, #140]	; (800ec04 <_svfiprintf_r+0x1f4>)
 800eb78:	bb1b      	cbnz	r3, 800ebc2 <_svfiprintf_r+0x1b2>
 800eb7a:	9b03      	ldr	r3, [sp, #12]
 800eb7c:	3307      	adds	r3, #7
 800eb7e:	f023 0307 	bic.w	r3, r3, #7
 800eb82:	3308      	adds	r3, #8
 800eb84:	9303      	str	r3, [sp, #12]
 800eb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb88:	4433      	add	r3, r6
 800eb8a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb8c:	e767      	b.n	800ea5e <_svfiprintf_r+0x4e>
 800eb8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb92:	460c      	mov	r4, r1
 800eb94:	2001      	movs	r0, #1
 800eb96:	e7a5      	b.n	800eae4 <_svfiprintf_r+0xd4>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	3401      	adds	r4, #1
 800eb9c:	9305      	str	r3, [sp, #20]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	f04f 0c0a 	mov.w	ip, #10
 800eba4:	4620      	mov	r0, r4
 800eba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebaa:	3a30      	subs	r2, #48	; 0x30
 800ebac:	2a09      	cmp	r2, #9
 800ebae:	d903      	bls.n	800ebb8 <_svfiprintf_r+0x1a8>
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d0c5      	beq.n	800eb40 <_svfiprintf_r+0x130>
 800ebb4:	9105      	str	r1, [sp, #20]
 800ebb6:	e7c3      	b.n	800eb40 <_svfiprintf_r+0x130>
 800ebb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebbc:	4604      	mov	r4, r0
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e7f0      	b.n	800eba4 <_svfiprintf_r+0x194>
 800ebc2:	ab03      	add	r3, sp, #12
 800ebc4:	9300      	str	r3, [sp, #0]
 800ebc6:	462a      	mov	r2, r5
 800ebc8:	4b0f      	ldr	r3, [pc, #60]	; (800ec08 <_svfiprintf_r+0x1f8>)
 800ebca:	a904      	add	r1, sp, #16
 800ebcc:	4638      	mov	r0, r7
 800ebce:	f7fc fa85 	bl	800b0dc <_printf_float>
 800ebd2:	1c42      	adds	r2, r0, #1
 800ebd4:	4606      	mov	r6, r0
 800ebd6:	d1d6      	bne.n	800eb86 <_svfiprintf_r+0x176>
 800ebd8:	89ab      	ldrh	r3, [r5, #12]
 800ebda:	065b      	lsls	r3, r3, #25
 800ebdc:	f53f af2c 	bmi.w	800ea38 <_svfiprintf_r+0x28>
 800ebe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebe2:	b01d      	add	sp, #116	; 0x74
 800ebe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe8:	ab03      	add	r3, sp, #12
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	462a      	mov	r2, r5
 800ebee:	4b06      	ldr	r3, [pc, #24]	; (800ec08 <_svfiprintf_r+0x1f8>)
 800ebf0:	a904      	add	r1, sp, #16
 800ebf2:	4638      	mov	r0, r7
 800ebf4:	f7fc fd16 	bl	800b624 <_printf_i>
 800ebf8:	e7eb      	b.n	800ebd2 <_svfiprintf_r+0x1c2>
 800ebfa:	bf00      	nop
 800ebfc:	08024004 	.word	0x08024004
 800ec00:	0802400e 	.word	0x0802400e
 800ec04:	0800b0dd 	.word	0x0800b0dd
 800ec08:	0800e959 	.word	0x0800e959
 800ec0c:	0802400a 	.word	0x0802400a

0800ec10 <nan>:
 800ec10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ec18 <nan+0x8>
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	00000000 	.word	0x00000000
 800ec1c:	7ff80000 	.word	0x7ff80000

0800ec20 <_sbrk_r>:
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	4d06      	ldr	r5, [pc, #24]	; (800ec3c <_sbrk_r+0x1c>)
 800ec24:	2300      	movs	r3, #0
 800ec26:	4604      	mov	r4, r0
 800ec28:	4608      	mov	r0, r1
 800ec2a:	602b      	str	r3, [r5, #0]
 800ec2c:	f7f6 fb40 	bl	80052b0 <_sbrk>
 800ec30:	1c43      	adds	r3, r0, #1
 800ec32:	d102      	bne.n	800ec3a <_sbrk_r+0x1a>
 800ec34:	682b      	ldr	r3, [r5, #0]
 800ec36:	b103      	cbz	r3, 800ec3a <_sbrk_r+0x1a>
 800ec38:	6023      	str	r3, [r4, #0]
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}
 800ec3c:	20003274 	.word	0x20003274

0800ec40 <strncmp>:
 800ec40:	b510      	push	{r4, lr}
 800ec42:	b16a      	cbz	r2, 800ec60 <strncmp+0x20>
 800ec44:	3901      	subs	r1, #1
 800ec46:	1884      	adds	r4, r0, r2
 800ec48:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ec4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d103      	bne.n	800ec5c <strncmp+0x1c>
 800ec54:	42a0      	cmp	r0, r4
 800ec56:	d001      	beq.n	800ec5c <strncmp+0x1c>
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1f5      	bne.n	800ec48 <strncmp+0x8>
 800ec5c:	1a98      	subs	r0, r3, r2
 800ec5e:	bd10      	pop	{r4, pc}
 800ec60:	4610      	mov	r0, r2
 800ec62:	e7fc      	b.n	800ec5e <strncmp+0x1e>

0800ec64 <__ascii_wctomb>:
 800ec64:	b149      	cbz	r1, 800ec7a <__ascii_wctomb+0x16>
 800ec66:	2aff      	cmp	r2, #255	; 0xff
 800ec68:	bf85      	ittet	hi
 800ec6a:	238a      	movhi	r3, #138	; 0x8a
 800ec6c:	6003      	strhi	r3, [r0, #0]
 800ec6e:	700a      	strbls	r2, [r1, #0]
 800ec70:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec74:	bf98      	it	ls
 800ec76:	2001      	movls	r0, #1
 800ec78:	4770      	bx	lr
 800ec7a:	4608      	mov	r0, r1
 800ec7c:	4770      	bx	lr
	...

0800ec80 <__assert_func>:
 800ec80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec82:	4614      	mov	r4, r2
 800ec84:	461a      	mov	r2, r3
 800ec86:	4b09      	ldr	r3, [pc, #36]	; (800ecac <__assert_func+0x2c>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4605      	mov	r5, r0
 800ec8c:	68d8      	ldr	r0, [r3, #12]
 800ec8e:	b14c      	cbz	r4, 800eca4 <__assert_func+0x24>
 800ec90:	4b07      	ldr	r3, [pc, #28]	; (800ecb0 <__assert_func+0x30>)
 800ec92:	9100      	str	r1, [sp, #0]
 800ec94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec98:	4906      	ldr	r1, [pc, #24]	; (800ecb4 <__assert_func+0x34>)
 800ec9a:	462b      	mov	r3, r5
 800ec9c:	f000 f80e 	bl	800ecbc <fiprintf>
 800eca0:	f000 fa84 	bl	800f1ac <abort>
 800eca4:	4b04      	ldr	r3, [pc, #16]	; (800ecb8 <__assert_func+0x38>)
 800eca6:	461c      	mov	r4, r3
 800eca8:	e7f3      	b.n	800ec92 <__assert_func+0x12>
 800ecaa:	bf00      	nop
 800ecac:	200029f8 	.word	0x200029f8
 800ecb0:	08024015 	.word	0x08024015
 800ecb4:	08024022 	.word	0x08024022
 800ecb8:	08024050 	.word	0x08024050

0800ecbc <fiprintf>:
 800ecbc:	b40e      	push	{r1, r2, r3}
 800ecbe:	b503      	push	{r0, r1, lr}
 800ecc0:	4601      	mov	r1, r0
 800ecc2:	ab03      	add	r3, sp, #12
 800ecc4:	4805      	ldr	r0, [pc, #20]	; (800ecdc <fiprintf+0x20>)
 800ecc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecca:	6800      	ldr	r0, [r0, #0]
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	f000 f87d 	bl	800edcc <_vfiprintf_r>
 800ecd2:	b002      	add	sp, #8
 800ecd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecd8:	b003      	add	sp, #12
 800ecda:	4770      	bx	lr
 800ecdc:	200029f8 	.word	0x200029f8

0800ece0 <memmove>:
 800ece0:	4288      	cmp	r0, r1
 800ece2:	b510      	push	{r4, lr}
 800ece4:	eb01 0402 	add.w	r4, r1, r2
 800ece8:	d902      	bls.n	800ecf0 <memmove+0x10>
 800ecea:	4284      	cmp	r4, r0
 800ecec:	4623      	mov	r3, r4
 800ecee:	d807      	bhi.n	800ed00 <memmove+0x20>
 800ecf0:	1e43      	subs	r3, r0, #1
 800ecf2:	42a1      	cmp	r1, r4
 800ecf4:	d008      	beq.n	800ed08 <memmove+0x28>
 800ecf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecfe:	e7f8      	b.n	800ecf2 <memmove+0x12>
 800ed00:	4402      	add	r2, r0
 800ed02:	4601      	mov	r1, r0
 800ed04:	428a      	cmp	r2, r1
 800ed06:	d100      	bne.n	800ed0a <memmove+0x2a>
 800ed08:	bd10      	pop	{r4, pc}
 800ed0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed12:	e7f7      	b.n	800ed04 <memmove+0x24>

0800ed14 <__malloc_lock>:
 800ed14:	4801      	ldr	r0, [pc, #4]	; (800ed1c <__malloc_lock+0x8>)
 800ed16:	f000 bc09 	b.w	800f52c <__retarget_lock_acquire_recursive>
 800ed1a:	bf00      	nop
 800ed1c:	2000327c 	.word	0x2000327c

0800ed20 <__malloc_unlock>:
 800ed20:	4801      	ldr	r0, [pc, #4]	; (800ed28 <__malloc_unlock+0x8>)
 800ed22:	f000 bc04 	b.w	800f52e <__retarget_lock_release_recursive>
 800ed26:	bf00      	nop
 800ed28:	2000327c 	.word	0x2000327c

0800ed2c <_realloc_r>:
 800ed2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2e:	4607      	mov	r7, r0
 800ed30:	4614      	mov	r4, r2
 800ed32:	460e      	mov	r6, r1
 800ed34:	b921      	cbnz	r1, 800ed40 <_realloc_r+0x14>
 800ed36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed3a:	4611      	mov	r1, r2
 800ed3c:	f7ff bdb2 	b.w	800e8a4 <_malloc_r>
 800ed40:	b922      	cbnz	r2, 800ed4c <_realloc_r+0x20>
 800ed42:	f7ff fd5f 	bl	800e804 <_free_r>
 800ed46:	4625      	mov	r5, r4
 800ed48:	4628      	mov	r0, r5
 800ed4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed4c:	f000 fc54 	bl	800f5f8 <_malloc_usable_size_r>
 800ed50:	42a0      	cmp	r0, r4
 800ed52:	d20f      	bcs.n	800ed74 <_realloc_r+0x48>
 800ed54:	4621      	mov	r1, r4
 800ed56:	4638      	mov	r0, r7
 800ed58:	f7ff fda4 	bl	800e8a4 <_malloc_r>
 800ed5c:	4605      	mov	r5, r0
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	d0f2      	beq.n	800ed48 <_realloc_r+0x1c>
 800ed62:	4631      	mov	r1, r6
 800ed64:	4622      	mov	r2, r4
 800ed66:	f7ff f875 	bl	800de54 <memcpy>
 800ed6a:	4631      	mov	r1, r6
 800ed6c:	4638      	mov	r0, r7
 800ed6e:	f7ff fd49 	bl	800e804 <_free_r>
 800ed72:	e7e9      	b.n	800ed48 <_realloc_r+0x1c>
 800ed74:	4635      	mov	r5, r6
 800ed76:	e7e7      	b.n	800ed48 <_realloc_r+0x1c>

0800ed78 <__sfputc_r>:
 800ed78:	6893      	ldr	r3, [r2, #8]
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	b410      	push	{r4}
 800ed80:	6093      	str	r3, [r2, #8]
 800ed82:	da08      	bge.n	800ed96 <__sfputc_r+0x1e>
 800ed84:	6994      	ldr	r4, [r2, #24]
 800ed86:	42a3      	cmp	r3, r4
 800ed88:	db01      	blt.n	800ed8e <__sfputc_r+0x16>
 800ed8a:	290a      	cmp	r1, #10
 800ed8c:	d103      	bne.n	800ed96 <__sfputc_r+0x1e>
 800ed8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed92:	f000 b94b 	b.w	800f02c <__swbuf_r>
 800ed96:	6813      	ldr	r3, [r2, #0]
 800ed98:	1c58      	adds	r0, r3, #1
 800ed9a:	6010      	str	r0, [r2, #0]
 800ed9c:	7019      	strb	r1, [r3, #0]
 800ed9e:	4608      	mov	r0, r1
 800eda0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda4:	4770      	bx	lr

0800eda6 <__sfputs_r>:
 800eda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda8:	4606      	mov	r6, r0
 800edaa:	460f      	mov	r7, r1
 800edac:	4614      	mov	r4, r2
 800edae:	18d5      	adds	r5, r2, r3
 800edb0:	42ac      	cmp	r4, r5
 800edb2:	d101      	bne.n	800edb8 <__sfputs_r+0x12>
 800edb4:	2000      	movs	r0, #0
 800edb6:	e007      	b.n	800edc8 <__sfputs_r+0x22>
 800edb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edbc:	463a      	mov	r2, r7
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7ff ffda 	bl	800ed78 <__sfputc_r>
 800edc4:	1c43      	adds	r3, r0, #1
 800edc6:	d1f3      	bne.n	800edb0 <__sfputs_r+0xa>
 800edc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800edcc <_vfiprintf_r>:
 800edcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd0:	460d      	mov	r5, r1
 800edd2:	b09d      	sub	sp, #116	; 0x74
 800edd4:	4614      	mov	r4, r2
 800edd6:	4698      	mov	r8, r3
 800edd8:	4606      	mov	r6, r0
 800edda:	b118      	cbz	r0, 800ede4 <_vfiprintf_r+0x18>
 800eddc:	6983      	ldr	r3, [r0, #24]
 800edde:	b90b      	cbnz	r3, 800ede4 <_vfiprintf_r+0x18>
 800ede0:	f000 fb06 	bl	800f3f0 <__sinit>
 800ede4:	4b89      	ldr	r3, [pc, #548]	; (800f00c <_vfiprintf_r+0x240>)
 800ede6:	429d      	cmp	r5, r3
 800ede8:	d11b      	bne.n	800ee22 <_vfiprintf_r+0x56>
 800edea:	6875      	ldr	r5, [r6, #4]
 800edec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edee:	07d9      	lsls	r1, r3, #31
 800edf0:	d405      	bmi.n	800edfe <_vfiprintf_r+0x32>
 800edf2:	89ab      	ldrh	r3, [r5, #12]
 800edf4:	059a      	lsls	r2, r3, #22
 800edf6:	d402      	bmi.n	800edfe <_vfiprintf_r+0x32>
 800edf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edfa:	f000 fb97 	bl	800f52c <__retarget_lock_acquire_recursive>
 800edfe:	89ab      	ldrh	r3, [r5, #12]
 800ee00:	071b      	lsls	r3, r3, #28
 800ee02:	d501      	bpl.n	800ee08 <_vfiprintf_r+0x3c>
 800ee04:	692b      	ldr	r3, [r5, #16]
 800ee06:	b9eb      	cbnz	r3, 800ee44 <_vfiprintf_r+0x78>
 800ee08:	4629      	mov	r1, r5
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	f000 f960 	bl	800f0d0 <__swsetup_r>
 800ee10:	b1c0      	cbz	r0, 800ee44 <_vfiprintf_r+0x78>
 800ee12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee14:	07dc      	lsls	r4, r3, #31
 800ee16:	d50e      	bpl.n	800ee36 <_vfiprintf_r+0x6a>
 800ee18:	f04f 30ff 	mov.w	r0, #4294967295
 800ee1c:	b01d      	add	sp, #116	; 0x74
 800ee1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee22:	4b7b      	ldr	r3, [pc, #492]	; (800f010 <_vfiprintf_r+0x244>)
 800ee24:	429d      	cmp	r5, r3
 800ee26:	d101      	bne.n	800ee2c <_vfiprintf_r+0x60>
 800ee28:	68b5      	ldr	r5, [r6, #8]
 800ee2a:	e7df      	b.n	800edec <_vfiprintf_r+0x20>
 800ee2c:	4b79      	ldr	r3, [pc, #484]	; (800f014 <_vfiprintf_r+0x248>)
 800ee2e:	429d      	cmp	r5, r3
 800ee30:	bf08      	it	eq
 800ee32:	68f5      	ldreq	r5, [r6, #12]
 800ee34:	e7da      	b.n	800edec <_vfiprintf_r+0x20>
 800ee36:	89ab      	ldrh	r3, [r5, #12]
 800ee38:	0598      	lsls	r0, r3, #22
 800ee3a:	d4ed      	bmi.n	800ee18 <_vfiprintf_r+0x4c>
 800ee3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee3e:	f000 fb76 	bl	800f52e <__retarget_lock_release_recursive>
 800ee42:	e7e9      	b.n	800ee18 <_vfiprintf_r+0x4c>
 800ee44:	2300      	movs	r3, #0
 800ee46:	9309      	str	r3, [sp, #36]	; 0x24
 800ee48:	2320      	movs	r3, #32
 800ee4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee52:	2330      	movs	r3, #48	; 0x30
 800ee54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f018 <_vfiprintf_r+0x24c>
 800ee58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee5c:	f04f 0901 	mov.w	r9, #1
 800ee60:	4623      	mov	r3, r4
 800ee62:	469a      	mov	sl, r3
 800ee64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee68:	b10a      	cbz	r2, 800ee6e <_vfiprintf_r+0xa2>
 800ee6a:	2a25      	cmp	r2, #37	; 0x25
 800ee6c:	d1f9      	bne.n	800ee62 <_vfiprintf_r+0x96>
 800ee6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee72:	d00b      	beq.n	800ee8c <_vfiprintf_r+0xc0>
 800ee74:	465b      	mov	r3, fp
 800ee76:	4622      	mov	r2, r4
 800ee78:	4629      	mov	r1, r5
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	f7ff ff93 	bl	800eda6 <__sfputs_r>
 800ee80:	3001      	adds	r0, #1
 800ee82:	f000 80aa 	beq.w	800efda <_vfiprintf_r+0x20e>
 800ee86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee88:	445a      	add	r2, fp
 800ee8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ee8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f000 80a2 	beq.w	800efda <_vfiprintf_r+0x20e>
 800ee96:	2300      	movs	r3, #0
 800ee98:	f04f 32ff 	mov.w	r2, #4294967295
 800ee9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eea0:	f10a 0a01 	add.w	sl, sl, #1
 800eea4:	9304      	str	r3, [sp, #16]
 800eea6:	9307      	str	r3, [sp, #28]
 800eea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eeac:	931a      	str	r3, [sp, #104]	; 0x68
 800eeae:	4654      	mov	r4, sl
 800eeb0:	2205      	movs	r2, #5
 800eeb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb6:	4858      	ldr	r0, [pc, #352]	; (800f018 <_vfiprintf_r+0x24c>)
 800eeb8:	f7f1 f99a 	bl	80001f0 <memchr>
 800eebc:	9a04      	ldr	r2, [sp, #16]
 800eebe:	b9d8      	cbnz	r0, 800eef8 <_vfiprintf_r+0x12c>
 800eec0:	06d1      	lsls	r1, r2, #27
 800eec2:	bf44      	itt	mi
 800eec4:	2320      	movmi	r3, #32
 800eec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eeca:	0713      	lsls	r3, r2, #28
 800eecc:	bf44      	itt	mi
 800eece:	232b      	movmi	r3, #43	; 0x2b
 800eed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eed4:	f89a 3000 	ldrb.w	r3, [sl]
 800eed8:	2b2a      	cmp	r3, #42	; 0x2a
 800eeda:	d015      	beq.n	800ef08 <_vfiprintf_r+0x13c>
 800eedc:	9a07      	ldr	r2, [sp, #28]
 800eede:	4654      	mov	r4, sl
 800eee0:	2000      	movs	r0, #0
 800eee2:	f04f 0c0a 	mov.w	ip, #10
 800eee6:	4621      	mov	r1, r4
 800eee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeec:	3b30      	subs	r3, #48	; 0x30
 800eeee:	2b09      	cmp	r3, #9
 800eef0:	d94e      	bls.n	800ef90 <_vfiprintf_r+0x1c4>
 800eef2:	b1b0      	cbz	r0, 800ef22 <_vfiprintf_r+0x156>
 800eef4:	9207      	str	r2, [sp, #28]
 800eef6:	e014      	b.n	800ef22 <_vfiprintf_r+0x156>
 800eef8:	eba0 0308 	sub.w	r3, r0, r8
 800eefc:	fa09 f303 	lsl.w	r3, r9, r3
 800ef00:	4313      	orrs	r3, r2
 800ef02:	9304      	str	r3, [sp, #16]
 800ef04:	46a2      	mov	sl, r4
 800ef06:	e7d2      	b.n	800eeae <_vfiprintf_r+0xe2>
 800ef08:	9b03      	ldr	r3, [sp, #12]
 800ef0a:	1d19      	adds	r1, r3, #4
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	9103      	str	r1, [sp, #12]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	bfbb      	ittet	lt
 800ef14:	425b      	neglt	r3, r3
 800ef16:	f042 0202 	orrlt.w	r2, r2, #2
 800ef1a:	9307      	strge	r3, [sp, #28]
 800ef1c:	9307      	strlt	r3, [sp, #28]
 800ef1e:	bfb8      	it	lt
 800ef20:	9204      	strlt	r2, [sp, #16]
 800ef22:	7823      	ldrb	r3, [r4, #0]
 800ef24:	2b2e      	cmp	r3, #46	; 0x2e
 800ef26:	d10c      	bne.n	800ef42 <_vfiprintf_r+0x176>
 800ef28:	7863      	ldrb	r3, [r4, #1]
 800ef2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef2c:	d135      	bne.n	800ef9a <_vfiprintf_r+0x1ce>
 800ef2e:	9b03      	ldr	r3, [sp, #12]
 800ef30:	1d1a      	adds	r2, r3, #4
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	9203      	str	r2, [sp, #12]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	bfb8      	it	lt
 800ef3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef3e:	3402      	adds	r4, #2
 800ef40:	9305      	str	r3, [sp, #20]
 800ef42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f028 <_vfiprintf_r+0x25c>
 800ef46:	7821      	ldrb	r1, [r4, #0]
 800ef48:	2203      	movs	r2, #3
 800ef4a:	4650      	mov	r0, sl
 800ef4c:	f7f1 f950 	bl	80001f0 <memchr>
 800ef50:	b140      	cbz	r0, 800ef64 <_vfiprintf_r+0x198>
 800ef52:	2340      	movs	r3, #64	; 0x40
 800ef54:	eba0 000a 	sub.w	r0, r0, sl
 800ef58:	fa03 f000 	lsl.w	r0, r3, r0
 800ef5c:	9b04      	ldr	r3, [sp, #16]
 800ef5e:	4303      	orrs	r3, r0
 800ef60:	3401      	adds	r4, #1
 800ef62:	9304      	str	r3, [sp, #16]
 800ef64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef68:	482c      	ldr	r0, [pc, #176]	; (800f01c <_vfiprintf_r+0x250>)
 800ef6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef6e:	2206      	movs	r2, #6
 800ef70:	f7f1 f93e 	bl	80001f0 <memchr>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d03f      	beq.n	800eff8 <_vfiprintf_r+0x22c>
 800ef78:	4b29      	ldr	r3, [pc, #164]	; (800f020 <_vfiprintf_r+0x254>)
 800ef7a:	bb1b      	cbnz	r3, 800efc4 <_vfiprintf_r+0x1f8>
 800ef7c:	9b03      	ldr	r3, [sp, #12]
 800ef7e:	3307      	adds	r3, #7
 800ef80:	f023 0307 	bic.w	r3, r3, #7
 800ef84:	3308      	adds	r3, #8
 800ef86:	9303      	str	r3, [sp, #12]
 800ef88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef8a:	443b      	add	r3, r7
 800ef8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef8e:	e767      	b.n	800ee60 <_vfiprintf_r+0x94>
 800ef90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef94:	460c      	mov	r4, r1
 800ef96:	2001      	movs	r0, #1
 800ef98:	e7a5      	b.n	800eee6 <_vfiprintf_r+0x11a>
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	3401      	adds	r4, #1
 800ef9e:	9305      	str	r3, [sp, #20]
 800efa0:	4619      	mov	r1, r3
 800efa2:	f04f 0c0a 	mov.w	ip, #10
 800efa6:	4620      	mov	r0, r4
 800efa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efac:	3a30      	subs	r2, #48	; 0x30
 800efae:	2a09      	cmp	r2, #9
 800efb0:	d903      	bls.n	800efba <_vfiprintf_r+0x1ee>
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d0c5      	beq.n	800ef42 <_vfiprintf_r+0x176>
 800efb6:	9105      	str	r1, [sp, #20]
 800efb8:	e7c3      	b.n	800ef42 <_vfiprintf_r+0x176>
 800efba:	fb0c 2101 	mla	r1, ip, r1, r2
 800efbe:	4604      	mov	r4, r0
 800efc0:	2301      	movs	r3, #1
 800efc2:	e7f0      	b.n	800efa6 <_vfiprintf_r+0x1da>
 800efc4:	ab03      	add	r3, sp, #12
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	462a      	mov	r2, r5
 800efca:	4b16      	ldr	r3, [pc, #88]	; (800f024 <_vfiprintf_r+0x258>)
 800efcc:	a904      	add	r1, sp, #16
 800efce:	4630      	mov	r0, r6
 800efd0:	f7fc f884 	bl	800b0dc <_printf_float>
 800efd4:	4607      	mov	r7, r0
 800efd6:	1c78      	adds	r0, r7, #1
 800efd8:	d1d6      	bne.n	800ef88 <_vfiprintf_r+0x1bc>
 800efda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efdc:	07d9      	lsls	r1, r3, #31
 800efde:	d405      	bmi.n	800efec <_vfiprintf_r+0x220>
 800efe0:	89ab      	ldrh	r3, [r5, #12]
 800efe2:	059a      	lsls	r2, r3, #22
 800efe4:	d402      	bmi.n	800efec <_vfiprintf_r+0x220>
 800efe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efe8:	f000 faa1 	bl	800f52e <__retarget_lock_release_recursive>
 800efec:	89ab      	ldrh	r3, [r5, #12]
 800efee:	065b      	lsls	r3, r3, #25
 800eff0:	f53f af12 	bmi.w	800ee18 <_vfiprintf_r+0x4c>
 800eff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eff6:	e711      	b.n	800ee1c <_vfiprintf_r+0x50>
 800eff8:	ab03      	add	r3, sp, #12
 800effa:	9300      	str	r3, [sp, #0]
 800effc:	462a      	mov	r2, r5
 800effe:	4b09      	ldr	r3, [pc, #36]	; (800f024 <_vfiprintf_r+0x258>)
 800f000:	a904      	add	r1, sp, #16
 800f002:	4630      	mov	r0, r6
 800f004:	f7fc fb0e 	bl	800b624 <_printf_i>
 800f008:	e7e4      	b.n	800efd4 <_vfiprintf_r+0x208>
 800f00a:	bf00      	nop
 800f00c:	08024074 	.word	0x08024074
 800f010:	08024094 	.word	0x08024094
 800f014:	08024054 	.word	0x08024054
 800f018:	08024004 	.word	0x08024004
 800f01c:	0802400e 	.word	0x0802400e
 800f020:	0800b0dd 	.word	0x0800b0dd
 800f024:	0800eda7 	.word	0x0800eda7
 800f028:	0802400a 	.word	0x0802400a

0800f02c <__swbuf_r>:
 800f02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f02e:	460e      	mov	r6, r1
 800f030:	4614      	mov	r4, r2
 800f032:	4605      	mov	r5, r0
 800f034:	b118      	cbz	r0, 800f03e <__swbuf_r+0x12>
 800f036:	6983      	ldr	r3, [r0, #24]
 800f038:	b90b      	cbnz	r3, 800f03e <__swbuf_r+0x12>
 800f03a:	f000 f9d9 	bl	800f3f0 <__sinit>
 800f03e:	4b21      	ldr	r3, [pc, #132]	; (800f0c4 <__swbuf_r+0x98>)
 800f040:	429c      	cmp	r4, r3
 800f042:	d12b      	bne.n	800f09c <__swbuf_r+0x70>
 800f044:	686c      	ldr	r4, [r5, #4]
 800f046:	69a3      	ldr	r3, [r4, #24]
 800f048:	60a3      	str	r3, [r4, #8]
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	071a      	lsls	r2, r3, #28
 800f04e:	d52f      	bpl.n	800f0b0 <__swbuf_r+0x84>
 800f050:	6923      	ldr	r3, [r4, #16]
 800f052:	b36b      	cbz	r3, 800f0b0 <__swbuf_r+0x84>
 800f054:	6923      	ldr	r3, [r4, #16]
 800f056:	6820      	ldr	r0, [r4, #0]
 800f058:	1ac0      	subs	r0, r0, r3
 800f05a:	6963      	ldr	r3, [r4, #20]
 800f05c:	b2f6      	uxtb	r6, r6
 800f05e:	4283      	cmp	r3, r0
 800f060:	4637      	mov	r7, r6
 800f062:	dc04      	bgt.n	800f06e <__swbuf_r+0x42>
 800f064:	4621      	mov	r1, r4
 800f066:	4628      	mov	r0, r5
 800f068:	f000 f92e 	bl	800f2c8 <_fflush_r>
 800f06c:	bb30      	cbnz	r0, 800f0bc <__swbuf_r+0x90>
 800f06e:	68a3      	ldr	r3, [r4, #8]
 800f070:	3b01      	subs	r3, #1
 800f072:	60a3      	str	r3, [r4, #8]
 800f074:	6823      	ldr	r3, [r4, #0]
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	6022      	str	r2, [r4, #0]
 800f07a:	701e      	strb	r6, [r3, #0]
 800f07c:	6963      	ldr	r3, [r4, #20]
 800f07e:	3001      	adds	r0, #1
 800f080:	4283      	cmp	r3, r0
 800f082:	d004      	beq.n	800f08e <__swbuf_r+0x62>
 800f084:	89a3      	ldrh	r3, [r4, #12]
 800f086:	07db      	lsls	r3, r3, #31
 800f088:	d506      	bpl.n	800f098 <__swbuf_r+0x6c>
 800f08a:	2e0a      	cmp	r6, #10
 800f08c:	d104      	bne.n	800f098 <__swbuf_r+0x6c>
 800f08e:	4621      	mov	r1, r4
 800f090:	4628      	mov	r0, r5
 800f092:	f000 f919 	bl	800f2c8 <_fflush_r>
 800f096:	b988      	cbnz	r0, 800f0bc <__swbuf_r+0x90>
 800f098:	4638      	mov	r0, r7
 800f09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f09c:	4b0a      	ldr	r3, [pc, #40]	; (800f0c8 <__swbuf_r+0x9c>)
 800f09e:	429c      	cmp	r4, r3
 800f0a0:	d101      	bne.n	800f0a6 <__swbuf_r+0x7a>
 800f0a2:	68ac      	ldr	r4, [r5, #8]
 800f0a4:	e7cf      	b.n	800f046 <__swbuf_r+0x1a>
 800f0a6:	4b09      	ldr	r3, [pc, #36]	; (800f0cc <__swbuf_r+0xa0>)
 800f0a8:	429c      	cmp	r4, r3
 800f0aa:	bf08      	it	eq
 800f0ac:	68ec      	ldreq	r4, [r5, #12]
 800f0ae:	e7ca      	b.n	800f046 <__swbuf_r+0x1a>
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	f000 f80c 	bl	800f0d0 <__swsetup_r>
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d0cb      	beq.n	800f054 <__swbuf_r+0x28>
 800f0bc:	f04f 37ff 	mov.w	r7, #4294967295
 800f0c0:	e7ea      	b.n	800f098 <__swbuf_r+0x6c>
 800f0c2:	bf00      	nop
 800f0c4:	08024074 	.word	0x08024074
 800f0c8:	08024094 	.word	0x08024094
 800f0cc:	08024054 	.word	0x08024054

0800f0d0 <__swsetup_r>:
 800f0d0:	4b32      	ldr	r3, [pc, #200]	; (800f19c <__swsetup_r+0xcc>)
 800f0d2:	b570      	push	{r4, r5, r6, lr}
 800f0d4:	681d      	ldr	r5, [r3, #0]
 800f0d6:	4606      	mov	r6, r0
 800f0d8:	460c      	mov	r4, r1
 800f0da:	b125      	cbz	r5, 800f0e6 <__swsetup_r+0x16>
 800f0dc:	69ab      	ldr	r3, [r5, #24]
 800f0de:	b913      	cbnz	r3, 800f0e6 <__swsetup_r+0x16>
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	f000 f985 	bl	800f3f0 <__sinit>
 800f0e6:	4b2e      	ldr	r3, [pc, #184]	; (800f1a0 <__swsetup_r+0xd0>)
 800f0e8:	429c      	cmp	r4, r3
 800f0ea:	d10f      	bne.n	800f10c <__swsetup_r+0x3c>
 800f0ec:	686c      	ldr	r4, [r5, #4]
 800f0ee:	89a3      	ldrh	r3, [r4, #12]
 800f0f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0f4:	0719      	lsls	r1, r3, #28
 800f0f6:	d42c      	bmi.n	800f152 <__swsetup_r+0x82>
 800f0f8:	06dd      	lsls	r5, r3, #27
 800f0fa:	d411      	bmi.n	800f120 <__swsetup_r+0x50>
 800f0fc:	2309      	movs	r3, #9
 800f0fe:	6033      	str	r3, [r6, #0]
 800f100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f104:	81a3      	strh	r3, [r4, #12]
 800f106:	f04f 30ff 	mov.w	r0, #4294967295
 800f10a:	e03e      	b.n	800f18a <__swsetup_r+0xba>
 800f10c:	4b25      	ldr	r3, [pc, #148]	; (800f1a4 <__swsetup_r+0xd4>)
 800f10e:	429c      	cmp	r4, r3
 800f110:	d101      	bne.n	800f116 <__swsetup_r+0x46>
 800f112:	68ac      	ldr	r4, [r5, #8]
 800f114:	e7eb      	b.n	800f0ee <__swsetup_r+0x1e>
 800f116:	4b24      	ldr	r3, [pc, #144]	; (800f1a8 <__swsetup_r+0xd8>)
 800f118:	429c      	cmp	r4, r3
 800f11a:	bf08      	it	eq
 800f11c:	68ec      	ldreq	r4, [r5, #12]
 800f11e:	e7e6      	b.n	800f0ee <__swsetup_r+0x1e>
 800f120:	0758      	lsls	r0, r3, #29
 800f122:	d512      	bpl.n	800f14a <__swsetup_r+0x7a>
 800f124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f126:	b141      	cbz	r1, 800f13a <__swsetup_r+0x6a>
 800f128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f12c:	4299      	cmp	r1, r3
 800f12e:	d002      	beq.n	800f136 <__swsetup_r+0x66>
 800f130:	4630      	mov	r0, r6
 800f132:	f7ff fb67 	bl	800e804 <_free_r>
 800f136:	2300      	movs	r3, #0
 800f138:	6363      	str	r3, [r4, #52]	; 0x34
 800f13a:	89a3      	ldrh	r3, [r4, #12]
 800f13c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f140:	81a3      	strh	r3, [r4, #12]
 800f142:	2300      	movs	r3, #0
 800f144:	6063      	str	r3, [r4, #4]
 800f146:	6923      	ldr	r3, [r4, #16]
 800f148:	6023      	str	r3, [r4, #0]
 800f14a:	89a3      	ldrh	r3, [r4, #12]
 800f14c:	f043 0308 	orr.w	r3, r3, #8
 800f150:	81a3      	strh	r3, [r4, #12]
 800f152:	6923      	ldr	r3, [r4, #16]
 800f154:	b94b      	cbnz	r3, 800f16a <__swsetup_r+0x9a>
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f15c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f160:	d003      	beq.n	800f16a <__swsetup_r+0x9a>
 800f162:	4621      	mov	r1, r4
 800f164:	4630      	mov	r0, r6
 800f166:	f000 fa07 	bl	800f578 <__smakebuf_r>
 800f16a:	89a0      	ldrh	r0, [r4, #12]
 800f16c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f170:	f010 0301 	ands.w	r3, r0, #1
 800f174:	d00a      	beq.n	800f18c <__swsetup_r+0xbc>
 800f176:	2300      	movs	r3, #0
 800f178:	60a3      	str	r3, [r4, #8]
 800f17a:	6963      	ldr	r3, [r4, #20]
 800f17c:	425b      	negs	r3, r3
 800f17e:	61a3      	str	r3, [r4, #24]
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	b943      	cbnz	r3, 800f196 <__swsetup_r+0xc6>
 800f184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f188:	d1ba      	bne.n	800f100 <__swsetup_r+0x30>
 800f18a:	bd70      	pop	{r4, r5, r6, pc}
 800f18c:	0781      	lsls	r1, r0, #30
 800f18e:	bf58      	it	pl
 800f190:	6963      	ldrpl	r3, [r4, #20]
 800f192:	60a3      	str	r3, [r4, #8]
 800f194:	e7f4      	b.n	800f180 <__swsetup_r+0xb0>
 800f196:	2000      	movs	r0, #0
 800f198:	e7f7      	b.n	800f18a <__swsetup_r+0xba>
 800f19a:	bf00      	nop
 800f19c:	200029f8 	.word	0x200029f8
 800f1a0:	08024074 	.word	0x08024074
 800f1a4:	08024094 	.word	0x08024094
 800f1a8:	08024054 	.word	0x08024054

0800f1ac <abort>:
 800f1ac:	b508      	push	{r3, lr}
 800f1ae:	2006      	movs	r0, #6
 800f1b0:	f000 fa52 	bl	800f658 <raise>
 800f1b4:	2001      	movs	r0, #1
 800f1b6:	f7f6 f803 	bl	80051c0 <_exit>
	...

0800f1bc <__sflush_r>:
 800f1bc:	898a      	ldrh	r2, [r1, #12]
 800f1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	0710      	lsls	r0, r2, #28
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	d458      	bmi.n	800f27c <__sflush_r+0xc0>
 800f1ca:	684b      	ldr	r3, [r1, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	dc05      	bgt.n	800f1dc <__sflush_r+0x20>
 800f1d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	dc02      	bgt.n	800f1dc <__sflush_r+0x20>
 800f1d6:	2000      	movs	r0, #0
 800f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1de:	2e00      	cmp	r6, #0
 800f1e0:	d0f9      	beq.n	800f1d6 <__sflush_r+0x1a>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1e8:	682f      	ldr	r7, [r5, #0]
 800f1ea:	602b      	str	r3, [r5, #0]
 800f1ec:	d032      	beq.n	800f254 <__sflush_r+0x98>
 800f1ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1f0:	89a3      	ldrh	r3, [r4, #12]
 800f1f2:	075a      	lsls	r2, r3, #29
 800f1f4:	d505      	bpl.n	800f202 <__sflush_r+0x46>
 800f1f6:	6863      	ldr	r3, [r4, #4]
 800f1f8:	1ac0      	subs	r0, r0, r3
 800f1fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1fc:	b10b      	cbz	r3, 800f202 <__sflush_r+0x46>
 800f1fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f200:	1ac0      	subs	r0, r0, r3
 800f202:	2300      	movs	r3, #0
 800f204:	4602      	mov	r2, r0
 800f206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f208:	6a21      	ldr	r1, [r4, #32]
 800f20a:	4628      	mov	r0, r5
 800f20c:	47b0      	blx	r6
 800f20e:	1c43      	adds	r3, r0, #1
 800f210:	89a3      	ldrh	r3, [r4, #12]
 800f212:	d106      	bne.n	800f222 <__sflush_r+0x66>
 800f214:	6829      	ldr	r1, [r5, #0]
 800f216:	291d      	cmp	r1, #29
 800f218:	d82c      	bhi.n	800f274 <__sflush_r+0xb8>
 800f21a:	4a2a      	ldr	r2, [pc, #168]	; (800f2c4 <__sflush_r+0x108>)
 800f21c:	40ca      	lsrs	r2, r1
 800f21e:	07d6      	lsls	r6, r2, #31
 800f220:	d528      	bpl.n	800f274 <__sflush_r+0xb8>
 800f222:	2200      	movs	r2, #0
 800f224:	6062      	str	r2, [r4, #4]
 800f226:	04d9      	lsls	r1, r3, #19
 800f228:	6922      	ldr	r2, [r4, #16]
 800f22a:	6022      	str	r2, [r4, #0]
 800f22c:	d504      	bpl.n	800f238 <__sflush_r+0x7c>
 800f22e:	1c42      	adds	r2, r0, #1
 800f230:	d101      	bne.n	800f236 <__sflush_r+0x7a>
 800f232:	682b      	ldr	r3, [r5, #0]
 800f234:	b903      	cbnz	r3, 800f238 <__sflush_r+0x7c>
 800f236:	6560      	str	r0, [r4, #84]	; 0x54
 800f238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f23a:	602f      	str	r7, [r5, #0]
 800f23c:	2900      	cmp	r1, #0
 800f23e:	d0ca      	beq.n	800f1d6 <__sflush_r+0x1a>
 800f240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f244:	4299      	cmp	r1, r3
 800f246:	d002      	beq.n	800f24e <__sflush_r+0x92>
 800f248:	4628      	mov	r0, r5
 800f24a:	f7ff fadb 	bl	800e804 <_free_r>
 800f24e:	2000      	movs	r0, #0
 800f250:	6360      	str	r0, [r4, #52]	; 0x34
 800f252:	e7c1      	b.n	800f1d8 <__sflush_r+0x1c>
 800f254:	6a21      	ldr	r1, [r4, #32]
 800f256:	2301      	movs	r3, #1
 800f258:	4628      	mov	r0, r5
 800f25a:	47b0      	blx	r6
 800f25c:	1c41      	adds	r1, r0, #1
 800f25e:	d1c7      	bne.n	800f1f0 <__sflush_r+0x34>
 800f260:	682b      	ldr	r3, [r5, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d0c4      	beq.n	800f1f0 <__sflush_r+0x34>
 800f266:	2b1d      	cmp	r3, #29
 800f268:	d001      	beq.n	800f26e <__sflush_r+0xb2>
 800f26a:	2b16      	cmp	r3, #22
 800f26c:	d101      	bne.n	800f272 <__sflush_r+0xb6>
 800f26e:	602f      	str	r7, [r5, #0]
 800f270:	e7b1      	b.n	800f1d6 <__sflush_r+0x1a>
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f278:	81a3      	strh	r3, [r4, #12]
 800f27a:	e7ad      	b.n	800f1d8 <__sflush_r+0x1c>
 800f27c:	690f      	ldr	r7, [r1, #16]
 800f27e:	2f00      	cmp	r7, #0
 800f280:	d0a9      	beq.n	800f1d6 <__sflush_r+0x1a>
 800f282:	0793      	lsls	r3, r2, #30
 800f284:	680e      	ldr	r6, [r1, #0]
 800f286:	bf08      	it	eq
 800f288:	694b      	ldreq	r3, [r1, #20]
 800f28a:	600f      	str	r7, [r1, #0]
 800f28c:	bf18      	it	ne
 800f28e:	2300      	movne	r3, #0
 800f290:	eba6 0807 	sub.w	r8, r6, r7
 800f294:	608b      	str	r3, [r1, #8]
 800f296:	f1b8 0f00 	cmp.w	r8, #0
 800f29a:	dd9c      	ble.n	800f1d6 <__sflush_r+0x1a>
 800f29c:	6a21      	ldr	r1, [r4, #32]
 800f29e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2a0:	4643      	mov	r3, r8
 800f2a2:	463a      	mov	r2, r7
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	47b0      	blx	r6
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	dc06      	bgt.n	800f2ba <__sflush_r+0xfe>
 800f2ac:	89a3      	ldrh	r3, [r4, #12]
 800f2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2b2:	81a3      	strh	r3, [r4, #12]
 800f2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b8:	e78e      	b.n	800f1d8 <__sflush_r+0x1c>
 800f2ba:	4407      	add	r7, r0
 800f2bc:	eba8 0800 	sub.w	r8, r8, r0
 800f2c0:	e7e9      	b.n	800f296 <__sflush_r+0xda>
 800f2c2:	bf00      	nop
 800f2c4:	20400001 	.word	0x20400001

0800f2c8 <_fflush_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	690b      	ldr	r3, [r1, #16]
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	460c      	mov	r4, r1
 800f2d0:	b913      	cbnz	r3, 800f2d8 <_fflush_r+0x10>
 800f2d2:	2500      	movs	r5, #0
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	b118      	cbz	r0, 800f2e2 <_fflush_r+0x1a>
 800f2da:	6983      	ldr	r3, [r0, #24]
 800f2dc:	b90b      	cbnz	r3, 800f2e2 <_fflush_r+0x1a>
 800f2de:	f000 f887 	bl	800f3f0 <__sinit>
 800f2e2:	4b14      	ldr	r3, [pc, #80]	; (800f334 <_fflush_r+0x6c>)
 800f2e4:	429c      	cmp	r4, r3
 800f2e6:	d11b      	bne.n	800f320 <_fflush_r+0x58>
 800f2e8:	686c      	ldr	r4, [r5, #4]
 800f2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d0ef      	beq.n	800f2d2 <_fflush_r+0xa>
 800f2f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2f4:	07d0      	lsls	r0, r2, #31
 800f2f6:	d404      	bmi.n	800f302 <_fflush_r+0x3a>
 800f2f8:	0599      	lsls	r1, r3, #22
 800f2fa:	d402      	bmi.n	800f302 <_fflush_r+0x3a>
 800f2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2fe:	f000 f915 	bl	800f52c <__retarget_lock_acquire_recursive>
 800f302:	4628      	mov	r0, r5
 800f304:	4621      	mov	r1, r4
 800f306:	f7ff ff59 	bl	800f1bc <__sflush_r>
 800f30a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f30c:	07da      	lsls	r2, r3, #31
 800f30e:	4605      	mov	r5, r0
 800f310:	d4e0      	bmi.n	800f2d4 <_fflush_r+0xc>
 800f312:	89a3      	ldrh	r3, [r4, #12]
 800f314:	059b      	lsls	r3, r3, #22
 800f316:	d4dd      	bmi.n	800f2d4 <_fflush_r+0xc>
 800f318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f31a:	f000 f908 	bl	800f52e <__retarget_lock_release_recursive>
 800f31e:	e7d9      	b.n	800f2d4 <_fflush_r+0xc>
 800f320:	4b05      	ldr	r3, [pc, #20]	; (800f338 <_fflush_r+0x70>)
 800f322:	429c      	cmp	r4, r3
 800f324:	d101      	bne.n	800f32a <_fflush_r+0x62>
 800f326:	68ac      	ldr	r4, [r5, #8]
 800f328:	e7df      	b.n	800f2ea <_fflush_r+0x22>
 800f32a:	4b04      	ldr	r3, [pc, #16]	; (800f33c <_fflush_r+0x74>)
 800f32c:	429c      	cmp	r4, r3
 800f32e:	bf08      	it	eq
 800f330:	68ec      	ldreq	r4, [r5, #12]
 800f332:	e7da      	b.n	800f2ea <_fflush_r+0x22>
 800f334:	08024074 	.word	0x08024074
 800f338:	08024094 	.word	0x08024094
 800f33c:	08024054 	.word	0x08024054

0800f340 <std>:
 800f340:	2300      	movs	r3, #0
 800f342:	b510      	push	{r4, lr}
 800f344:	4604      	mov	r4, r0
 800f346:	e9c0 3300 	strd	r3, r3, [r0]
 800f34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f34e:	6083      	str	r3, [r0, #8]
 800f350:	8181      	strh	r1, [r0, #12]
 800f352:	6643      	str	r3, [r0, #100]	; 0x64
 800f354:	81c2      	strh	r2, [r0, #14]
 800f356:	6183      	str	r3, [r0, #24]
 800f358:	4619      	mov	r1, r3
 800f35a:	2208      	movs	r2, #8
 800f35c:	305c      	adds	r0, #92	; 0x5c
 800f35e:	f7fb fe15 	bl	800af8c <memset>
 800f362:	4b05      	ldr	r3, [pc, #20]	; (800f378 <std+0x38>)
 800f364:	6263      	str	r3, [r4, #36]	; 0x24
 800f366:	4b05      	ldr	r3, [pc, #20]	; (800f37c <std+0x3c>)
 800f368:	62a3      	str	r3, [r4, #40]	; 0x28
 800f36a:	4b05      	ldr	r3, [pc, #20]	; (800f380 <std+0x40>)
 800f36c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f36e:	4b05      	ldr	r3, [pc, #20]	; (800f384 <std+0x44>)
 800f370:	6224      	str	r4, [r4, #32]
 800f372:	6323      	str	r3, [r4, #48]	; 0x30
 800f374:	bd10      	pop	{r4, pc}
 800f376:	bf00      	nop
 800f378:	0800f691 	.word	0x0800f691
 800f37c:	0800f6b3 	.word	0x0800f6b3
 800f380:	0800f6eb 	.word	0x0800f6eb
 800f384:	0800f70f 	.word	0x0800f70f

0800f388 <_cleanup_r>:
 800f388:	4901      	ldr	r1, [pc, #4]	; (800f390 <_cleanup_r+0x8>)
 800f38a:	f000 b8af 	b.w	800f4ec <_fwalk_reent>
 800f38e:	bf00      	nop
 800f390:	0800f2c9 	.word	0x0800f2c9

0800f394 <__sfmoreglue>:
 800f394:	b570      	push	{r4, r5, r6, lr}
 800f396:	1e4a      	subs	r2, r1, #1
 800f398:	2568      	movs	r5, #104	; 0x68
 800f39a:	4355      	muls	r5, r2
 800f39c:	460e      	mov	r6, r1
 800f39e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f3a2:	f7ff fa7f 	bl	800e8a4 <_malloc_r>
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	b140      	cbz	r0, 800f3bc <__sfmoreglue+0x28>
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	e9c0 1600 	strd	r1, r6, [r0]
 800f3b0:	300c      	adds	r0, #12
 800f3b2:	60a0      	str	r0, [r4, #8]
 800f3b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f3b8:	f7fb fde8 	bl	800af8c <memset>
 800f3bc:	4620      	mov	r0, r4
 800f3be:	bd70      	pop	{r4, r5, r6, pc}

0800f3c0 <__sfp_lock_acquire>:
 800f3c0:	4801      	ldr	r0, [pc, #4]	; (800f3c8 <__sfp_lock_acquire+0x8>)
 800f3c2:	f000 b8b3 	b.w	800f52c <__retarget_lock_acquire_recursive>
 800f3c6:	bf00      	nop
 800f3c8:	20003280 	.word	0x20003280

0800f3cc <__sfp_lock_release>:
 800f3cc:	4801      	ldr	r0, [pc, #4]	; (800f3d4 <__sfp_lock_release+0x8>)
 800f3ce:	f000 b8ae 	b.w	800f52e <__retarget_lock_release_recursive>
 800f3d2:	bf00      	nop
 800f3d4:	20003280 	.word	0x20003280

0800f3d8 <__sinit_lock_acquire>:
 800f3d8:	4801      	ldr	r0, [pc, #4]	; (800f3e0 <__sinit_lock_acquire+0x8>)
 800f3da:	f000 b8a7 	b.w	800f52c <__retarget_lock_acquire_recursive>
 800f3de:	bf00      	nop
 800f3e0:	2000327b 	.word	0x2000327b

0800f3e4 <__sinit_lock_release>:
 800f3e4:	4801      	ldr	r0, [pc, #4]	; (800f3ec <__sinit_lock_release+0x8>)
 800f3e6:	f000 b8a2 	b.w	800f52e <__retarget_lock_release_recursive>
 800f3ea:	bf00      	nop
 800f3ec:	2000327b 	.word	0x2000327b

0800f3f0 <__sinit>:
 800f3f0:	b510      	push	{r4, lr}
 800f3f2:	4604      	mov	r4, r0
 800f3f4:	f7ff fff0 	bl	800f3d8 <__sinit_lock_acquire>
 800f3f8:	69a3      	ldr	r3, [r4, #24]
 800f3fa:	b11b      	cbz	r3, 800f404 <__sinit+0x14>
 800f3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f400:	f7ff bff0 	b.w	800f3e4 <__sinit_lock_release>
 800f404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f408:	6523      	str	r3, [r4, #80]	; 0x50
 800f40a:	4b13      	ldr	r3, [pc, #76]	; (800f458 <__sinit+0x68>)
 800f40c:	4a13      	ldr	r2, [pc, #76]	; (800f45c <__sinit+0x6c>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	62a2      	str	r2, [r4, #40]	; 0x28
 800f412:	42a3      	cmp	r3, r4
 800f414:	bf04      	itt	eq
 800f416:	2301      	moveq	r3, #1
 800f418:	61a3      	streq	r3, [r4, #24]
 800f41a:	4620      	mov	r0, r4
 800f41c:	f000 f820 	bl	800f460 <__sfp>
 800f420:	6060      	str	r0, [r4, #4]
 800f422:	4620      	mov	r0, r4
 800f424:	f000 f81c 	bl	800f460 <__sfp>
 800f428:	60a0      	str	r0, [r4, #8]
 800f42a:	4620      	mov	r0, r4
 800f42c:	f000 f818 	bl	800f460 <__sfp>
 800f430:	2200      	movs	r2, #0
 800f432:	60e0      	str	r0, [r4, #12]
 800f434:	2104      	movs	r1, #4
 800f436:	6860      	ldr	r0, [r4, #4]
 800f438:	f7ff ff82 	bl	800f340 <std>
 800f43c:	68a0      	ldr	r0, [r4, #8]
 800f43e:	2201      	movs	r2, #1
 800f440:	2109      	movs	r1, #9
 800f442:	f7ff ff7d 	bl	800f340 <std>
 800f446:	68e0      	ldr	r0, [r4, #12]
 800f448:	2202      	movs	r2, #2
 800f44a:	2112      	movs	r1, #18
 800f44c:	f7ff ff78 	bl	800f340 <std>
 800f450:	2301      	movs	r3, #1
 800f452:	61a3      	str	r3, [r4, #24]
 800f454:	e7d2      	b.n	800f3fc <__sinit+0xc>
 800f456:	bf00      	nop
 800f458:	08023bfc 	.word	0x08023bfc
 800f45c:	0800f389 	.word	0x0800f389

0800f460 <__sfp>:
 800f460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f462:	4607      	mov	r7, r0
 800f464:	f7ff ffac 	bl	800f3c0 <__sfp_lock_acquire>
 800f468:	4b1e      	ldr	r3, [pc, #120]	; (800f4e4 <__sfp+0x84>)
 800f46a:	681e      	ldr	r6, [r3, #0]
 800f46c:	69b3      	ldr	r3, [r6, #24]
 800f46e:	b913      	cbnz	r3, 800f476 <__sfp+0x16>
 800f470:	4630      	mov	r0, r6
 800f472:	f7ff ffbd 	bl	800f3f0 <__sinit>
 800f476:	3648      	adds	r6, #72	; 0x48
 800f478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	d503      	bpl.n	800f488 <__sfp+0x28>
 800f480:	6833      	ldr	r3, [r6, #0]
 800f482:	b30b      	cbz	r3, 800f4c8 <__sfp+0x68>
 800f484:	6836      	ldr	r6, [r6, #0]
 800f486:	e7f7      	b.n	800f478 <__sfp+0x18>
 800f488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f48c:	b9d5      	cbnz	r5, 800f4c4 <__sfp+0x64>
 800f48e:	4b16      	ldr	r3, [pc, #88]	; (800f4e8 <__sfp+0x88>)
 800f490:	60e3      	str	r3, [r4, #12]
 800f492:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f496:	6665      	str	r5, [r4, #100]	; 0x64
 800f498:	f000 f847 	bl	800f52a <__retarget_lock_init_recursive>
 800f49c:	f7ff ff96 	bl	800f3cc <__sfp_lock_release>
 800f4a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f4a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f4a8:	6025      	str	r5, [r4, #0]
 800f4aa:	61a5      	str	r5, [r4, #24]
 800f4ac:	2208      	movs	r2, #8
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f4b4:	f7fb fd6a 	bl	800af8c <memset>
 800f4b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f4bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4c4:	3468      	adds	r4, #104	; 0x68
 800f4c6:	e7d9      	b.n	800f47c <__sfp+0x1c>
 800f4c8:	2104      	movs	r1, #4
 800f4ca:	4638      	mov	r0, r7
 800f4cc:	f7ff ff62 	bl	800f394 <__sfmoreglue>
 800f4d0:	4604      	mov	r4, r0
 800f4d2:	6030      	str	r0, [r6, #0]
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d1d5      	bne.n	800f484 <__sfp+0x24>
 800f4d8:	f7ff ff78 	bl	800f3cc <__sfp_lock_release>
 800f4dc:	230c      	movs	r3, #12
 800f4de:	603b      	str	r3, [r7, #0]
 800f4e0:	e7ee      	b.n	800f4c0 <__sfp+0x60>
 800f4e2:	bf00      	nop
 800f4e4:	08023bfc 	.word	0x08023bfc
 800f4e8:	ffff0001 	.word	0xffff0001

0800f4ec <_fwalk_reent>:
 800f4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	4688      	mov	r8, r1
 800f4f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f4f8:	2700      	movs	r7, #0
 800f4fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4fe:	f1b9 0901 	subs.w	r9, r9, #1
 800f502:	d505      	bpl.n	800f510 <_fwalk_reent+0x24>
 800f504:	6824      	ldr	r4, [r4, #0]
 800f506:	2c00      	cmp	r4, #0
 800f508:	d1f7      	bne.n	800f4fa <_fwalk_reent+0xe>
 800f50a:	4638      	mov	r0, r7
 800f50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f510:	89ab      	ldrh	r3, [r5, #12]
 800f512:	2b01      	cmp	r3, #1
 800f514:	d907      	bls.n	800f526 <_fwalk_reent+0x3a>
 800f516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f51a:	3301      	adds	r3, #1
 800f51c:	d003      	beq.n	800f526 <_fwalk_reent+0x3a>
 800f51e:	4629      	mov	r1, r5
 800f520:	4630      	mov	r0, r6
 800f522:	47c0      	blx	r8
 800f524:	4307      	orrs	r7, r0
 800f526:	3568      	adds	r5, #104	; 0x68
 800f528:	e7e9      	b.n	800f4fe <_fwalk_reent+0x12>

0800f52a <__retarget_lock_init_recursive>:
 800f52a:	4770      	bx	lr

0800f52c <__retarget_lock_acquire_recursive>:
 800f52c:	4770      	bx	lr

0800f52e <__retarget_lock_release_recursive>:
 800f52e:	4770      	bx	lr

0800f530 <__swhatbuf_r>:
 800f530:	b570      	push	{r4, r5, r6, lr}
 800f532:	460e      	mov	r6, r1
 800f534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f538:	2900      	cmp	r1, #0
 800f53a:	b096      	sub	sp, #88	; 0x58
 800f53c:	4614      	mov	r4, r2
 800f53e:	461d      	mov	r5, r3
 800f540:	da07      	bge.n	800f552 <__swhatbuf_r+0x22>
 800f542:	2300      	movs	r3, #0
 800f544:	602b      	str	r3, [r5, #0]
 800f546:	89b3      	ldrh	r3, [r6, #12]
 800f548:	061a      	lsls	r2, r3, #24
 800f54a:	d410      	bmi.n	800f56e <__swhatbuf_r+0x3e>
 800f54c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f550:	e00e      	b.n	800f570 <__swhatbuf_r+0x40>
 800f552:	466a      	mov	r2, sp
 800f554:	f000 f902 	bl	800f75c <_fstat_r>
 800f558:	2800      	cmp	r0, #0
 800f55a:	dbf2      	blt.n	800f542 <__swhatbuf_r+0x12>
 800f55c:	9a01      	ldr	r2, [sp, #4]
 800f55e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f562:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f566:	425a      	negs	r2, r3
 800f568:	415a      	adcs	r2, r3
 800f56a:	602a      	str	r2, [r5, #0]
 800f56c:	e7ee      	b.n	800f54c <__swhatbuf_r+0x1c>
 800f56e:	2340      	movs	r3, #64	; 0x40
 800f570:	2000      	movs	r0, #0
 800f572:	6023      	str	r3, [r4, #0]
 800f574:	b016      	add	sp, #88	; 0x58
 800f576:	bd70      	pop	{r4, r5, r6, pc}

0800f578 <__smakebuf_r>:
 800f578:	898b      	ldrh	r3, [r1, #12]
 800f57a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f57c:	079d      	lsls	r5, r3, #30
 800f57e:	4606      	mov	r6, r0
 800f580:	460c      	mov	r4, r1
 800f582:	d507      	bpl.n	800f594 <__smakebuf_r+0x1c>
 800f584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f588:	6023      	str	r3, [r4, #0]
 800f58a:	6123      	str	r3, [r4, #16]
 800f58c:	2301      	movs	r3, #1
 800f58e:	6163      	str	r3, [r4, #20]
 800f590:	b002      	add	sp, #8
 800f592:	bd70      	pop	{r4, r5, r6, pc}
 800f594:	ab01      	add	r3, sp, #4
 800f596:	466a      	mov	r2, sp
 800f598:	f7ff ffca 	bl	800f530 <__swhatbuf_r>
 800f59c:	9900      	ldr	r1, [sp, #0]
 800f59e:	4605      	mov	r5, r0
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f7ff f97f 	bl	800e8a4 <_malloc_r>
 800f5a6:	b948      	cbnz	r0, 800f5bc <__smakebuf_r+0x44>
 800f5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ac:	059a      	lsls	r2, r3, #22
 800f5ae:	d4ef      	bmi.n	800f590 <__smakebuf_r+0x18>
 800f5b0:	f023 0303 	bic.w	r3, r3, #3
 800f5b4:	f043 0302 	orr.w	r3, r3, #2
 800f5b8:	81a3      	strh	r3, [r4, #12]
 800f5ba:	e7e3      	b.n	800f584 <__smakebuf_r+0xc>
 800f5bc:	4b0d      	ldr	r3, [pc, #52]	; (800f5f4 <__smakebuf_r+0x7c>)
 800f5be:	62b3      	str	r3, [r6, #40]	; 0x28
 800f5c0:	89a3      	ldrh	r3, [r4, #12]
 800f5c2:	6020      	str	r0, [r4, #0]
 800f5c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5c8:	81a3      	strh	r3, [r4, #12]
 800f5ca:	9b00      	ldr	r3, [sp, #0]
 800f5cc:	6163      	str	r3, [r4, #20]
 800f5ce:	9b01      	ldr	r3, [sp, #4]
 800f5d0:	6120      	str	r0, [r4, #16]
 800f5d2:	b15b      	cbz	r3, 800f5ec <__smakebuf_r+0x74>
 800f5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f000 f8d1 	bl	800f780 <_isatty_r>
 800f5de:	b128      	cbz	r0, 800f5ec <__smakebuf_r+0x74>
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	f023 0303 	bic.w	r3, r3, #3
 800f5e6:	f043 0301 	orr.w	r3, r3, #1
 800f5ea:	81a3      	strh	r3, [r4, #12]
 800f5ec:	89a0      	ldrh	r0, [r4, #12]
 800f5ee:	4305      	orrs	r5, r0
 800f5f0:	81a5      	strh	r5, [r4, #12]
 800f5f2:	e7cd      	b.n	800f590 <__smakebuf_r+0x18>
 800f5f4:	0800f389 	.word	0x0800f389

0800f5f8 <_malloc_usable_size_r>:
 800f5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5fc:	1f18      	subs	r0, r3, #4
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	bfbc      	itt	lt
 800f602:	580b      	ldrlt	r3, [r1, r0]
 800f604:	18c0      	addlt	r0, r0, r3
 800f606:	4770      	bx	lr

0800f608 <_raise_r>:
 800f608:	291f      	cmp	r1, #31
 800f60a:	b538      	push	{r3, r4, r5, lr}
 800f60c:	4604      	mov	r4, r0
 800f60e:	460d      	mov	r5, r1
 800f610:	d904      	bls.n	800f61c <_raise_r+0x14>
 800f612:	2316      	movs	r3, #22
 800f614:	6003      	str	r3, [r0, #0]
 800f616:	f04f 30ff 	mov.w	r0, #4294967295
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
 800f61c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f61e:	b112      	cbz	r2, 800f626 <_raise_r+0x1e>
 800f620:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f624:	b94b      	cbnz	r3, 800f63a <_raise_r+0x32>
 800f626:	4620      	mov	r0, r4
 800f628:	f000 f830 	bl	800f68c <_getpid_r>
 800f62c:	462a      	mov	r2, r5
 800f62e:	4601      	mov	r1, r0
 800f630:	4620      	mov	r0, r4
 800f632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f636:	f000 b817 	b.w	800f668 <_kill_r>
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d00a      	beq.n	800f654 <_raise_r+0x4c>
 800f63e:	1c59      	adds	r1, r3, #1
 800f640:	d103      	bne.n	800f64a <_raise_r+0x42>
 800f642:	2316      	movs	r3, #22
 800f644:	6003      	str	r3, [r0, #0]
 800f646:	2001      	movs	r0, #1
 800f648:	e7e7      	b.n	800f61a <_raise_r+0x12>
 800f64a:	2400      	movs	r4, #0
 800f64c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f650:	4628      	mov	r0, r5
 800f652:	4798      	blx	r3
 800f654:	2000      	movs	r0, #0
 800f656:	e7e0      	b.n	800f61a <_raise_r+0x12>

0800f658 <raise>:
 800f658:	4b02      	ldr	r3, [pc, #8]	; (800f664 <raise+0xc>)
 800f65a:	4601      	mov	r1, r0
 800f65c:	6818      	ldr	r0, [r3, #0]
 800f65e:	f7ff bfd3 	b.w	800f608 <_raise_r>
 800f662:	bf00      	nop
 800f664:	200029f8 	.word	0x200029f8

0800f668 <_kill_r>:
 800f668:	b538      	push	{r3, r4, r5, lr}
 800f66a:	4d07      	ldr	r5, [pc, #28]	; (800f688 <_kill_r+0x20>)
 800f66c:	2300      	movs	r3, #0
 800f66e:	4604      	mov	r4, r0
 800f670:	4608      	mov	r0, r1
 800f672:	4611      	mov	r1, r2
 800f674:	602b      	str	r3, [r5, #0]
 800f676:	f7f5 fd93 	bl	80051a0 <_kill>
 800f67a:	1c43      	adds	r3, r0, #1
 800f67c:	d102      	bne.n	800f684 <_kill_r+0x1c>
 800f67e:	682b      	ldr	r3, [r5, #0]
 800f680:	b103      	cbz	r3, 800f684 <_kill_r+0x1c>
 800f682:	6023      	str	r3, [r4, #0]
 800f684:	bd38      	pop	{r3, r4, r5, pc}
 800f686:	bf00      	nop
 800f688:	20003274 	.word	0x20003274

0800f68c <_getpid_r>:
 800f68c:	f7f5 bd80 	b.w	8005190 <_getpid>

0800f690 <__sread>:
 800f690:	b510      	push	{r4, lr}
 800f692:	460c      	mov	r4, r1
 800f694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f698:	f000 f894 	bl	800f7c4 <_read_r>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	bfab      	itete	ge
 800f6a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6a2:	89a3      	ldrhlt	r3, [r4, #12]
 800f6a4:	181b      	addge	r3, r3, r0
 800f6a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6aa:	bfac      	ite	ge
 800f6ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6ae:	81a3      	strhlt	r3, [r4, #12]
 800f6b0:	bd10      	pop	{r4, pc}

0800f6b2 <__swrite>:
 800f6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b6:	461f      	mov	r7, r3
 800f6b8:	898b      	ldrh	r3, [r1, #12]
 800f6ba:	05db      	lsls	r3, r3, #23
 800f6bc:	4605      	mov	r5, r0
 800f6be:	460c      	mov	r4, r1
 800f6c0:	4616      	mov	r6, r2
 800f6c2:	d505      	bpl.n	800f6d0 <__swrite+0x1e>
 800f6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c8:	2302      	movs	r3, #2
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f000 f868 	bl	800f7a0 <_lseek_r>
 800f6d0:	89a3      	ldrh	r3, [r4, #12]
 800f6d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6da:	81a3      	strh	r3, [r4, #12]
 800f6dc:	4632      	mov	r2, r6
 800f6de:	463b      	mov	r3, r7
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e6:	f000 b817 	b.w	800f718 <_write_r>

0800f6ea <__sseek>:
 800f6ea:	b510      	push	{r4, lr}
 800f6ec:	460c      	mov	r4, r1
 800f6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f2:	f000 f855 	bl	800f7a0 <_lseek_r>
 800f6f6:	1c43      	adds	r3, r0, #1
 800f6f8:	89a3      	ldrh	r3, [r4, #12]
 800f6fa:	bf15      	itete	ne
 800f6fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f706:	81a3      	strheq	r3, [r4, #12]
 800f708:	bf18      	it	ne
 800f70a:	81a3      	strhne	r3, [r4, #12]
 800f70c:	bd10      	pop	{r4, pc}

0800f70e <__sclose>:
 800f70e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f712:	f000 b813 	b.w	800f73c <_close_r>
	...

0800f718 <_write_r>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4d07      	ldr	r5, [pc, #28]	; (800f738 <_write_r+0x20>)
 800f71c:	4604      	mov	r4, r0
 800f71e:	4608      	mov	r0, r1
 800f720:	4611      	mov	r1, r2
 800f722:	2200      	movs	r2, #0
 800f724:	602a      	str	r2, [r5, #0]
 800f726:	461a      	mov	r2, r3
 800f728:	f7f5 fd71 	bl	800520e <_write>
 800f72c:	1c43      	adds	r3, r0, #1
 800f72e:	d102      	bne.n	800f736 <_write_r+0x1e>
 800f730:	682b      	ldr	r3, [r5, #0]
 800f732:	b103      	cbz	r3, 800f736 <_write_r+0x1e>
 800f734:	6023      	str	r3, [r4, #0]
 800f736:	bd38      	pop	{r3, r4, r5, pc}
 800f738:	20003274 	.word	0x20003274

0800f73c <_close_r>:
 800f73c:	b538      	push	{r3, r4, r5, lr}
 800f73e:	4d06      	ldr	r5, [pc, #24]	; (800f758 <_close_r+0x1c>)
 800f740:	2300      	movs	r3, #0
 800f742:	4604      	mov	r4, r0
 800f744:	4608      	mov	r0, r1
 800f746:	602b      	str	r3, [r5, #0]
 800f748:	f7f5 fd7d 	bl	8005246 <_close>
 800f74c:	1c43      	adds	r3, r0, #1
 800f74e:	d102      	bne.n	800f756 <_close_r+0x1a>
 800f750:	682b      	ldr	r3, [r5, #0]
 800f752:	b103      	cbz	r3, 800f756 <_close_r+0x1a>
 800f754:	6023      	str	r3, [r4, #0]
 800f756:	bd38      	pop	{r3, r4, r5, pc}
 800f758:	20003274 	.word	0x20003274

0800f75c <_fstat_r>:
 800f75c:	b538      	push	{r3, r4, r5, lr}
 800f75e:	4d07      	ldr	r5, [pc, #28]	; (800f77c <_fstat_r+0x20>)
 800f760:	2300      	movs	r3, #0
 800f762:	4604      	mov	r4, r0
 800f764:	4608      	mov	r0, r1
 800f766:	4611      	mov	r1, r2
 800f768:	602b      	str	r3, [r5, #0]
 800f76a:	f7f5 fd78 	bl	800525e <_fstat>
 800f76e:	1c43      	adds	r3, r0, #1
 800f770:	d102      	bne.n	800f778 <_fstat_r+0x1c>
 800f772:	682b      	ldr	r3, [r5, #0]
 800f774:	b103      	cbz	r3, 800f778 <_fstat_r+0x1c>
 800f776:	6023      	str	r3, [r4, #0]
 800f778:	bd38      	pop	{r3, r4, r5, pc}
 800f77a:	bf00      	nop
 800f77c:	20003274 	.word	0x20003274

0800f780 <_isatty_r>:
 800f780:	b538      	push	{r3, r4, r5, lr}
 800f782:	4d06      	ldr	r5, [pc, #24]	; (800f79c <_isatty_r+0x1c>)
 800f784:	2300      	movs	r3, #0
 800f786:	4604      	mov	r4, r0
 800f788:	4608      	mov	r0, r1
 800f78a:	602b      	str	r3, [r5, #0]
 800f78c:	f7f5 fd77 	bl	800527e <_isatty>
 800f790:	1c43      	adds	r3, r0, #1
 800f792:	d102      	bne.n	800f79a <_isatty_r+0x1a>
 800f794:	682b      	ldr	r3, [r5, #0]
 800f796:	b103      	cbz	r3, 800f79a <_isatty_r+0x1a>
 800f798:	6023      	str	r3, [r4, #0]
 800f79a:	bd38      	pop	{r3, r4, r5, pc}
 800f79c:	20003274 	.word	0x20003274

0800f7a0 <_lseek_r>:
 800f7a0:	b538      	push	{r3, r4, r5, lr}
 800f7a2:	4d07      	ldr	r5, [pc, #28]	; (800f7c0 <_lseek_r+0x20>)
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	4608      	mov	r0, r1
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	602a      	str	r2, [r5, #0]
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	f7f5 fd70 	bl	8005294 <_lseek>
 800f7b4:	1c43      	adds	r3, r0, #1
 800f7b6:	d102      	bne.n	800f7be <_lseek_r+0x1e>
 800f7b8:	682b      	ldr	r3, [r5, #0]
 800f7ba:	b103      	cbz	r3, 800f7be <_lseek_r+0x1e>
 800f7bc:	6023      	str	r3, [r4, #0]
 800f7be:	bd38      	pop	{r3, r4, r5, pc}
 800f7c0:	20003274 	.word	0x20003274

0800f7c4 <_read_r>:
 800f7c4:	b538      	push	{r3, r4, r5, lr}
 800f7c6:	4d07      	ldr	r5, [pc, #28]	; (800f7e4 <_read_r+0x20>)
 800f7c8:	4604      	mov	r4, r0
 800f7ca:	4608      	mov	r0, r1
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	602a      	str	r2, [r5, #0]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	f7f5 fcfe 	bl	80051d4 <_read>
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	d102      	bne.n	800f7e2 <_read_r+0x1e>
 800f7dc:	682b      	ldr	r3, [r5, #0]
 800f7de:	b103      	cbz	r3, 800f7e2 <_read_r+0x1e>
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	bd38      	pop	{r3, r4, r5, pc}
 800f7e4:	20003274 	.word	0x20003274

0800f7e8 <_init>:
 800f7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ea:	bf00      	nop
 800f7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ee:	bc08      	pop	{r3}
 800f7f0:	469e      	mov	lr, r3
 800f7f2:	4770      	bx	lr

0800f7f4 <_fini>:
 800f7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f6:	bf00      	nop
 800f7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7fa:	bc08      	pop	{r3}
 800f7fc:	469e      	mov	lr, r3
 800f7fe:	4770      	bx	lr
